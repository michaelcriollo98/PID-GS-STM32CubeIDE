
GainScheduling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b90  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000980  08010d70  08010d70  00020d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116f0  080116f0  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080116f0  080116f0  000216f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116f8  080116f8  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116f8  080116f8  000216f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080116fc  080116fc  000216fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08011700  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005078  200001e0  080118dc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005258  080118dc  00035258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017db5  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000363f  00000000  00000000  00047fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0004b600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0004c9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243f7  00000000  00000000  0004dc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d89  00000000  00000000  00071fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3061  00000000  00000000  0008bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015ede9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006afc  00000000  00000000  0015ee3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010d58 	.word	0x08010d58

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	08010d58 	.word	0x08010d58

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <Astar_Init>:
#include "math_matriz.h"
#include "math_vector.h"
#include "random_numbers.h"
#include "cost_function.h"

void Astar_Init(Astar_s *Astar,int select){
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b091      	sub	sp, #68	; 0x44
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]


	Astar->muestra_i = 0;			Astar->muestras = 70;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2246      	movs	r2, #70	; 0x46
 8000fb6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	Astar->iter[0] =   1;			Astar->iter[1] =  6;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	611a      	str	r2, [r3, #16]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2206      	movs	r2, #6
 8000fc4:	615a      	str	r2, [r3, #20]
	Astar-> enable = 0;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
	Astar-> fin = 0;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
	Astar->pausar = 0;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]

	Astar-> lenC = 0;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	Astar-> lenA = 0;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	Astar-> cont = 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]

	Astar->dim_x = 3;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	619a      	str	r2, [r3, #24]
	Astar->dim_y = 3;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	61da      	str	r2, [r3, #28]
	Astar->dim_z = 3;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	621a      	str	r2, [r3, #32]

	pid_s pid; PID_Init(&pid, select);
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	6839      	ldr	r1, [r7, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f005 fb56 	bl	80066b8 <PID_Init>
	Astar->Kpmin =  0.533 * pid.Kp;
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fac2 	bl	8000598 <__aeabi_f2d>
 8001014:	a398      	add	r3, pc, #608	; (adr r3, 8001278 <Astar_Init+0x2d8>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff fb15 	bl	8000648 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f7ff fde7 	bl	8000bf8 <__aeabi_d2f>
 800102a:	4602      	mov	r2, r0
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	655a      	str	r2, [r3, #84]	; 0x54
	Astar->Kpmax =     1  * pid.Kp;
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	659a      	str	r2, [r3, #88]	; 0x58
	Astar->Kdmin  = 1.067 * pid.Kd;
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff faad 	bl	8000598 <__aeabi_f2d>
 800103e:	a390      	add	r3, pc, #576	; (adr r3, 8001280 <Astar_Init+0x2e0>)
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	f7ff fb00 	bl	8000648 <__aeabi_dmul>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f7ff fdd2 	bl	8000bf8 <__aeabi_d2f>
 8001054:	4602      	mov	r2, r0
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	65da      	str	r2, [r3, #92]	; 0x5c
	Astar->Kdmax =      2 * pid.Kd;
 800105a:	edd7 7a08 	vldr	s15, [r7, #32]
 800105e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	//Astar->Kimin=    0.01 * pid.Ki;
	//Astar->Kimax =   0.85 * pid.Ki;
	Astar->Kimin=    1.2 * pid.Ki;
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa94 	bl	8000598 <__aeabi_f2d>
 8001070:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001074:	4b7e      	ldr	r3, [pc, #504]	; (8001270 <Astar_Init+0x2d0>)
 8001076:	f7ff fae7 	bl	8000648 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fdb9 	bl	8000bf8 <__aeabi_d2f>
 8001086:	4602      	mov	r2, r0
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	665a      	str	r2, [r3, #100]	; 0x64
	Astar->Kimax =   2.5 * pid.Ki;
 800108c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001090:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	reserve_memory_Astar(Astar);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 fd32 	bl	8001b08 <reserve_memory_Astar>
	generate_ID(Astar->dim_x, Astar->dim_y, Astar->dim_z,  Astar->ID,Astar->cifras);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6998      	ldr	r0, [r3, #24]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69d9      	ldr	r1, [r3, #28]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1a      	ldr	r2, [r3, #32]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	338c      	adds	r3, #140	; 0x8c
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	4623      	mov	r3, r4
 80010bc:	f000 fef8 	bl	8001eb0 <generate_ID>
	zerosR3(Astar->dim_x, Astar->dim_y, Astar->dim_z,  Astar->space);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6998      	ldr	r0, [r3, #24]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69d9      	ldr	r1, [r3, #28]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1a      	ldr	r2, [r3, #32]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d0:	f004 fb84 	bl	80057dc <zerosR3>
	zerosR3(Astar->dim_x, Astar->dim_y, Astar->dim_z,  Astar->padre);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6998      	ldr	r0, [r3, #24]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69d9      	ldr	r1, [r3, #28]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1a      	ldr	r2, [r3, #32]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	f004 fb7a 	bl	80057dc <zerosR3>
	zerosR3f(Astar->dim_x, Astar->dim_y, Astar->dim_z,  Astar->G);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6998      	ldr	r0, [r3, #24]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69d9      	ldr	r1, [r3, #28]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1a      	ldr	r2, [r3, #32]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010f8:	f004 fbaa 	bl	8005850 <zerosR3f>
	onesR3f(Astar->dim_x, Astar->dim_y, Astar->dim_z,  Astar->F);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6998      	ldr	r0, [r3, #24]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69d9      	ldr	r1, [r3, #28]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1a      	ldr	r2, [r3, #32]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800110c:	f004 fb2b 	bl	8005766 <onesR3f>
	prod_escalarMatrizR3(Astar->dim_x, Astar->dim_y, Astar->dim_z,  Astar->F, NAN);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6998      	ldr	r0, [r3, #24]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69d9      	ldr	r1, [r3, #28]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1a      	ldr	r2, [r3, #32]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001120:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001274 <Astar_Init+0x2d4>
 8001124:	f004 fc3a 	bl	800599c <prod_escalarMatrizR3>
	prod_escalarMatrizR3(Astar->dim_x, Astar->dim_y, Astar->dim_z,  Astar->H, NAN);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6998      	ldr	r0, [r3, #24]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69d9      	ldr	r1, [r3, #28]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1a      	ldr	r2, [r3, #32]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001138:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8001274 <Astar_Init+0x2d4>
 800113c:	f004 fc2e 	bl	800599c <prod_escalarMatrizR3>
	linspace(Astar->Kp_values, Astar->Kpmin, Astar->Kpmax,Astar->dim_x);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4619      	mov	r1, r3
 8001156:	eef0 0a47 	vmov.f32	s1, s14
 800115a:	eeb0 0a67 	vmov.f32	s0, s15
 800115e:	4610      	mov	r0, r2
 8001160:	f004 fcbc 	bl	8005adc <linspace>
	linspace(Astar->Kd_values, Astar->Kdmin, Astar->Kdmax,Astar->dim_y);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	4619      	mov	r1, r3
 800117a:	eef0 0a47 	vmov.f32	s1, s14
 800117e:	eeb0 0a67 	vmov.f32	s0, s15
 8001182:	4610      	mov	r0, r2
 8001184:	f004 fcaa 	bl	8005adc <linspace>
	linspace(Astar->Ki_values, Astar->Kimin, Astar->Kimax,Astar->dim_z);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4619      	mov	r1, r3
 800119e:	eef0 0a47 	vmov.f32	s1, s14
 80011a2:	eeb0 0a67 	vmov.f32	s0, s15
 80011a6:	4610      	mov	r0, r2
 80011a8:	f004 fc98 	bl	8005adc <linspace>

	Astar->X1 = find(pid.Gains[0],Astar->dim_x,Astar->Kp_values,-1);
 80011ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	699a      	ldr	r2, [r3, #24]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011b8:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80011bc:	4619      	mov	r1, r3
 80011be:	4610      	mov	r0, r2
 80011c0:	eeb0 0a67 	vmov.f32	s0, s15
 80011c4:	f004 fd14 	bl	8005bf0 <find>
 80011c8:	4602      	mov	r2, r0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
	Astar->Y1 = find(pid.Gains[2],Astar->dim_y,Astar->Kd_values,-1);
 80011ce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69da      	ldr	r2, [r3, #28]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011da:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80011de:	4619      	mov	r1, r3
 80011e0:	4610      	mov	r0, r2
 80011e2:	eeb0 0a67 	vmov.f32	s0, s15
 80011e6:	f004 fd03 	bl	8005bf0 <find>
 80011ea:	4602      	mov	r2, r0
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
	Astar->Z1 = find(pid.Gains[1],Astar->dim_z,Astar->Ki_values,-1);
 80011f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1a      	ldr	r2, [r3, #32]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011fc:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001200:	4619      	mov	r1, r3
 8001202:	4610      	mov	r0, r2
 8001204:	eeb0 0a67 	vmov.f32	s0, s15
 8001208:	f004 fcf2 	bl	8005bf0 <find>
 800120c:	4602      	mov	r2, r0
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	62da      	str	r2, [r3, #44]	; 0x2c
	// error -1: encuentra en el vector el indice mas cercano al valor dado

	Astar->X2 = randi(0, Astar->dim_x -1);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	3b01      	subs	r3, #1
 8001218:	4619      	mov	r1, r3
 800121a:	2000      	movs	r0, #0
 800121c:	f005 fc84 	bl	8006b28 <randi>
 8001220:	4602      	mov	r2, r0
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	631a      	str	r2, [r3, #48]	; 0x30
	Astar->Y2 = randi(0, Astar->dim_y -1);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	3b01      	subs	r3, #1
 800122c:	4619      	mov	r1, r3
 800122e:	2000      	movs	r0, #0
 8001230:	f005 fc7a 	bl	8006b28 <randi>
 8001234:	4602      	mov	r2, r0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	635a      	str	r2, [r3, #52]	; 0x34
	Astar->Z2 = randi(0, Astar->dim_z -1);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	3b01      	subs	r3, #1
 8001240:	4619      	mov	r1, r3
 8001242:	2000      	movs	r0, #0
 8001244:	f005 fc70 	bl	8006b28 <randi>
 8001248:	4602      	mov	r2, r0
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	639a      	str	r2, [r3, #56]	; 0x38

	Astar->X2 =-1;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	631a      	str	r2, [r3, #48]	; 0x30
	Astar->Y2 =-1;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	635a      	str	r2, [r3, #52]	; 0x34
	Astar->Z2 = -1;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	639a      	str	r2, [r3, #56]	; 0x38

	printf("index2 Kp = %d\n",Astar->X2);
	printf("index2 Kd = %d\n",Astar->Y2);
	printf("index2 Ki = %d\n",Astar->Z2);*/

}
 8001266:	bf00      	nop
 8001268:	373c      	adds	r7, #60	; 0x3c
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	3ff33333 	.word	0x3ff33333
 8001274:	7fc00000 	.word	0x7fc00000
 8001278:	04189375 	.word	0x04189375
 800127c:	3fe10e56 	.word	0x3fe10e56
 8001280:	978d4fdf 	.word	0x978d4fdf
 8001284:	3ff1126e 	.word	0x3ff1126e

08001288 <Aestrella>:

void Aestrella(Astar_s *Astar,pid_s *pid,float dt)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	ed2d 8b02 	vpush	{d8}
 800128e:	b0a5      	sub	sp, #148	; 0x94
 8001290:	af02      	add	r7, sp, #8
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	ed87 0a01 	vstr	s0, [r7, #4]
	if (Astar->fin == 0){
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f040 8428 	bne.w	8001af4 <Aestrella+0x86c>
		if (Astar->enable == 1)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	f040 8413 	bne.w	8001ad4 <Aestrella+0x84c>
		{
			int x,y,z;
			int *coord[] = {&x,&y,&z};
 80012ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012b2:	647b      	str	r3, [r7, #68]	; 0x44
 80012b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80012ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80012be:	64fb      	str	r3, [r7, #76]	; 0x4c
			int dim[] ={Astar->dim_x,Astar->dim_y,Astar->dim_z};
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	643b      	str	r3, [r7, #64]	; 0x40
			int posActual[3];
			int subiter[3];
			int salir = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			int lenAF,pos,cont_next, find_indexC, find_indexA,ID_XYZ,ZYX, YX ;
			float G;

			do{
				posActual[0] = Astar->X1;posActual[1] = Astar->Y1;posActual[2] = Astar->Z1;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
				if (!((Astar->X1 == Astar->X2 && Astar->Y1 == Astar->Y2 && Astar->Z1 == Astar->Z2)|| Astar->iter[0] > Astar->iter[1]))
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d10c      	bne.n	8001310 <Aestrella+0x88>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fe:	429a      	cmp	r2, r3
 8001300:	d106      	bne.n	8001310 <Aestrella+0x88>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130a:	429a      	cmp	r2, r3
 800130c:	f000 8388 	beq.w	8001a20 <Aestrella+0x798>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	429a      	cmp	r2, r3
 800131a:	f300 8381 	bgt.w	8001a20 <Aestrella+0x798>
				{
					if (Astar->cont == 0){
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d11c      	bne.n	8001360 <Aestrella+0xd8>
						for (int i = 0;i<3;++i){(*coord[i]) = (posActual[i]);}
 8001326:	2300      	movs	r3, #0
 8001328:	67fb      	str	r3, [r7, #124]	; 0x7c
 800132a:	e00f      	b.n	800134c <Aestrella+0xc4>
 800132c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	3388      	adds	r3, #136	; 0x88
 8001332:	443b      	add	r3, r7
 8001334:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8001338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	3388      	adds	r3, #136	; 0x88
 800133e:	443b      	add	r3, r7
 8001340:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001348:	3301      	adds	r3, #1
 800134a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800134c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800134e:	2b02      	cmp	r3, #2
 8001350:	ddec      	ble.n	800132c <Aestrella+0xa4>
						cont_next  = 1;
 8001352:	2301      	movs	r3, #1
 8001354:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						Astar->pausar = 1;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2201      	movs	r2, #1
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	e03d      	b.n	80013dc <Aestrella+0x154>
					}
					else{
						/*--------------------------------------------------------------------------------
						Delimitamos las coordenas que se encuntren fuera del rango  0<(x,y,z)<dim(x,y,z)*/
						Astar->cont  = delimitar_coordenadas(dim, posActual, Astar->cont  );
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001368:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800136c:	4618      	mov	r0, r3
 800136e:	f000 feeb 	bl	8002148 <delimitar_coordenadas>
 8001372:	4602      	mov	r2, r0
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	609a      	str	r2, [r3, #8]
						cont_next    = delimitar_coordenadas(dim, posActual, Astar->cont+1);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001382:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fede 	bl	8002148 <delimitar_coordenadas>
 800138c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
						/*-------------------------------------------------------------------------------
						//Determina la coordenada (x,y,z) actual 							             */
						contador(Astar->cont,  subiter);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f107 0220 	add.w	r2, r7, #32
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fe3e 	bl	800201c <contador>
						for (int i = 0;i<3;++i){(*coord[i]) = (posActual[i]) + subiter[i]-2;}
 80013a0:	2300      	movs	r3, #0
 80013a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80013a4:	e017      	b.n	80013d6 <Aestrella+0x14e>
 80013a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	3388      	adds	r3, #136	; 0x88
 80013ac:	443b      	add	r3, r7
 80013ae:	f853 2c5c 	ldr.w	r2, [r3, #-92]
 80013b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	3388      	adds	r3, #136	; 0x88
 80013b8:	443b      	add	r3, r7
 80013ba:	f853 3c68 	ldr.w	r3, [r3, #-104]
 80013be:	441a      	add	r2, r3
 80013c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	3388      	adds	r3, #136	; 0x88
 80013c6:	443b      	add	r3, r7
 80013c8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80013cc:	3a02      	subs	r2, #2
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013d2:	3301      	adds	r3, #1
 80013d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80013d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013d8:	2b02      	cmp	r3, #2
 80013da:	dde4      	ble.n	80013a6 <Aestrella+0x11e>
						//---------------------------------------------------------------------------------
						}
					find_indexC = find_int(Astar->ID[x][y][z], Astar->lenC, Astar->ListaC, 0);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001402:	ed9f 0aab 	vldr	s0, [pc, #684]	; 80016b0 <Aestrella+0x428>
 8001406:	461a      	mov	r2, r3
 8001408:	f004 fcee 	bl	8005de8 <find_int>
 800140c:	6778      	str	r0, [r7, #116]	; 0x74
					if (Astar->space[x][y][z] == 0 && find_indexC ==-1)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 821a 	bne.w	8001864 <Aestrella+0x5dc>
 8001430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001436:	f040 8215 	bne.w	8001864 <Aestrella+0x5dc>
					{
						find_indexA = find_int(Astar->ID[x][y][z], Astar->lenA, Astar->ListaA, 0);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800143e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001460:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80016b0 <Aestrella+0x428>
 8001464:	461a      	mov	r2, r3
 8001466:	f004 fcbf 	bl	8005de8 <find_int>
 800146a:	6738      	str	r0, [r7, #112]	; 0x70
						if (find_indexA == -1)
 800146c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800146e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001472:	f040 811f 	bne.w	80016b4 <Aestrella+0x42c>
						{
							if (Astar->pausar == 1)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b01      	cmp	r3, #1
 800147c:	f040 8110 	bne.w	80016a0 <Aestrella+0x418>
							{
								Astar->H[x][y][z] = calcule_cost((Astar->muestras)-1, Astar->y, Astar->r, dt,2);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001486:	1e58      	subs	r0, r3, #1
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	18d4      	adds	r4, r2, r3
 80014ae:	2202      	movs	r2, #2
 80014b0:	edd7 0a01 	vldr	s1, [r7, #4]
 80014b4:	eeb0 0a67 	vmov.f32	s0, s15
 80014b8:	f000 feb6 	bl	8002228 <calcule_cost>
 80014bc:	eef0 7a40 	vmov.f32	s15, s0
 80014c0:	edc4 7a00 	vstr	s15, [r4]
								Astar->G[x][y][z] = Astar->G[Astar->X1][Astar->Y1][Astar->Z1] + sqrtf(powf(x-Astar->X1,2)+powf(y-Astar->Y1,2)+powf(z-Astar->Z1,2));
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	ed93 8a00 	vldr	s16, [r3]
 80014e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80014fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001500:	f00e f80a 	bl	800f518 <powf>
 8001504:	eef0 8a40 	vmov.f32	s17, s0
 8001508:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001518:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800151c:	eeb0 0a67 	vmov.f32	s0, s15
 8001520:	f00d fffa 	bl	800f518 <powf>
 8001524:	eef0 7a40 	vmov.f32	s15, s0
 8001528:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800152c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001540:	eeb0 0a67 	vmov.f32	s0, s15
 8001544:	f00d ffe8 	bl	800f518 <powf>
 8001548:	eef0 7a40 	vmov.f32	s15, s0
 800154c:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8001550:	eeb0 0a67 	vmov.f32	s0, s15
 8001554:	f00e f838 	bl	800f5c8 <sqrtf>
 8001558:	eef0 7a40 	vmov.f32	s15, s0
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	ee78 7a27 	vadd.f32	s15, s16, s15
 800157a:	edc3 7a00 	vstr	s15, [r3]
								Astar->F[x][y][z] = Astar->G[x][y][z] + Astar->H[x][y][z];
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	ed93 7a00 	vldr	s14, [r3]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d8:	edc3 7a00 	vstr	s15, [r3]
								Astar->padre[x][y][z] = Astar->ID[Astar->X1][Astar->Y1][Astar->Z1];
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	441a      	add	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	6819      	ldr	r1, [r3, #0]
 8001608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	6819      	ldr	r1, [r3, #0]
 8001610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	601a      	str	r2, [r3, #0]

								Astar->lenA++;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								Astar->ListaA[Astar->lenA-1] = Astar->ID[x][y][z];
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800162c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	441a      	add	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001650:	3b01      	subs	r3, #1
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	601a      	str	r2, [r3, #0]
								Astar->ListaAF[Astar->lenA-1] = Astar->F[x][y][z];
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800165e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	441a      	add	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001680:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001684:	3b01      	subs	r3, #1
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	601a      	str	r2, [r3, #0]

								Astar->pausar = 0;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
								Astar-> iter[0] ++;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	611a      	str	r2, [r3, #16]
 800169e:	e0e1      	b.n	8001864 <Aestrella+0x5dc>
							}
							else
							{
								Astar->pausar = 1;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2201      	movs	r2, #1
 80016a4:	60da      	str	r2, [r3, #12]
								salir = 1 ;
 80016a6:	2301      	movs	r3, #1
 80016a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016ac:	e0da      	b.n	8001864 <Aestrella+0x5dc>
 80016ae:	bf00      	nop
 80016b0:	00000000 	.word	0x00000000
							}
						}
						else
						{
							G = Astar->G[Astar->X1][Astar->Y1][Astar->Z1] + sqrtf(powf(x-Astar->X1,2)+powf(y-Astar->Y1,2)+powf(z-Astar->Z1,2));
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	ed93 8a00 	vldr	s16, [r3]
 80016d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80016ec:	eeb0 0a67 	vmov.f32	s0, s15
 80016f0:	f00d ff12 	bl	800f518 <powf>
 80016f4:	eef0 8a40 	vmov.f32	s17, s0
 80016f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001708:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800170c:	eeb0 0a67 	vmov.f32	s0, s15
 8001710:	f00d ff02 	bl	800f518 <powf>
 8001714:	eef0 7a40 	vmov.f32	s15, s0
 8001718:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800171c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001730:	eeb0 0a67 	vmov.f32	s0, s15
 8001734:	f00d fef0 	bl	800f518 <powf>
 8001738:	eef0 7a40 	vmov.f32	s15, s0
 800173c:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8001740:	eeb0 0a67 	vmov.f32	s0, s15
 8001744:	f00d ff40 	bl	800f5c8 <sqrtf>
 8001748:	eef0 7a40 	vmov.f32	s15, s0
 800174c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001750:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
							if (G < Astar->G[x][y][z] )
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001776:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177e:	d571      	bpl.n	8001864 <Aestrella+0x5dc>
							{
								Astar->G[x][y][z] = G;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001784:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800179c:	601a      	str	r2, [r3, #0]
								Astar->padre[x][y][z] = Astar->ID[Astar->X1][Astar->Y1][Astar->Z1];
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	441a      	add	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80017c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	6819      	ldr	r1, [r3, #0]
 80017ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	440b      	add	r3, r1
 80017d0:	6819      	ldr	r1, [r3, #0]
 80017d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	601a      	str	r2, [r3, #0]
								Astar->F[x][y][z] =Astar->G[x][y][z] + Astar->H[x][y][z];
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	ed93 7a00 	vldr	s14, [r3]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800181c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	edc3 7a00 	vstr	s15, [r3]
								Astar->ListaAF[find_indexA] = Astar->F[x][y][z];
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800183e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	441a      	add	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800185a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	601a      	str	r2, [r3, #0]
							}

						}
					}

					if ((((Astar->cont-1)%(27))>((cont_next-1)%(27)) && Astar->pausar == 0)||Astar->cont == 0 )
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	1e5a      	subs	r2, r3, #1
 800186a:	4ba5      	ldr	r3, [pc, #660]	; (8001b00 <Aestrella+0x878>)
 800186c:	fb83 1302 	smull	r1, r3, r3, r2
 8001870:	10d9      	asrs	r1, r3, #3
 8001872:	17d3      	asrs	r3, r2, #31
 8001874:	1ac9      	subs	r1, r1, r3
 8001876:	460b      	mov	r3, r1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	440b      	add	r3, r1
 800187c:	00d9      	lsls	r1, r3, #3
 800187e:	440b      	add	r3, r1
 8001880:	1ad1      	subs	r1, r2, r3
 8001882:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001886:	1e58      	subs	r0, r3, #1
 8001888:	4b9d      	ldr	r3, [pc, #628]	; (8001b00 <Aestrella+0x878>)
 800188a:	fb83 2300 	smull	r2, r3, r3, r0
 800188e:	10da      	asrs	r2, r3, #3
 8001890:	17c3      	asrs	r3, r0, #31
 8001892:	1ad2      	subs	r2, r2, r3
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	00da      	lsls	r2, r3, #3
 800189c:	4413      	add	r3, r2
 800189e:	1ac2      	subs	r2, r0, r3
 80018a0:	4291      	cmp	r1, r2
 80018a2:	dd03      	ble.n	80018ac <Aestrella+0x624>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <Aestrella+0x62e>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f040 80ab 	bne.w	8001a0c <Aestrella+0x784>
					{
						ID_XYZ = find(min_v(Astar->lenA, Astar->ListaAF), Astar->lenA, Astar->ListaAF, 0);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018c2:	4619      	mov	r1, r3
 80018c4:	4610      	mov	r0, r2
 80018c6:	f004 fad7 	bl	8005e78 <min_v>
 80018ca:	eef0 7a40 	vmov.f32	s15, s0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018da:	eddf 0a8a 	vldr	s1, [pc, #552]	; 8001b04 <Aestrella+0x87c>
 80018de:	4619      	mov	r1, r3
 80018e0:	4610      	mov	r0, r2
 80018e2:	eeb0 0a67 	vmov.f32	s0, s15
 80018e6:	f004 f983 	bl	8005bf0 <find>
 80018ea:	66b8      	str	r0, [r7, #104]	; 0x68
						if  (ID_XYZ !=-1)
 80018ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f2:	f000 808b 	beq.w	8001a0c <Aestrella+0x784>
						{
							ZYX = Astar->ListaA[ID_XYZ];
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80018fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	667b      	str	r3, [r7, #100]	; 0x64
							Astar->Z1 = (int) (ZYX / Astar->cifras[2]);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800190c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	62da      	str	r2, [r3, #44]	; 0x2c
							YX = ZYX -  Astar->Z1 * Astar->cifras[2];
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800191e:	fb02 f303 	mul.w	r3, r2, r3
 8001922:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	663b      	str	r3, [r7, #96]	; 0x60
							Astar->Y1 = (int) YX / Astar->cifras[1];
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001930:	fb92 f2f3 	sdiv	r2, r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
							Astar->X1 =  YX - Astar->Y1 * Astar->cifras[1];
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001948:	1ad2      	subs	r2, r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	625a      	str	r2, [r3, #36]	; 0x24

							Astar->lenC++;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
							Astar->ListaC[Astar->lenC-1] = Astar->ID[Astar->X1][Astar->Y1][Astar->Z1];
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	441a      	add	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001986:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800198a:	3b01      	subs	r3, #1
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	601a      	str	r2, [r3, #0]
							lenAF = Astar->lenA;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199a:	61fb      	str	r3, [r7, #28]
							pos = setdiff_int(&Astar->lenA, Astar->ListaA, Astar->ID[Astar->X1][Astar->Y1][Astar->Z1]);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	f004 fab9 	bl	8005f40 <setdiff_int>
 80019ce:	65f8      	str	r0, [r7, #92]	; 0x5c
							remove_value_position(&lenAF, Astar->ListaAF, pos);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019dc:	4618      	mov	r0, r3
 80019de:	f004 fa7c 	bl	8005eda <remove_value_position>
							if (Astar->lenC ==(Astar->dim_x*Astar->dim_y*Astar->dim_z)){Astar->fin = 1;salir= 1;}
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	69c9      	ldr	r1, [r1, #28]
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	68f9      	ldr	r1, [r7, #12]
 80019f6:	6a09      	ldr	r1, [r1, #32]
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d105      	bne.n	8001a0c <Aestrella+0x784>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	2301      	movs	r3, #1
 8001a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						}
					}

					if (Astar->pausar == 0){Astar-> cont ++;}
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10b      	bne.n	8001a2c <Aestrella+0x7a4>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	e005      	b.n	8001a2c <Aestrella+0x7a4>
				}
				else{Astar->fin = 1;salir= 1;}
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	2301      	movs	r3, #1
 8001a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			}while (salir == 0);
 8001a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f43f ac51 	beq.w	80012d8 <Aestrella+0x50>
			mostrar_vector_int(Astar->ListaC, Astar->lenC, "ListaC =");
			printf("*******************************\n");*/
			//--------------------------------------------------------------------------------
			//Selecciona los nuevos valores de ganacia para la siguiente iteracion------------
			// ***************** Escogemos la funcion menor Costo **************************
			if (Astar->fin == 1)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d12a      	bne.n	8001a94 <Aestrella+0x80c>
			{
				//mostrarMatrizR3(Astar->dim_x,Astar->dim_y,Astar->dim_z,Astar->F,"F");
				//mostrarMatrizR3(Astar->dim_x,Astar->dim_y,Astar->dim_z,Astar->H,"H");
				int out[3];
				findminMatrizR3(Astar->dim_x, Astar->dim_y, Astar->dim_z, Astar->H, out);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6998      	ldr	r0, [r3, #24]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	69d9      	ldr	r1, [r3, #28]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a1a      	ldr	r2, [r3, #32]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	4623      	mov	r3, r4
 8001a56:	f003 ff36 	bl	80058c6 <findminMatrizR3>
				if (out[0]!=-1)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d030      	beq.n	8001ac4 <Aestrella+0x83c>
				{
					pid->Gains[0] = Astar->Kp_values[out[0]];
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
					pid->Gains[1] = Astar->Ki_values[out[2]];
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
					pid->Gains[2] = Astar->Kd_values[out[1]];
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a92:	e017      	b.n	8001ac4 <Aestrella+0x83c>
				}
				//mostrar_vector(pid->Gains, 3, "BestGains Astar =");
			}
			else
			{
				pid->Gains[0] = Astar->Kp_values[x];
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
				pid->Gains[1] = Astar->Ki_values[z];
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
				pid->Gains[2] = Astar->Kd_values[y];
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			Astar->muestra_i = 0; Astar->enable = 0;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
		{
			if (Astar->muestra_i < Astar->muestras-1)
				Astar->muestra_i ++;
		}
	}
}
 8001ad2:	e00f      	b.n	8001af4 <Aestrella+0x86c>
			if (Astar->muestra_i < Astar->muestras-1)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	da06      	bge.n	8001af4 <Aestrella+0x86c>
				Astar->muestra_i ++;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8001af4:	bf00      	nop
 8001af6:	378c      	adds	r7, #140	; 0x8c
 8001af8:	46bd      	mov	sp, r7
 8001afa:	ecbd 8b02 	vpop	{d8}
 8001afe:	bd90      	pop	{r4, r7, pc}
 8001b00:	4bda12f7 	.word	0x4bda12f7
 8001b04:	00000000 	.word	0x00000000

08001b08 <reserve_memory_Astar>:

void reserve_memory_Astar(Astar_s *Astar){
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b091      	sub	sp, #68	; 0x44
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

	Astar->F =(float***) malloc(Astar->dim_x*sizeof(float**));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f00a fcfa 	bl	800c510 <malloc>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	649a      	str	r2, [r3, #72]	; 0x48
	for (int i = 0 ; i<Astar->dim_x;++i){
 8001b24:	2300      	movs	r3, #0
 8001b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b28:	e02b      	b.n	8001b82 <reserve_memory_Astar+0x7a>
		Astar->F[i] = (float**) malloc(Astar->dim_y*sizeof(float*));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	0099      	lsls	r1, r3, #2
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	18d4      	adds	r4, r2, r3
 8001b3a:	4608      	mov	r0, r1
 8001b3c:	f00a fce8 	bl	800c510 <malloc>
 8001b40:	4603      	mov	r3, r0
 8001b42:	6023      	str	r3, [r4, #0]
		for(int j = 0 ; j<Astar->dim_y;++j){
 8001b44:	2300      	movs	r3, #0
 8001b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b48:	e013      	b.n	8001b72 <reserve_memory_Astar+0x6a>
			Astar->F[i][j] = (float*) malloc(Astar->dim_z*sizeof(float));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	0099      	lsls	r1, r3, #2
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	18d4      	adds	r4, r2, r3
 8001b62:	4608      	mov	r0, r1
 8001b64:	f00a fcd4 	bl	800c510 <malloc>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	6023      	str	r3, [r4, #0]
		for(int j = 0 ; j<Astar->dim_y;++j){
 8001b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6e:	3301      	adds	r3, #1
 8001b70:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbe6      	blt.n	8001b4a <reserve_memory_Astar+0x42>
	for (int i = 0 ; i<Astar->dim_x;++i){
 8001b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b7e:	3301      	adds	r3, #1
 8001b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dbce      	blt.n	8001b2a <reserve_memory_Astar+0x22>
		}
	}

	Astar->H =(float***) malloc(Astar->dim_x*sizeof(float**));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f00a fcbc 	bl	800c510 <malloc>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	64da      	str	r2, [r3, #76]	; 0x4c
	for (int i = 0 ; i<Astar->dim_x;++i){
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba4:	e02b      	b.n	8001bfe <reserve_memory_Astar+0xf6>
		Astar->H[i] = (float**) malloc(Astar->dim_y*sizeof(float*));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	0099      	lsls	r1, r3, #2
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	18d4      	adds	r4, r2, r3
 8001bb6:	4608      	mov	r0, r1
 8001bb8:	f00a fcaa 	bl	800c510 <malloc>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	6023      	str	r3, [r4, #0]
		for(int j = 0 ; j<Astar->dim_y;++j){
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8001bc4:	e013      	b.n	8001bee <reserve_memory_Astar+0xe6>
			Astar->H[i][j] = (float*) malloc(Astar->dim_z*sizeof(float));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	0099      	lsls	r1, r3, #2
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	18d4      	adds	r4, r2, r3
 8001bde:	4608      	mov	r0, r1
 8001be0:	f00a fc96 	bl	800c510 <malloc>
 8001be4:	4603      	mov	r3, r0
 8001be6:	6023      	str	r3, [r4, #0]
		for(int j = 0 ; j<Astar->dim_y;++j){
 8001be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bea:	3301      	adds	r3, #1
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	dbe6      	blt.n	8001bc6 <reserve_memory_Astar+0xbe>
	for (int i = 0 ; i<Astar->dim_x;++i){
 8001bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c04:	429a      	cmp	r2, r3
 8001c06:	dbce      	blt.n	8001ba6 <reserve_memory_Astar+0x9e>
		}
	}

	Astar->G =(float***) malloc(Astar->dim_x*sizeof(float**));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f00a fc7e 	bl	800c510 <malloc>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	651a      	str	r2, [r3, #80]	; 0x50
	for (int i = 0 ; i<Astar->dim_x;++i){
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c20:	e02b      	b.n	8001c7a <reserve_memory_Astar+0x172>
		Astar->G[i] = (float**) malloc(Astar->dim_y*sizeof(float*));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	0099      	lsls	r1, r3, #2
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	18d4      	adds	r4, r2, r3
 8001c32:	4608      	mov	r0, r1
 8001c34:	f00a fc6c 	bl	800c510 <malloc>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	6023      	str	r3, [r4, #0]
		for(int j = 0 ; j<Astar->dim_y;++j){
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c40:	e013      	b.n	8001c6a <reserve_memory_Astar+0x162>
			Astar->G[i][j] = (float*) malloc(Astar->dim_z*sizeof(float));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	0099      	lsls	r1, r3, #2
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	18d4      	adds	r4, r2, r3
 8001c5a:	4608      	mov	r0, r1
 8001c5c:	f00a fc58 	bl	800c510 <malloc>
 8001c60:	4603      	mov	r3, r0
 8001c62:	6023      	str	r3, [r4, #0]
		for(int j = 0 ; j<Astar->dim_y;++j){
 8001c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c66:	3301      	adds	r3, #1
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c70:	429a      	cmp	r2, r3
 8001c72:	dbe6      	blt.n	8001c42 <reserve_memory_Astar+0x13a>
	for (int i = 0 ; i<Astar->dim_x;++i){
 8001c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c76:	3301      	adds	r3, #1
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dbce      	blt.n	8001c22 <reserve_memory_Astar+0x11a>
		}
	}

	Astar->space=(int***) malloc(Astar->dim_x*sizeof(int**));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f00a fc40 	bl	800c510 <malloc>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c
		for (int i = 0 ; i<Astar->dim_x;++i){
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9c:	e02b      	b.n	8001cf6 <reserve_memory_Astar+0x1ee>
			Astar->space[i] = (int**) malloc(Astar->dim_y*sizeof(int*));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	0099      	lsls	r1, r3, #2
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	18d4      	adds	r4, r2, r3
 8001cae:	4608      	mov	r0, r1
 8001cb0:	f00a fc2e 	bl	800c510 <malloc>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	6023      	str	r3, [r4, #0]
			for(int j = 0 ; j<Astar->dim_y;++j){
 8001cb8:	2300      	movs	r3, #0
 8001cba:	623b      	str	r3, [r7, #32]
 8001cbc:	e013      	b.n	8001ce6 <reserve_memory_Astar+0x1de>
				Astar->space[i][j] = (int*) malloc(Astar->dim_z*sizeof(int));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	0099      	lsls	r1, r3, #2
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	18d4      	adds	r4, r2, r3
 8001cd6:	4608      	mov	r0, r1
 8001cd8:	f00a fc1a 	bl	800c510 <malloc>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	6023      	str	r3, [r4, #0]
			for(int j = 0 ; j<Astar->dim_y;++j){
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	623b      	str	r3, [r7, #32]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	6a3a      	ldr	r2, [r7, #32]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbe6      	blt.n	8001cbe <reserve_memory_Astar+0x1b6>
		for (int i = 0 ; i<Astar->dim_x;++i){
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dbce      	blt.n	8001c9e <reserve_memory_Astar+0x196>
			}
		}

	Astar->padre=(int***) malloc(Astar->dim_x*sizeof(int**));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f00a fc02 	bl	800c510 <malloc>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44
		for (int i = 0 ; i<Astar->dim_x;++i){
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	e02b      	b.n	8001d72 <reserve_memory_Astar+0x26a>
			Astar->padre[i] = (int**) malloc(Astar->dim_y*sizeof(int*));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	0099      	lsls	r1, r3, #2
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	18d4      	adds	r4, r2, r3
 8001d2a:	4608      	mov	r0, r1
 8001d2c:	f00a fbf0 	bl	800c510 <malloc>
 8001d30:	4603      	mov	r3, r0
 8001d32:	6023      	str	r3, [r4, #0]
			for(int j = 0 ; j<Astar->dim_y;++j){
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	e013      	b.n	8001d62 <reserve_memory_Astar+0x25a>
				Astar->padre[i][j] = (int*) malloc(Astar->dim_z*sizeof(int));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	0099      	lsls	r1, r3, #2
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	18d4      	adds	r4, r2, r3
 8001d52:	4608      	mov	r0, r1
 8001d54:	f00a fbdc 	bl	800c510 <malloc>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	6023      	str	r3, [r4, #0]
			for(int j = 0 ; j<Astar->dim_y;++j){
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dbe6      	blt.n	8001d3a <reserve_memory_Astar+0x232>
		for (int i = 0 ; i<Astar->dim_x;++i){
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	dbce      	blt.n	8001d1a <reserve_memory_Astar+0x212>
			}
		}

	Astar->ID=(int***) malloc(Astar->dim_x*sizeof(int**));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f00a fbc4 	bl	800c510 <malloc>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40
		for (int i = 0 ; i<Astar->dim_x;++i){
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	e02b      	b.n	8001dee <reserve_memory_Astar+0x2e6>
			Astar->ID[i] = (int**) malloc(Astar->dim_y*sizeof(int*));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	0099      	lsls	r1, r3, #2
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	18d4      	adds	r4, r2, r3
 8001da6:	4608      	mov	r0, r1
 8001da8:	f00a fbb2 	bl	800c510 <malloc>
 8001dac:	4603      	mov	r3, r0
 8001dae:	6023      	str	r3, [r4, #0]
			for(int j = 0 ; j<Astar->dim_y;++j){
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e013      	b.n	8001dde <reserve_memory_Astar+0x2d6>
				Astar->ID[i][j] = (int*) malloc(Astar->dim_z*sizeof(int));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	0099      	lsls	r1, r3, #2
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	18d4      	adds	r4, r2, r3
 8001dce:	4608      	mov	r0, r1
 8001dd0:	f00a fb9e 	bl	800c510 <malloc>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	6023      	str	r3, [r4, #0]
			for(int j = 0 ; j<Astar->dim_y;++j){
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	dbe6      	blt.n	8001db6 <reserve_memory_Astar+0x2ae>
		for (int i = 0 ; i<Astar->dim_x;++i){
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dbce      	blt.n	8001d96 <reserve_memory_Astar+0x28e>
			}
		}

	Astar->Kp_values = (float *) malloc(Astar->dim_x*sizeof(float));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f00a fb86 	bl	800c510 <malloc>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	66da      	str	r2, [r3, #108]	; 0x6c
	Astar->Kd_values = (float *) malloc(Astar->dim_y*sizeof(float));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f00a fb7c 	bl	800c510 <malloc>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	671a      	str	r2, [r3, #112]	; 0x70
	Astar->Ki_values = (float *) malloc(Astar->dim_z*sizeof(float));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f00a fb72 	bl	800c510 <malloc>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	675a      	str	r2, [r3, #116]	; 0x74

	int max_valores =	(Astar->iter[1]<(Astar->dim_x*Astar->dim_y*Astar->dim_z)?Astar->iter[1]:(Astar->dim_x*Astar->dim_y*Astar->dim_z));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	69d2      	ldr	r2, [r2, #28]
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6a12      	ldr	r2, [r2, #32]
 8001e44:	fb03 f202 	mul.w	r2, r3, r2
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	bfa8      	it	ge
 8001e50:	4613      	movge	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
	Astar->ListaA = (int *) malloc(max_valores*sizeof(int));
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f00a fb59 	bl	800c510 <malloc>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	679a      	str	r2, [r3, #120]	; 0x78
	Astar->ListaC = (int *) malloc(max_valores*sizeof(int));
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f00a fb50 	bl	800c510 <malloc>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	67da      	str	r2, [r3, #124]	; 0x7c
	Astar->ListaAF = (float *) malloc(max_valores*sizeof(float));
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f00a fb47 	bl	800c510 <malloc>
 8001e82:	4603      	mov	r3, r0
 8001e84:	461a      	mov	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	Astar->y= (float *)malloc((Astar->muestras+1)*sizeof(float));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e92:	3301      	adds	r3, #1
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f00a fb3a 	bl	800c510 <malloc>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8001ea6:	bf00      	nop
 8001ea8:	3744      	adds	r7, #68	; 0x44
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd90      	pop	{r4, r7, pc}
	...

08001eb0 <generate_ID>:

void generate_ID(int filas,int columnas,int capas, int ***ID,int *cifras){
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b091      	sub	sp, #68	; 0x44
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]

	int x_cifras = 1,y_cifras, z_cifras;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
	char text1[10],text2[10];

	sprintf(text1,"%d",filas-1);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1e5a      	subs	r2, r3, #1
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	4953      	ldr	r1, [pc, #332]	; (8002018 <generate_ID+0x168>)
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f00b f90b 	bl	800d0e8 <siprintf>
	y_cifras = (pow( 10,strlen( text1)) + 0.000001);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe f9a2 	bl	8000220 <strlen>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fb38 	bl	8000554 <__aeabi_ui2d>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	ec43 2b11 	vmov	d1, r2, r3
 8001eec:	ed9f 0b46 	vldr	d0, [pc, #280]	; 8002008 <generate_ID+0x158>
 8001ef0:	f00d faa2 	bl	800f438 <pow>
 8001ef4:	ec51 0b10 	vmov	r0, r1, d0
 8001ef8:	a345      	add	r3, pc, #276	; (adr r3, 8002010 <generate_ID+0x160>)
 8001efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efe:	f7fe f9ed 	bl	80002dc <__adddf3>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f7fe fe4d 	bl	8000ba8 <__aeabi_d2iz>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c

	sprintf(text2,"%d",columnas-1);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1e5a      	subs	r2, r3, #1
 8001f16:	f107 0310 	add.w	r3, r7, #16
 8001f1a:	493f      	ldr	r1, [pc, #252]	; (8002018 <generate_ID+0x168>)
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f00b f8e3 	bl	800d0e8 <siprintf>
	z_cifras = (pow(10,strlen(text1)+strlen(text2))+  0.000001);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe f97a 	bl	8000220 <strlen>
 8001f2c:	4604      	mov	r4, r0
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe f974 	bl	8000220 <strlen>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4423      	add	r3, r4
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fb09 	bl	8000554 <__aeabi_ui2d>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	ec43 2b11 	vmov	d1, r2, r3
 8001f4a:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8002008 <generate_ID+0x158>
 8001f4e:	f00d fa73 	bl	800f438 <pow>
 8001f52:	ec51 0b10 	vmov	r0, r1, d0
 8001f56:	a32e      	add	r3, pc, #184	; (adr r3, 8002010 <generate_ID+0x160>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe f9be 	bl	80002dc <__adddf3>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	f7fe fe1e 	bl	8000ba8 <__aeabi_d2iz>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28

	cifras[0] = x_cifras;
 8001f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f74:	601a      	str	r2, [r3, #0]
	cifras[1] = y_cifras;
 8001f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f78:	3304      	adds	r3, #4
 8001f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f7c:	601a      	str	r2, [r3, #0]
	cifras[2] = z_cifras;
 8001f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f80:	3308      	adds	r3, #8
 8001f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f84:	601a      	str	r2, [r3, #0]
	for (int k = 0;k<capas;++k){
 8001f86:	2300      	movs	r3, #0
 8001f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f8a:	e031      	b.n	8001ff0 <generate_ID+0x140>
		for (int i = 0;i<filas;++i){
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f90:	e027      	b.n	8001fe2 <generate_ID+0x132>
			for (int j = 0;j<columnas;++j){
 8001f92:	2300      	movs	r3, #0
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
 8001f96:	e01d      	b.n	8001fd4 <generate_ID+0x124>
				ID[i][j][k] = i*x_cifras+j*y_cifras+k*z_cifras;
 8001f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f9c:	fb03 f202 	mul.w	r2, r3, r2
 8001fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fa4:	fb01 f303 	mul.w	r3, r1, r3
 8001fa8:	18d1      	adds	r1, r2, r3
 8001faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fae:	fb03 f202 	mul.w	r2, r3, r2
 8001fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	6838      	ldr	r0, [r7, #0]
 8001fb8:	4403      	add	r3, r0
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4403      	add	r3, r0
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4403      	add	r3, r0
 8001fca:	440a      	add	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
			for (int j = 0;j<columnas;++j){
 8001fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	dbdd      	blt.n	8001f98 <generate_ID+0xe8>
		for (int i = 0;i<filas;++i){
 8001fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fde:	3301      	adds	r3, #1
 8001fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	dbd3      	blt.n	8001f92 <generate_ID+0xe2>
	for (int k = 0;k<capas;++k){
 8001fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fec:	3301      	adds	r3, #1
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	dbc9      	blt.n	8001f8c <generate_ID+0xdc>
			}
		}
	}
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3744      	adds	r7, #68	; 0x44
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd90      	pop	{r4, r7, pc}
 8002002:	bf00      	nop
 8002004:	f3af 8000 	nop.w
 8002008:	00000000 	.word	0x00000000
 800200c:	40240000 	.word	0x40240000
 8002010:	a0b5ed8d 	.word	0xa0b5ed8d
 8002014:	3eb0c6f7 	.word	0x3eb0c6f7
 8002018:	08010d70 	.word	0x08010d70

0800201c <contador>:

// -----------contador de 3 cifras----------------------------
void contador(int iter,int *out){
 800201c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002020:	ed2d 8b02 	vpush	{d8}
 8002024:	b089      	sub	sp, #36	; 0x24
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
 800202c:	466b      	mov	r3, sp
 800202e:	461e      	mov	r6, r3
	int base = 3;int cifras = 3;
 8002030:	2303      	movs	r3, #3
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	2303      	movs	r3, #3
 8002036:	617b      	str	r3, [r7, #20]
	int cont[cifras];
 8002038:	6979      	ldr	r1, [r7, #20]
 800203a:	1e4b      	subs	r3, r1, #1
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	460a      	mov	r2, r1
 8002040:	2300      	movs	r3, #0
 8002042:	4690      	mov	r8, r2
 8002044:	4699      	mov	r9, r3
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002052:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002056:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800205a:	460a      	mov	r2, r1
 800205c:	2300      	movs	r3, #0
 800205e:	4614      	mov	r4, r2
 8002060:	461d      	mov	r5, r3
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	016b      	lsls	r3, r5, #5
 800206c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002070:	0162      	lsls	r2, r4, #5
 8002072:	460b      	mov	r3, r1
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	3307      	adds	r3, #7
 8002078:	08db      	lsrs	r3, r3, #3
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	ebad 0d03 	sub.w	sp, sp, r3
 8002080:	466b      	mov	r3, sp
 8002082:	3303      	adds	r3, #3
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	60fb      	str	r3, [r7, #12]
		for(int i = 0;i<cifras;++i){
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e04f      	b.n	8002130 <contador+0x114>
			cont[i] = ((iter-1)%((int)powf(base,i+1)))+1;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	1e5c      	subs	r4, r3, #1
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3301      	adds	r3, #1
 80020a2:	ee07 3a10 	vmov	s14, r3
 80020a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80020aa:	eef0 0a47 	vmov.f32	s1, s14
 80020ae:	eeb0 0a67 	vmov.f32	s0, s15
 80020b2:	f00d fa31 	bl	800f518 <powf>
 80020b6:	eef0 7a40 	vmov.f32	s15, s0
 80020ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020be:	ee17 2a90 	vmov	r2, s15
 80020c2:	fb94 f3f2 	sdiv	r3, r4, r2
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	1ae3      	subs	r3, r4, r3
 80020cc:	1c59      	adds	r1, r3, #1
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			out[i] =  ((cont[i]-1)/powf(base,i)) + 1;}
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020de:	3b01      	subs	r3, #1
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	ee07 3a10 	vmov	s14, r3
 80020f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80020fc:	eef0 0a47 	vmov.f32	s1, s14
 8002100:	eeb0 0a67 	vmov.f32	s0, s15
 8002104:	f00d fa08 	bl	800f518 <powf>
 8002108:	eeb0 7a40 	vmov.f32	s14, s0
 800210c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002114:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	4413      	add	r3, r2
 8002120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002124:	ee17 2a90 	vmov	r2, s15
 8002128:	601a      	str	r2, [r3, #0]
		for(int i = 0;i<cifras;++i){
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3301      	adds	r3, #1
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	429a      	cmp	r2, r3
 8002136:	dbab      	blt.n	8002090 <contador+0x74>
 8002138:	46b5      	mov	sp, r6

}
 800213a:	bf00      	nop
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	ecbd 8b02 	vpop	{d8}
 8002144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002148 <delimitar_coordenadas>:
//------------------------------------------------------------

int delimitar_coordenadas(int dim[3], int posActual[3],int iter){
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]

	int subiter[3];
	int coord[3];
	do {
		contador(iter, subiter);
 8002154:	f107 0320 	add.w	r3, r7, #32
 8002158:	4619      	mov	r1, r3
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ff5e 	bl	800201c <contador>
		for (int i = 0;i<3;++i){
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002164:	e03e      	b.n	80021e4 <delimitar_coordenadas+0x9c>
			coord[i] = (posActual[i]) +  subiter[i]-2;
 8002166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	4413      	add	r3, r2
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	3330      	adds	r3, #48	; 0x30
 8002176:	443b      	add	r3, r7
 8002178:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800217c:	4413      	add	r3, r2
 800217e:	1e9a      	subs	r2, r3, #2
 8002180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	3330      	adds	r3, #48	; 0x30
 8002186:	443b      	add	r3, r7
 8002188:	f843 2c1c 	str.w	r2, [r3, #-28]
			if (coord[i] <0 || coord[i] >= dim[i]){iter += (int) powf(3,i);}}
 800218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	3330      	adds	r3, #48	; 0x30
 8002192:	443b      	add	r3, r7
 8002194:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0c      	blt.n	80021b6 <delimitar_coordenadas+0x6e>
 800219c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	3330      	adds	r3, #48	; 0x30
 80021a2:	443b      	add	r3, r7
 80021a4:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	68f9      	ldr	r1, [r7, #12]
 80021ae:	440b      	add	r3, r1
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	db13      	blt.n	80021de <delimitar_coordenadas+0x96>
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	ee07 3a90 	vmov	s15, r3
 80021bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c0:	eef0 0a67 	vmov.f32	s1, s15
 80021c4:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80021c8:	f00d f9a6 	bl	800f518 <powf>
 80021cc:	eef0 7a40 	vmov.f32	s15, s0
 80021d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021d4:	ee17 2a90 	vmov	r2, s15
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	607b      	str	r3, [r7, #4]
		for (int i = 0;i<3;++i){
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e0:	3301      	adds	r3, #1
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	ddbd      	ble.n	8002166 <delimitar_coordenadas+0x1e>

	} while (coord[0]<0 || coord[0]>=dim[0] || coord[1]<0 || coord[1]>=dim[1] || coord[2]<0 || coord[2]>=dim[2]);
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	dbb1      	blt.n	8002154 <delimitar_coordenadas+0xc>
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	daac      	bge.n	8002154 <delimitar_coordenadas+0xc>
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	dba9      	blt.n	8002154 <delimitar_coordenadas+0xc>
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3304      	adds	r3, #4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	daa3      	bge.n	8002154 <delimitar_coordenadas+0xc>
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2b00      	cmp	r3, #0
 8002210:	dba0      	blt.n	8002154 <delimitar_coordenadas+0xc>
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3308      	adds	r3, #8
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	da9a      	bge.n	8002154 <delimitar_coordenadas+0xc>

	return iter;
 800221e:	687b      	ldr	r3, [r7, #4]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3730      	adds	r7, #48	; 0x30
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <calcule_cost>:
#include "math_vector.h"
#include "performance_indices.h"



float calcule_cost(int muestras, float y[muestras], float ref, float dt,	int select){
 8002228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800222c:	b0a9      	sub	sp, #164	; 0xa4
 800222e:	af0c      	add	r7, sp, #48	; 0x30
 8002230:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002232:	62b9      	str	r1, [r7, #40]	; 0x28
 8002234:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8002238:	edc7 0a08 	vstr	s1, [r7, #32]
 800223c:	61fa      	str	r2, [r7, #28]
 800223e:	466b      	mov	r3, sp
 8002240:	461e      	mov	r6, r3

	float J,t[muestras] , e[muestras],OS,tr,tss,ISE ,ITSE , IAE, ITAE, y_aux[muestras];
 8002242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002244:	1e4b      	subs	r3, r1, #1
 8002246:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002248:	460a      	mov	r2, r1
 800224a:	2300      	movs	r3, #0
 800224c:	4614      	mov	r4, r2
 800224e:	461d      	mov	r5, r3
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	016b      	lsls	r3, r5, #5
 800225a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800225e:	0162      	lsls	r2, r4, #5
 8002260:	460a      	mov	r2, r1
 8002262:	2300      	movs	r3, #0
 8002264:	613a      	str	r2, [r7, #16]
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002274:	4628      	mov	r0, r5
 8002276:	0143      	lsls	r3, r0, #5
 8002278:	4620      	mov	r0, r4
 800227a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800227e:	4620      	mov	r0, r4
 8002280:	0142      	lsls	r2, r0, #5
 8002282:	460b      	mov	r3, r1
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	3307      	adds	r3, #7
 8002288:	08db      	lsrs	r3, r3, #3
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	ebad 0d03 	sub.w	sp, sp, r3
 8002290:	ab0c      	add	r3, sp, #48	; 0x30
 8002292:	3303      	adds	r3, #3
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	667b      	str	r3, [r7, #100]	; 0x64
 800229a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800229c:	1e4b      	subs	r3, r1, #1
 800229e:	663b      	str	r3, [r7, #96]	; 0x60
 80022a0:	460a      	mov	r2, r1
 80022a2:	2300      	movs	r3, #0
 80022a4:	60ba      	str	r2, [r7, #8]
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022b4:	4628      	mov	r0, r5
 80022b6:	0143      	lsls	r3, r0, #5
 80022b8:	4620      	mov	r0, r4
 80022ba:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022be:	4620      	mov	r0, r4
 80022c0:	0142      	lsls	r2, r0, #5
 80022c2:	460a      	mov	r2, r1
 80022c4:	2300      	movs	r3, #0
 80022c6:	603a      	str	r2, [r7, #0]
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022d6:	4628      	mov	r0, r5
 80022d8:	0143      	lsls	r3, r0, #5
 80022da:	4620      	mov	r0, r4
 80022dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022e0:	4620      	mov	r0, r4
 80022e2:	0142      	lsls	r2, r0, #5
 80022e4:	460b      	mov	r3, r1
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	3307      	adds	r3, #7
 80022ea:	08db      	lsrs	r3, r3, #3
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	ebad 0d03 	sub.w	sp, sp, r3
 80022f2:	ab0c      	add	r3, sp, #48	; 0x30
 80022f4:	3303      	adds	r3, #3
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022fe:	1e4b      	subs	r3, r1, #1
 8002300:	65bb      	str	r3, [r7, #88]	; 0x58
 8002302:	460a      	mov	r2, r1
 8002304:	2300      	movs	r3, #0
 8002306:	4692      	mov	sl, r2
 8002308:	469b      	mov	fp, r3
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8002316:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800231a:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800231e:	460a      	mov	r2, r1
 8002320:	2300      	movs	r3, #0
 8002322:	4690      	mov	r8, r2
 8002324:	4699      	mov	r9, r3
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002332:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002336:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800233a:	460b      	mov	r3, r1
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	3307      	adds	r3, #7
 8002340:	08db      	lsrs	r3, r3, #3
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	ebad 0d03 	sub.w	sp, sp, r3
 8002348:	ab0c      	add	r3, sp, #48	; 0x30
 800234a:	3303      	adds	r3, #3
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	657b      	str	r3, [r7, #84]	; 0x54
	float yinit = y[0],yfinal = ref;
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	653b      	str	r3, [r7, #80]	; 0x50
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	64fb      	str	r3, [r7, #76]	; 0x4c

	linspace(t, 0,(muestras-1)*dt+0,muestras);
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	3b01      	subs	r3, #1
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002368:	edd7 7a08 	vldr	s15, [r7, #32]
 800236c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002370:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8002630 <calcule_cost+0x408>
 8002374:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002378:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800237a:	eef0 0a67 	vmov.f32	s1, s15
 800237e:	ed9f 0aac 	vldr	s0, [pc, #688]	; 8002630 <calcule_cost+0x408>
 8002382:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002384:	f003 fbaa 	bl	8005adc <linspace>

	prod_vector_escalar(muestras, y, -1, y_aux);
 8002388:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800238a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800238e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002390:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002392:	f003 fb7a 	bl	8005a8a <prod_vector_escalar>
	sum_vector_escalar(muestras, y_aux, ref, e);
 8002396:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002398:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800239c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800239e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023a0:	f003 fb4a 	bl	8005a38 <sum_vector_escalar>

		switch (select) {
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	f200 8203 	bhi.w	80027b4 <calcule_cost+0x58c>
 80023ae:	a201      	add	r2, pc, #4	; (adr r2, 80023b4 <calcule_cost+0x18c>)
 80023b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b4:	080023c9 	.word	0x080023c9
 80023b8:	080024ab 	.word	0x080024ab
 80023bc:	08002555 	.word	0x08002555
 80023c0:	08002639 	.word	0x08002639
 80023c4:	080026e3 	.word	0x080026e3
			case 1:
				IAE = IAE_calc(muestras, e, dt);
 80023c8:	ed97 0a08 	vldr	s0, [r7, #32]
 80023cc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80023ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023d0:	f003 ff12 	bl	80061f8 <IAE_calc>
 80023d4:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
				OS = Overshoot(muestras, y, yinit, yfinal);
 80023d8:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 80023dc:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80023e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023e4:	f004 f86a 	bl	80064bc <Overshoot>
 80023e8:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
				tss = SettlingTime(muestras, t, y, yinit, yfinal, 0.05);
 80023ec:	ed9f 1a91 	vldr	s2, [pc, #580]	; 8002634 <calcule_cost+0x40c>
 80023f0:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 80023f4:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80023f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023fa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80023fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023fe:	f003 ff91 	bl	8006324 <SettlingTime>
 8002402:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
				tr = RiseTime(muestras, t, y, yinit, yfinal);
 8002406:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 800240a:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800240e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002410:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002414:	f004 f8bc 	bl	8006590 <RiseTime>
 8002418:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

				J = 0.10*ITAE + 0.60*OS + 0.20*tss + 0.10*tr;
 800241c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800241e:	f7fe f8bb 	bl	8000598 <__aeabi_f2d>
 8002422:	a377      	add	r3, pc, #476	; (adr r3, 8002600 <calcule_cost+0x3d8>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe f90e 	bl	8000648 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4614      	mov	r4, r2
 8002432:	461d      	mov	r5, r3
 8002434:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002436:	f7fe f8af 	bl	8000598 <__aeabi_f2d>
 800243a:	a373      	add	r3, pc, #460	; (adr r3, 8002608 <calcule_cost+0x3e0>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	f7fe f902 	bl	8000648 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4620      	mov	r0, r4
 800244a:	4629      	mov	r1, r5
 800244c:	f7fd ff46 	bl	80002dc <__adddf3>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4614      	mov	r4, r2
 8002456:	461d      	mov	r5, r3
 8002458:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800245a:	f7fe f89d 	bl	8000598 <__aeabi_f2d>
 800245e:	a36c      	add	r3, pc, #432	; (adr r3, 8002610 <calcule_cost+0x3e8>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f7fe f8f0 	bl	8000648 <__aeabi_dmul>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4620      	mov	r0, r4
 800246e:	4629      	mov	r1, r5
 8002470:	f7fd ff34 	bl	80002dc <__adddf3>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4614      	mov	r4, r2
 800247a:	461d      	mov	r5, r3
 800247c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800247e:	f7fe f88b 	bl	8000598 <__aeabi_f2d>
 8002482:	a35f      	add	r3, pc, #380	; (adr r3, 8002600 <calcule_cost+0x3d8>)
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f7fe f8de 	bl	8000648 <__aeabi_dmul>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4620      	mov	r0, r4
 8002492:	4629      	mov	r1, r5
 8002494:	f7fd ff22 	bl	80002dc <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fbaa 	bl	8000bf8 <__aeabi_d2f>
 80024a4:	4603      	mov	r3, r0
 80024a6:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80024a8:	e373      	b.n	8002b92 <calcule_cost+0x96a>
			case 2:
				ITAE = ITAE_calc(muestras, e, t, dt);
 80024aa:	ed97 0a08 	vldr	s0, [r7, #32]
 80024ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80024b0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80024b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024b4:	f003 fee1 	bl	800627a <ITAE_calc>
 80024b8:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
				tss = SettlingTime(muestras, t, y, yinit, yfinal, 0.05);
 80024bc:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 8002634 <calcule_cost+0x40c>
 80024c0:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 80024c4:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80024c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80024cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024ce:	f003 ff29 	bl	8006324 <SettlingTime>
 80024d2:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
				OS = Overshoot(muestras, y, yinit, yfinal);
 80024d6:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 80024da:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80024de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024e2:	f003 ffeb 	bl	80064bc <Overshoot>
 80024e6:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40

				J = 0.05*IAE + 0.05*tss + 0.90*OS;
 80024ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80024ec:	f7fe f854 	bl	8000598 <__aeabi_f2d>
 80024f0:	a349      	add	r3, pc, #292	; (adr r3, 8002618 <calcule_cost+0x3f0>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f7fe f8a7 	bl	8000648 <__aeabi_dmul>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4614      	mov	r4, r2
 8002500:	461d      	mov	r5, r3
 8002502:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002504:	f7fe f848 	bl	8000598 <__aeabi_f2d>
 8002508:	a343      	add	r3, pc, #268	; (adr r3, 8002618 <calcule_cost+0x3f0>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fe f89b 	bl	8000648 <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4620      	mov	r0, r4
 8002518:	4629      	mov	r1, r5
 800251a:	f7fd fedf 	bl	80002dc <__adddf3>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4614      	mov	r4, r2
 8002524:	461d      	mov	r5, r3
 8002526:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002528:	f7fe f836 	bl	8000598 <__aeabi_f2d>
 800252c:	a33c      	add	r3, pc, #240	; (adr r3, 8002620 <calcule_cost+0x3f8>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	f7fe f889 	bl	8000648 <__aeabi_dmul>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4620      	mov	r0, r4
 800253c:	4629      	mov	r1, r5
 800253e:	f7fd fecd 	bl	80002dc <__adddf3>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	f7fe fb55 	bl	8000bf8 <__aeabi_d2f>
 800254e:	4603      	mov	r3, r0
 8002550:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 8002552:	e31e      	b.n	8002b92 <calcule_cost+0x96a>
			case 3:
				ISE = ISE_calc(muestras, e, dt);
 8002554:	ed97 0a08 	vldr	s0, [r7, #32]
 8002558:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800255a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800255c:	f003 fd98 	bl	8006090 <ISE_calc>
 8002560:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
				tss = SettlingTime(muestras, t, y, yinit, yfinal, 0.05);
 8002564:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8002634 <calcule_cost+0x40c>
 8002568:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 800256c:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002572:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002576:	f003 fed5 	bl	8006324 <SettlingTime>
 800257a:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
				tr = RiseTime(muestras, t, y, yinit, yfinal);
 800257e:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8002582:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002588:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800258a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800258c:	f004 f800 	bl	8006590 <RiseTime>
 8002590:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

				J = 0.10*ISE + 0.20*tss + 0.70*tr;
 8002594:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002596:	f7fd ffff 	bl	8000598 <__aeabi_f2d>
 800259a:	a319      	add	r3, pc, #100	; (adr r3, 8002600 <calcule_cost+0x3d8>)
 800259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a0:	f7fe f852 	bl	8000648 <__aeabi_dmul>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4614      	mov	r4, r2
 80025aa:	461d      	mov	r5, r3
 80025ac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80025ae:	f7fd fff3 	bl	8000598 <__aeabi_f2d>
 80025b2:	a317      	add	r3, pc, #92	; (adr r3, 8002610 <calcule_cost+0x3e8>)
 80025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b8:	f7fe f846 	bl	8000648 <__aeabi_dmul>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4620      	mov	r0, r4
 80025c2:	4629      	mov	r1, r5
 80025c4:	f7fd fe8a 	bl	80002dc <__adddf3>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4614      	mov	r4, r2
 80025ce:	461d      	mov	r5, r3
 80025d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025d2:	f7fd ffe1 	bl	8000598 <__aeabi_f2d>
 80025d6:	a314      	add	r3, pc, #80	; (adr r3, 8002628 <calcule_cost+0x400>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	f7fe f834 	bl	8000648 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4620      	mov	r0, r4
 80025e6:	4629      	mov	r1, r5
 80025e8:	f7fd fe78 	bl	80002dc <__adddf3>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f7fe fb00 	bl	8000bf8 <__aeabi_d2f>
 80025f8:	4603      	mov	r3, r0
 80025fa:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80025fc:	e2c9      	b.n	8002b92 <calcule_cost+0x96a>
 80025fe:	bf00      	nop
 8002600:	9999999a 	.word	0x9999999a
 8002604:	3fb99999 	.word	0x3fb99999
 8002608:	33333333 	.word	0x33333333
 800260c:	3fe33333 	.word	0x3fe33333
 8002610:	9999999a 	.word	0x9999999a
 8002614:	3fc99999 	.word	0x3fc99999
 8002618:	9999999a 	.word	0x9999999a
 800261c:	3fa99999 	.word	0x3fa99999
 8002620:	cccccccd 	.word	0xcccccccd
 8002624:	3feccccc 	.word	0x3feccccc
 8002628:	66666666 	.word	0x66666666
 800262c:	3fe66666 	.word	0x3fe66666
 8002630:	00000000 	.word	0x00000000
 8002634:	3d4ccccd 	.word	0x3d4ccccd
			case 4:
				ISE = ISE_calc(muestras, e, dt);
 8002638:	ed97 0a08 	vldr	s0, [r7, #32]
 800263c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800263e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002640:	f003 fd26 	bl	8006090 <ISE_calc>
 8002644:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
				tss = SettlingTime(muestras, t, y, yinit, yfinal, 0.05);
 8002648:	ed1f 1a06 	vldr	s2, [pc, #-24]	; 8002634 <calcule_cost+0x40c>
 800264c:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8002650:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002656:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800265a:	f003 fe63 	bl	8006324 <SettlingTime>
 800265e:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
				tr = RiseTime(muestras, t, y, yinit, yfinal);
 8002662:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8002666:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800266a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800266c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800266e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002670:	f003 ff8e 	bl	8006590 <RiseTime>
 8002674:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

				J = 0.10*ISE + 0.70*tss + 0.20*tr;
 8002678:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800267a:	f7fd ff8d 	bl	8000598 <__aeabi_f2d>
 800267e:	a344      	add	r3, pc, #272	; (adr r3, 8002790 <calcule_cost+0x568>)
 8002680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002684:	f7fd ffe0 	bl	8000648 <__aeabi_dmul>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4614      	mov	r4, r2
 800268e:	461d      	mov	r5, r3
 8002690:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002692:	f7fd ff81 	bl	8000598 <__aeabi_f2d>
 8002696:	a344      	add	r3, pc, #272	; (adr r3, 80027a8 <calcule_cost+0x580>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fd ffd4 	bl	8000648 <__aeabi_dmul>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4620      	mov	r0, r4
 80026a6:	4629      	mov	r1, r5
 80026a8:	f7fd fe18 	bl	80002dc <__adddf3>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4614      	mov	r4, r2
 80026b2:	461d      	mov	r5, r3
 80026b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80026b6:	f7fd ff6f 	bl	8000598 <__aeabi_f2d>
 80026ba:	a339      	add	r3, pc, #228	; (adr r3, 80027a0 <calcule_cost+0x578>)
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	f7fd ffc2 	bl	8000648 <__aeabi_dmul>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4620      	mov	r0, r4
 80026ca:	4629      	mov	r1, r5
 80026cc:	f7fd fe06 	bl	80002dc <__adddf3>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	f7fe fa8e 	bl	8000bf8 <__aeabi_d2f>
 80026dc:	4603      	mov	r3, r0
 80026de:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80026e0:	e257      	b.n	8002b92 <calcule_cost+0x96a>
			case 5:
				ISE = ISE_calc(muestras, e, dt);
 80026e2:	ed97 0a08 	vldr	s0, [r7, #32]
 80026e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80026e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026ea:	f003 fcd1 	bl	8006090 <ISE_calc>
 80026ee:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
				tss = SettlingTime(muestras, t, y, yinit, yfinal, 0.05);
 80026f2:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 80027b0 <calcule_cost+0x588>
 80026f6:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 80026fa:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80026fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002700:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002702:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002704:	f003 fe0e 	bl	8006324 <SettlingTime>
 8002708:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
				OS = Overshoot(muestras, y, yinit, yfinal);
 800270c:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8002710:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002718:	f003 fed0 	bl	80064bc <Overshoot>
 800271c:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40

				J = 0.10*ISE + 0.10*tss + 0.80*OS;
 8002720:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002722:	f7fd ff39 	bl	8000598 <__aeabi_f2d>
 8002726:	a31a      	add	r3, pc, #104	; (adr r3, 8002790 <calcule_cost+0x568>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fd ff8c 	bl	8000648 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4614      	mov	r4, r2
 8002736:	461d      	mov	r5, r3
 8002738:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800273a:	f7fd ff2d 	bl	8000598 <__aeabi_f2d>
 800273e:	a314      	add	r3, pc, #80	; (adr r3, 8002790 <calcule_cost+0x568>)
 8002740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002744:	f7fd ff80 	bl	8000648 <__aeabi_dmul>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4620      	mov	r0, r4
 800274e:	4629      	mov	r1, r5
 8002750:	f7fd fdc4 	bl	80002dc <__adddf3>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4614      	mov	r4, r2
 800275a:	461d      	mov	r5, r3
 800275c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800275e:	f7fd ff1b 	bl	8000598 <__aeabi_f2d>
 8002762:	a30d      	add	r3, pc, #52	; (adr r3, 8002798 <calcule_cost+0x570>)
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	f7fd ff6e 	bl	8000648 <__aeabi_dmul>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4620      	mov	r0, r4
 8002772:	4629      	mov	r1, r5
 8002774:	f7fd fdb2 	bl	80002dc <__adddf3>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	f7fe fa3a 	bl	8000bf8 <__aeabi_d2f>
 8002784:	4603      	mov	r3, r0
 8002786:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 8002788:	e203      	b.n	8002b92 <calcule_cost+0x96a>
 800278a:	bf00      	nop
 800278c:	f3af 8000 	nop.w
 8002790:	9999999a 	.word	0x9999999a
 8002794:	3fb99999 	.word	0x3fb99999
 8002798:	9999999a 	.word	0x9999999a
 800279c:	3fe99999 	.word	0x3fe99999
 80027a0:	9999999a 	.word	0x9999999a
 80027a4:	3fc99999 	.word	0x3fc99999
 80027a8:	66666666 	.word	0x66666666
 80027ac:	3fe66666 	.word	0x3fe66666
 80027b0:	3d4ccccd 	.word	0x3d4ccccd
			default:
				ISE = ISE_calc(muestras, e, dt);
 80027b4:	ed97 0a08 	vldr	s0, [r7, #32]
 80027b8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80027ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027bc:	f003 fc68 	bl	8006090 <ISE_calc>
 80027c0:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
				ITSE = ITSE_calc(muestras, e, t, dt);
 80027c4:	ed97 0a08 	vldr	s0, [r7, #32]
 80027c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027ca:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80027cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027ce:	f003 fcaf 	bl	8006130 <ITSE_calc>
 80027d2:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
				IAE = IAE_calc(muestras, e, dt);
 80027d6:	ed97 0a08 	vldr	s0, [r7, #32]
 80027da:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80027dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027de:	f003 fd0b 	bl	80061f8 <IAE_calc>
 80027e2:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
				ITAE = ITAE_calc(muestras, e,t, dt);
 80027e6:	ed97 0a08 	vldr	s0, [r7, #32]
 80027ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027ec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80027ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027f0:	f003 fd43 	bl	800627a <ITAE_calc>
 80027f4:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
				OS = Overshoot(muestras, y, yinit, yfinal);
 80027f8:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 80027fc:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002804:	f003 fe5a 	bl	80064bc <Overshoot>
 8002808:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
				tss = SettlingTime(muestras, t, y, yinit, yfinal, 0.05);
 800280c:	ed1f 1a18 	vldr	s2, [pc, #-96]	; 80027b0 <calcule_cost+0x588>
 8002810:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8002814:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800281a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800281c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800281e:	f003 fd81 	bl	8006324 <SettlingTime>
 8002822:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
				tr = RiseTime(muestras, t, y, yinit, yfinal);
 8002826:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 800282a:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800282e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002830:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002834:	f003 feac 	bl	8006590 <RiseTime>
 8002838:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
				printf("\ntss = %f\nOS = %f\ntr = %f\nISE = %f\nIAE = %f\nITAE = %f\nITSE = %f\n",tss,OS,tr,ISE,IAE,ITAE,ITSE);
 800283c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800283e:	f7fd feab 	bl	8000598 <__aeabi_f2d>
 8002842:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002846:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002848:	f7fd fea6 	bl	8000598 <__aeabi_f2d>
 800284c:	4680      	mov	r8, r0
 800284e:	4689      	mov	r9, r1
 8002850:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002852:	f7fd fea1 	bl	8000598 <__aeabi_f2d>
 8002856:	4682      	mov	sl, r0
 8002858:	468b      	mov	fp, r1
 800285a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800285c:	f7fd fe9c 	bl	8000598 <__aeabi_f2d>
 8002860:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002864:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002866:	f7fd fe97 	bl	8000598 <__aeabi_f2d>
 800286a:	e9c7 0100 	strd	r0, r1, [r7]
 800286e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002870:	f7fd fe92 	bl	8000598 <__aeabi_f2d>
 8002874:	4604      	mov	r4, r0
 8002876:	460d      	mov	r5, r1
 8002878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800287a:	f7fd fe8d 	bl	8000598 <__aeabi_f2d>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002886:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800288a:	ed97 7b00 	vldr	d7, [r7]
 800288e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002892:	ed97 7b02 	vldr	d7, [r7, #8]
 8002896:	ed8d 7b04 	vstr	d7, [sp, #16]
 800289a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800289e:	e9cd 8900 	strd	r8, r9, [sp]
 80028a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028a6:	48d4      	ldr	r0, [pc, #848]	; (8002bf8 <calcule_cost+0x9d0>)
 80028a8:	f00a fbb8 	bl	800d01c <iprintf>
				printf("Select 1 : J = 0.10*IAE + 0.60*OS + 0.20*tss + 0.10*tr = %f\n",J = 0.10*IAE + 0.60*OS + 0.20*tss + 0.10*tr );
 80028ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80028ae:	f7fd fe73 	bl	8000598 <__aeabi_f2d>
 80028b2:	a3c3      	add	r3, pc, #780	; (adr r3, 8002bc0 <calcule_cost+0x998>)
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b8:	f7fd fec6 	bl	8000648 <__aeabi_dmul>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4614      	mov	r4, r2
 80028c2:	461d      	mov	r5, r3
 80028c4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80028c6:	f7fd fe67 	bl	8000598 <__aeabi_f2d>
 80028ca:	a3bf      	add	r3, pc, #764	; (adr r3, 8002bc8 <calcule_cost+0x9a0>)
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	f7fd feba 	bl	8000648 <__aeabi_dmul>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4620      	mov	r0, r4
 80028da:	4629      	mov	r1, r5
 80028dc:	f7fd fcfe 	bl	80002dc <__adddf3>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4614      	mov	r4, r2
 80028e6:	461d      	mov	r5, r3
 80028e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80028ea:	f7fd fe55 	bl	8000598 <__aeabi_f2d>
 80028ee:	a3b8      	add	r3, pc, #736	; (adr r3, 8002bd0 <calcule_cost+0x9a8>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fea8 	bl	8000648 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4620      	mov	r0, r4
 80028fe:	4629      	mov	r1, r5
 8002900:	f7fd fcec 	bl	80002dc <__adddf3>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4614      	mov	r4, r2
 800290a:	461d      	mov	r5, r3
 800290c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800290e:	f7fd fe43 	bl	8000598 <__aeabi_f2d>
 8002912:	a3ab      	add	r3, pc, #684	; (adr r3, 8002bc0 <calcule_cost+0x998>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd fe96 	bl	8000648 <__aeabi_dmul>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4620      	mov	r0, r4
 8002922:	4629      	mov	r1, r5
 8002924:	f7fd fcda 	bl	80002dc <__adddf3>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	f7fe f962 	bl	8000bf8 <__aeabi_d2f>
 8002934:	4603      	mov	r3, r0
 8002936:	66bb      	str	r3, [r7, #104]	; 0x68
 8002938:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800293a:	f7fd fe2d 	bl	8000598 <__aeabi_f2d>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	48ae      	ldr	r0, [pc, #696]	; (8002bfc <calcule_cost+0x9d4>)
 8002944:	f00a fb6a 	bl	800d01c <iprintf>
				printf("Select 2 : J = 0.05*ITAE + 0.05*tss + 0.90*OS = %f\n",J = 0.05*ITAE + 0.05*tss + 0.90*OS);
 8002948:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800294a:	f7fd fe25 	bl	8000598 <__aeabi_f2d>
 800294e:	a3a2      	add	r3, pc, #648	; (adr r3, 8002bd8 <calcule_cost+0x9b0>)
 8002950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002954:	f7fd fe78 	bl	8000648 <__aeabi_dmul>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4614      	mov	r4, r2
 800295e:	461d      	mov	r5, r3
 8002960:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002962:	f7fd fe19 	bl	8000598 <__aeabi_f2d>
 8002966:	a39c      	add	r3, pc, #624	; (adr r3, 8002bd8 <calcule_cost+0x9b0>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fd fe6c 	bl	8000648 <__aeabi_dmul>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4620      	mov	r0, r4
 8002976:	4629      	mov	r1, r5
 8002978:	f7fd fcb0 	bl	80002dc <__adddf3>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4614      	mov	r4, r2
 8002982:	461d      	mov	r5, r3
 8002984:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002986:	f7fd fe07 	bl	8000598 <__aeabi_f2d>
 800298a:	a395      	add	r3, pc, #596	; (adr r3, 8002be0 <calcule_cost+0x9b8>)
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	f7fd fe5a 	bl	8000648 <__aeabi_dmul>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4620      	mov	r0, r4
 800299a:	4629      	mov	r1, r5
 800299c:	f7fd fc9e 	bl	80002dc <__adddf3>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f7fe f926 	bl	8000bf8 <__aeabi_d2f>
 80029ac:	4603      	mov	r3, r0
 80029ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80029b0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80029b2:	f7fd fdf1 	bl	8000598 <__aeabi_f2d>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4891      	ldr	r0, [pc, #580]	; (8002c00 <calcule_cost+0x9d8>)
 80029bc:	f00a fb2e 	bl	800d01c <iprintf>
				printf("Select 3 : J = 0.10*ISE + 0.20*tss + 0.70*tr = %f\n",J = 0.10*ISE + 0.20*tss + 0.70*tr );
 80029c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80029c2:	f7fd fde9 	bl	8000598 <__aeabi_f2d>
 80029c6:	a37e      	add	r3, pc, #504	; (adr r3, 8002bc0 <calcule_cost+0x998>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fe3c 	bl	8000648 <__aeabi_dmul>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4614      	mov	r4, r2
 80029d6:	461d      	mov	r5, r3
 80029d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80029da:	f7fd fddd 	bl	8000598 <__aeabi_f2d>
 80029de:	a37c      	add	r3, pc, #496	; (adr r3, 8002bd0 <calcule_cost+0x9a8>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fe30 	bl	8000648 <__aeabi_dmul>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4620      	mov	r0, r4
 80029ee:	4629      	mov	r1, r5
 80029f0:	f7fd fc74 	bl	80002dc <__adddf3>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4614      	mov	r4, r2
 80029fa:	461d      	mov	r5, r3
 80029fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029fe:	f7fd fdcb 	bl	8000598 <__aeabi_f2d>
 8002a02:	a379      	add	r3, pc, #484	; (adr r3, 8002be8 <calcule_cost+0x9c0>)
 8002a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a08:	f7fd fe1e 	bl	8000648 <__aeabi_dmul>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4620      	mov	r0, r4
 8002a12:	4629      	mov	r1, r5
 8002a14:	f7fd fc62 	bl	80002dc <__adddf3>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f7fe f8ea 	bl	8000bf8 <__aeabi_d2f>
 8002a24:	4603      	mov	r3, r0
 8002a26:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a28:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002a2a:	f7fd fdb5 	bl	8000598 <__aeabi_f2d>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4874      	ldr	r0, [pc, #464]	; (8002c04 <calcule_cost+0x9dc>)
 8002a34:	f00a faf2 	bl	800d01c <iprintf>
				printf("Select 4 : J = 0.10*ISE + 0.70*tss + 0.20*tr = %f\n",J = 0.10*ISE + 0.70*tss + 0.20*tr );
 8002a38:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002a3a:	f7fd fdad 	bl	8000598 <__aeabi_f2d>
 8002a3e:	a360      	add	r3, pc, #384	; (adr r3, 8002bc0 <calcule_cost+0x998>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f7fd fe00 	bl	8000648 <__aeabi_dmul>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	461d      	mov	r5, r3
 8002a50:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002a52:	f7fd fda1 	bl	8000598 <__aeabi_f2d>
 8002a56:	a364      	add	r3, pc, #400	; (adr r3, 8002be8 <calcule_cost+0x9c0>)
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	f7fd fdf4 	bl	8000648 <__aeabi_dmul>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4620      	mov	r0, r4
 8002a66:	4629      	mov	r1, r5
 8002a68:	f7fd fc38 	bl	80002dc <__adddf3>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4614      	mov	r4, r2
 8002a72:	461d      	mov	r5, r3
 8002a74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a76:	f7fd fd8f 	bl	8000598 <__aeabi_f2d>
 8002a7a:	a355      	add	r3, pc, #340	; (adr r3, 8002bd0 <calcule_cost+0x9a8>)
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f7fd fde2 	bl	8000648 <__aeabi_dmul>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4620      	mov	r0, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	f7fd fc26 	bl	80002dc <__adddf3>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7fe f8ae 	bl	8000bf8 <__aeabi_d2f>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002aa0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002aa2:	f7fd fd79 	bl	8000598 <__aeabi_f2d>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4857      	ldr	r0, [pc, #348]	; (8002c08 <calcule_cost+0x9e0>)
 8002aac:	f00a fab6 	bl	800d01c <iprintf>
				printf("Select 5 : J = 0.10*ISE + 0.10*tss + 0.80*OS = %f\n",J = 0.10*ISE + 0.10*tss + 0.80*OS );
 8002ab0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002ab2:	f7fd fd71 	bl	8000598 <__aeabi_f2d>
 8002ab6:	a342      	add	r3, pc, #264	; (adr r3, 8002bc0 <calcule_cost+0x998>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fd fdc4 	bl	8000648 <__aeabi_dmul>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4614      	mov	r4, r2
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002aca:	f7fd fd65 	bl	8000598 <__aeabi_f2d>
 8002ace:	a33c      	add	r3, pc, #240	; (adr r3, 8002bc0 <calcule_cost+0x998>)
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f7fd fdb8 	bl	8000648 <__aeabi_dmul>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4620      	mov	r0, r4
 8002ade:	4629      	mov	r1, r5
 8002ae0:	f7fd fbfc 	bl	80002dc <__adddf3>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4614      	mov	r4, r2
 8002aea:	461d      	mov	r5, r3
 8002aec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002aee:	f7fd fd53 	bl	8000598 <__aeabi_f2d>
 8002af2:	a33f      	add	r3, pc, #252	; (adr r3, 8002bf0 <calcule_cost+0x9c8>)
 8002af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af8:	f7fd fda6 	bl	8000648 <__aeabi_dmul>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4620      	mov	r0, r4
 8002b02:	4629      	mov	r1, r5
 8002b04:	f7fd fbea 	bl	80002dc <__adddf3>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f7fe f872 	bl	8000bf8 <__aeabi_d2f>
 8002b14:	4603      	mov	r3, r0
 8002b16:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b18:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002b1a:	f7fd fd3d 	bl	8000598 <__aeabi_f2d>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	483a      	ldr	r0, [pc, #232]	; (8002c0c <calcule_cost+0x9e4>)
 8002b24:	f00a fa7a 	bl	800d01c <iprintf>
				J = 0.05*IAE + 0.05*tss + 0.90*OS;
 8002b28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b2a:	f7fd fd35 	bl	8000598 <__aeabi_f2d>
 8002b2e:	a32a      	add	r3, pc, #168	; (adr r3, 8002bd8 <calcule_cost+0x9b0>)
 8002b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b34:	f7fd fd88 	bl	8000648 <__aeabi_dmul>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4614      	mov	r4, r2
 8002b3e:	461d      	mov	r5, r3
 8002b40:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b42:	f7fd fd29 	bl	8000598 <__aeabi_f2d>
 8002b46:	a324      	add	r3, pc, #144	; (adr r3, 8002bd8 <calcule_cost+0x9b0>)
 8002b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4c:	f7fd fd7c 	bl	8000648 <__aeabi_dmul>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4620      	mov	r0, r4
 8002b56:	4629      	mov	r1, r5
 8002b58:	f7fd fbc0 	bl	80002dc <__adddf3>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4614      	mov	r4, r2
 8002b62:	461d      	mov	r5, r3
 8002b64:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002b66:	f7fd fd17 	bl	8000598 <__aeabi_f2d>
 8002b6a:	a31d      	add	r3, pc, #116	; (adr r3, 8002be0 <calcule_cost+0x9b8>)
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f7fd fd6a 	bl	8000648 <__aeabi_dmul>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4620      	mov	r0, r4
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	f7fd fbae 	bl	80002dc <__adddf3>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4610      	mov	r0, r2
 8002b86:	4619      	mov	r1, r3
 8002b88:	f7fe f836 	bl	8000bf8 <__aeabi_d2f>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 8002b90:	bf00      	nop
		}
		if (J != J){
 8002b92:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002b96:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002b9a:	eeb4 7a67 	vcmp.f32	s14, s15
 8002b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba2:	d002      	beq.n	8002baa <calcule_cost+0x982>
			J = INFINITY;
 8002ba4:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8002ba8:	66bb      	str	r3, [r7, #104]	; 0x68
		}
		//printf("\nJ es %f\n",J);
	return J;
 8002baa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bac:	46b5      	mov	sp, r6
 8002bae:	ee07 3a90 	vmov	s15, r3
}
 8002bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb6:	3774      	adds	r7, #116	; 0x74
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bbe:	bf00      	nop
 8002bc0:	9999999a 	.word	0x9999999a
 8002bc4:	3fb99999 	.word	0x3fb99999
 8002bc8:	33333333 	.word	0x33333333
 8002bcc:	3fe33333 	.word	0x3fe33333
 8002bd0:	9999999a 	.word	0x9999999a
 8002bd4:	3fc99999 	.word	0x3fc99999
 8002bd8:	9999999a 	.word	0x9999999a
 8002bdc:	3fa99999 	.word	0x3fa99999
 8002be0:	cccccccd 	.word	0xcccccccd
 8002be4:	3feccccc 	.word	0x3feccccc
 8002be8:	66666666 	.word	0x66666666
 8002bec:	3fe66666 	.word	0x3fe66666
 8002bf0:	9999999a 	.word	0x9999999a
 8002bf4:	3fe99999 	.word	0x3fe99999
 8002bf8:	08010d74 	.word	0x08010d74
 8002bfc:	08010db8 	.word	0x08010db8
 8002c00:	08010df8 	.word	0x08010df8
 8002c04:	08010e2c 	.word	0x08010e2c
 8002c08:	08010e60 	.word	0x08010e60
 8002c0c:	08010e94 	.word	0x08010e94

08002c10 <FGS_Init>:
#include "pid.h"
#include "fgs_control.h"
#include "fuzzy.h"
#include "stdio.h"

void FGS_Init(fgs_s *fgs, int select){
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08e      	sub	sp, #56	; 0x38
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
	pid_s pid;
	PID_Init(&pid, select);
 8002c1a:	f107 0308 	add.w	r3, r7, #8
 8002c1e:	6839      	ldr	r1, [r7, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 fd49 	bl	80066b8 <PID_Init>
	(*fgs).Kpmin =  0.533 * pid.Kp;
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fcb5 	bl	8000598 <__aeabi_f2d>
 8002c2e:	a33a      	add	r3, pc, #232	; (adr r3, 8002d18 <FGS_Init+0x108>)
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f7fd fd08 	bl	8000648 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	e9c1 2300 	strd	r2, r3, [r1]
	(*fgs).Kpmax =     1  * pid.Kp;
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fca7 	bl	8000598 <__aeabi_f2d>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	e9c1 2302 	strd	r2, r3, [r1, #8]
	(*fgs).Kdmin  = 1.067 * pid.Kd;
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fc9e 	bl	8000598 <__aeabi_f2d>
 8002c5c:	a330      	add	r3, pc, #192	; (adr r3, 8002d20 <FGS_Init+0x110>)
 8002c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c62:	f7fd fcf1 	bl	8000648 <__aeabi_dmul>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	(*fgs).Kdmax =      2 * pid.Kd;
 8002c70:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c78:	ee17 0a90 	vmov	r0, s15
 8002c7c:	f7fd fc8c 	bl	8000598 <__aeabi_f2d>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	e9c1 2306 	strd	r2, r3, [r1, #24]
	if (select == 2)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d11c      	bne.n	8002cca <FGS_Init+0xba>
	{
		(*fgs).Kimin=     1.2 * pid.Ki;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd fc80 	bl	8000598 <__aeabi_f2d>
 8002c98:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <FGS_Init+0x100>)
 8002c9e:	f7fd fcd3 	bl	8000648 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	e9c1 2308 	strd	r2, r3, [r1, #32]
		(*fgs).Kimax =    2.5 * pid.Ki;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fc72 	bl	8000598 <__aeabi_f2d>
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <FGS_Init+0x104>)
 8002cba:	f7fd fcc5 	bl	8000648 <__aeabi_dmul>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8002cc8:	e01b      	b.n	8002d02 <FGS_Init+0xf2>
	}
	else
	{
		(*fgs).Kimin=     1.2 * pid.Ki;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fd fc63 	bl	8000598 <__aeabi_f2d>
 8002cd2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <FGS_Init+0x100>)
 8002cd8:	f7fd fcb6 	bl	8000648 <__aeabi_dmul>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	e9c1 2308 	strd	r2, r3, [r1, #32]
		(*fgs).Kimax =    2.5 * pid.Ki;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fc55 	bl	8000598 <__aeabi_f2d>
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <FGS_Init+0x104>)
 8002cf4:	f7fd fca8 	bl	8000648 <__aeabi_dmul>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	}

	Fuzzy_Init();
 8002d02:	f000 f8db 	bl	8002ebc <Fuzzy_Init>
}
 8002d06:	bf00      	nop
 8002d08:	3738      	adds	r7, #56	; 0x38
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	3ff33333 	.word	0x3ff33333
 8002d14:	40040000 	.word	0x40040000
 8002d18:	04189375 	.word	0x04189375
 8002d1c:	3fe10e56 	.word	0x3fe10e56
 8002d20:	978d4fdf 	.word	0x978d4fdf
 8002d24:	3ff1126e 	.word	0x3ff1126e

08002d28 <FGS_control>:
void FGS_control(fgs_s *FGS,pid_s *pid){
 8002d28:	b5b0      	push	{r4, r5, r7, lr}
 8002d2a:	b08c      	sub	sp, #48	; 0x30
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]

	float delt_e = pid->e[0] - pid->e[1];
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d42:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float in[2], out[3];
	in[0] = pid->e[0] ;	in[1] = delt_e;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	61bb      	str	r3, [r7, #24]

	if (pid->r != 0)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5e:	d011      	beq.n	8002d84 <FGS_control+0x5c>
	{
		in[0] = in[0]/pid->r;
 8002d60:	edd7 6a05 	vldr	s13, [r7, #20]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	ed93 7a00 	vldr	s14, [r3]
 8002d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d6e:	edc7 7a05 	vstr	s15, [r7, #20]
		in[1] = in[1]/pid->r;
 8002d72:	edd7 6a06 	vldr	s13, [r7, #24]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	ed93 7a00 	vldr	s14, [r3]
 8002d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d80:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	eval_fuzzy(in,out);
 8002d84:	f107 0208 	add.w	r2, r7, #8
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fd42 	bl	8003818 <eval_fuzzy>
	float kpp = out[0], kdp = out[1], kip = out[2];
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	61fb      	str	r3, [r7, #28]

	out[0] = (FGS->Kpmax - FGS->Kpmin) * kpp + FGS->Kpmin;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dac:	f7fd fa94 	bl	80002d8 <__aeabi_dsub>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4614      	mov	r4, r2
 8002db6:	461d      	mov	r5, r3
 8002db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dba:	f7fd fbed 	bl	8000598 <__aeabi_f2d>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7fd fc3f 	bl	8000648 <__aeabi_dmul>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4610      	mov	r0, r2
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f7fd fa80 	bl	80002dc <__adddf3>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	f7fd ff08 	bl	8000bf8 <__aeabi_d2f>
 8002de8:	4603      	mov	r3, r0
 8002dea:	60bb      	str	r3, [r7, #8]
	out[2] = (FGS->Kdmax - FGS->Kdmin) * kdp + FGS->Kdmin;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002df8:	f7fd fa6e 	bl	80002d8 <__aeabi_dsub>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4614      	mov	r4, r2
 8002e02:	461d      	mov	r5, r3
 8002e04:	6a38      	ldr	r0, [r7, #32]
 8002e06:	f7fd fbc7 	bl	8000598 <__aeabi_f2d>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4620      	mov	r0, r4
 8002e10:	4629      	mov	r1, r5
 8002e12:	f7fd fc19 	bl	8000648 <__aeabi_dmul>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e24:	f7fd fa5a 	bl	80002dc <__adddf3>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f7fd fee2 	bl	8000bf8 <__aeabi_d2f>
 8002e34:	4603      	mov	r3, r0
 8002e36:	613b      	str	r3, [r7, #16]
	out[1] = (FGS->Kimax - FGS->Kimin) * kip + FGS->Kimin;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e44:	f7fd fa48 	bl	80002d8 <__aeabi_dsub>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	461d      	mov	r5, r3
 8002e50:	69f8      	ldr	r0, [r7, #28]
 8002e52:	f7fd fba1 	bl	8000598 <__aeabi_f2d>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	f7fd fbf3 	bl	8000648 <__aeabi_dmul>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e70:	f7fd fa34 	bl	80002dc <__adddf3>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	f7fd febc 	bl	8000bf8 <__aeabi_d2f>
 8002e80:	4603      	mov	r3, r0
 8002e82:	60fb      	str	r3, [r7, #12]
	for (int i =0;i<3;++i)
 8002e84:	2300      	movs	r3, #0
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e88:	e00f      	b.n	8002eaa <FGS_control+0x182>
		pid->Gains[i]=out[i];
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	3330      	adds	r3, #48	; 0x30
 8002e90:	443b      	add	r3, r7
 8002e92:	3b28      	subs	r3, #40	; 0x28
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	6839      	ldr	r1, [r7, #0]
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	601a      	str	r2, [r3, #0]
	for (int i =0;i<3;++i)
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	ddec      	ble.n	8002e8a <FGS_control+0x162>
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3730      	adds	r7, #48	; 0x30
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ebc <Fuzzy_Init>:

#include "fuzzy.h"
#include "math_vector.h"

fuzzy_s fuzzy;
void Fuzzy_Init(){
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b0be      	sub	sp, #248	; 0xf8
 8002ec0:	af00      	add	r7, sp, #0

	fuzzy.range_e[0]  = -1;		fuzzy.range_e[1] = 1;
 8002ec2:	4b71      	ldr	r3, [pc, #452]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	4b6f      	ldr	r3, [pc, #444]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	605a      	str	r2, [r3, #4]
	fuzzy.range_de[0] = -1;		fuzzy.range_de[1] = 1;
 8002ed0:	4b6d      	ldr	r3, [pc, #436]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	4b6b      	ldr	r3, [pc, #428]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	60da      	str	r2, [r3, #12]
	fuzzy.range_kpp[0] = 0;		fuzzy.range_kpp[1] = 1;
 8002ede:	4b6a      	ldr	r3, [pc, #424]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
 8002ee4:	4b68      	ldr	r3, [pc, #416]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	615a      	str	r2, [r3, #20]
	fuzzy.range_kdp[0] = 0;		fuzzy.range_kdp[1] = 1;
 8002eea:	4b67      	ldr	r3, [pc, #412]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
 8002ef0:	4b65      	ldr	r3, [pc, #404]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	61da      	str	r2, [r3, #28]
	fuzzy.range_kip[0] = 0;	    fuzzy.range_kip[1] = 1;
 8002ef6:	4b64      	ldr	r3, [pc, #400]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	621a      	str	r2, [r3, #32]
 8002efc:	4b62      	ldr	r3, [pc, #392]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24

	float paso = PASO;
 8002f02:	4b62      	ldr	r3, [pc, #392]	; (800308c <Fuzzy_Init+0x1d0>)
 8002f04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	int len_e =  n_max_e;
 8002f08:	23c9      	movs	r3, #201	; 0xc9
 8002f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	int len_de =  n_max_e;
 8002f0e:	23c9      	movs	r3, #201	; 0xc9
 8002f10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	int len_kpp =  n_max_kpp;
 8002f14:	2365      	movs	r3, #101	; 0x65
 8002f16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	int len_kdp = n_max_kpp;
 8002f1a:	2365      	movs	r3, #101	; 0x65
 8002f1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	int len_kip =  n_max_kip;
 8002f20:	2365      	movs	r3, #101	; 0x65
 8002f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	fuzzy.len_MFout[0] = len_kpp;
 8002f26:	4a58      	ldr	r2, [pc, #352]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002f28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f2c:	63d3      	str	r3, [r2, #60]	; 0x3c
	fuzzy.len_MFout[1] = len_kdp;
 8002f2e:	4a56      	ldr	r2, [pc, #344]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
	fuzzy.len_MFout[2] = len_kip;
 8002f36:	4a54      	ldr	r2, [pc, #336]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002f38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f3c:	6453      	str	r3, [r2, #68]	; 0x44

	generate_vector(fuzzy.error,fuzzy.range_e[0],fuzzy.range_e[1], paso);
 8002f3e:	4b52      	ldr	r3, [pc, #328]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f4a:	4b4f      	ldr	r3, [pc, #316]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	ee07 3a10 	vmov	s14, r3
 8002f52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f56:	ed97 1a37 	vldr	s2, [r7, #220]	; 0xdc
 8002f5a:	eef0 0a47 	vmov.f32	s1, s14
 8002f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f62:	484b      	ldr	r0, [pc, #300]	; (8003090 <Fuzzy_Init+0x1d4>)
 8002f64:	f002 fdf8 	bl	8005b58 <generate_vector>
	generate_vector(fuzzy.delt_error,fuzzy.range_de[0],fuzzy.range_de[1], paso);
 8002f68:	4b47      	ldr	r3, [pc, #284]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f74:	4b44      	ldr	r3, [pc, #272]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	ee07 3a10 	vmov	s14, r3
 8002f7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f80:	ed97 1a37 	vldr	s2, [r7, #220]	; 0xdc
 8002f84:	eef0 0a47 	vmov.f32	s1, s14
 8002f88:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8c:	4841      	ldr	r0, [pc, #260]	; (8003094 <Fuzzy_Init+0x1d8>)
 8002f8e:	f002 fde3 	bl	8005b58 <generate_vector>
	generate_vector(fuzzy.kpp,fuzzy.range_kpp[0],fuzzy.range_kpp[1], paso);
 8002f92:	4b3d      	ldr	r3, [pc, #244]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f9e:	4b3a      	ldr	r3, [pc, #232]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	ee07 3a10 	vmov	s14, r3
 8002fa6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002faa:	ed97 1a37 	vldr	s2, [r7, #220]	; 0xdc
 8002fae:	eef0 0a47 	vmov.f32	s1, s14
 8002fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb6:	4838      	ldr	r0, [pc, #224]	; (8003098 <Fuzzy_Init+0x1dc>)
 8002fb8:	f002 fdce 	bl	8005b58 <generate_vector>
	generate_vector(fuzzy.kdp ,fuzzy.range_kdp[0],fuzzy.range_kdp[1], paso);
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fc8:	4b2f      	ldr	r3, [pc, #188]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	ee07 3a10 	vmov	s14, r3
 8002fd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002fd4:	ed97 1a37 	vldr	s2, [r7, #220]	; 0xdc
 8002fd8:	eef0 0a47 	vmov.f32	s1, s14
 8002fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe0:	482e      	ldr	r0, [pc, #184]	; (800309c <Fuzzy_Init+0x1e0>)
 8002fe2:	f002 fdb9 	bl	8005b58 <generate_vector>
	generate_vector(fuzzy.kip,fuzzy.range_kip[0],fuzzy.range_kip[1], paso);
 8002fe6:	4b28      	ldr	r3, [pc, #160]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff2:	4b25      	ldr	r3, [pc, #148]	; (8003088 <Fuzzy_Init+0x1cc>)
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	ee07 3a10 	vmov	s14, r3
 8002ffa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ffe:	ed97 1a37 	vldr	s2, [r7, #220]	; 0xdc
 8003002:	eef0 0a47 	vmov.f32	s1, s14
 8003006:	eeb0 0a67 	vmov.f32	s0, s15
 800300a:	4825      	ldr	r0, [pc, #148]	; (80030a0 <Fuzzy_Init+0x1e4>)
 800300c:	f002 fda4 	bl	8005b58 <generate_vector>

	fuzzy.fun_in_out[0] = fuzzy.error;
 8003010:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <Fuzzy_Init+0x1cc>)
 8003012:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <Fuzzy_Init+0x1d4>)
 8003014:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	fuzzy.fun_in_out[1] = fuzzy.delt_error;
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <Fuzzy_Init+0x1cc>)
 800301a:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <Fuzzy_Init+0x1d8>)
 800301c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fuzzy.fun_in_out[2] = fuzzy.kpp;
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <Fuzzy_Init+0x1cc>)
 8003022:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <Fuzzy_Init+0x1dc>)
 8003024:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fuzzy.fun_in_out[3] = fuzzy.kdp;
 8003028:	4b17      	ldr	r3, [pc, #92]	; (8003088 <Fuzzy_Init+0x1cc>)
 800302a:	4a1c      	ldr	r2, [pc, #112]	; (800309c <Fuzzy_Init+0x1e0>)
 800302c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fuzzy.fun_in_out[4] = fuzzy.kip;
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <Fuzzy_Init+0x1cc>)
 8003032:	4a1b      	ldr	r2, [pc, #108]	; (80030a0 <Fuzzy_Init+0x1e4>)
 8003034:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	char *valores[N_RULES]= {
 8003038:	4a1a      	ldr	r2, [pc, #104]	; (80030a4 <Fuzzy_Init+0x1e8>)
 800303a:	1d3b      	adds	r3, r7, #4
 800303c:	4611      	mov	r1, r2
 800303e:	22c4      	movs	r2, #196	; 0xc4
 8003040:	4618      	mov	r0, r3
 8003042:	f009 fa75 	bl	800c530 <memcpy>
			"7 3, 2 1 4",
			"7 4, 2 1 4",
			"7 5, 2 1 4",
			"7 6, 2 1 4",
			"7 7, 2 1 4"};
		for (int i = 0 ; i < N_RULES; ++i) {
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800304c:	e013      	b.n	8003076 <Fuzzy_Init+0x1ba>
			fuzzy.reglas[i] = valores[i];
 800304e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	33f8      	adds	r3, #248	; 0xf8
 8003056:	443b      	add	r3, r7
 8003058:	f853 2cf4 	ldr.w	r2, [r3, #-244]
 800305c:	490a      	ldr	r1, [pc, #40]	; (8003088 <Fuzzy_Init+0x1cc>)
 800305e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003062:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003066:	3314      	adds	r3, #20
 8003068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0 ; i < N_RULES; ++i) {
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003070:	3301      	adds	r3, #1
 8003072:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307a:	2b30      	cmp	r3, #48	; 0x30
 800307c:	dde7      	ble.n	800304e <Fuzzy_Init+0x192>
		}

		for (int i = 0 ; i < len_e; ++i){
 800307e:	2300      	movs	r3, #0
 8003080:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003084:	e0ee      	b.n	8003264 <Fuzzy_Init+0x3a8>
 8003086:	bf00      	nop
 8003088:	200001fc 	.word	0x200001fc
 800308c:	3c23d70a 	.word	0x3c23d70a
 8003090:	200002b0 	.word	0x200002b0
 8003094:	200005d4 	.word	0x200005d4
 8003098:	200008f8 	.word	0x200008f8
 800309c:	20000a8c 	.word	0x20000a8c
 80030a0:	20000c20 	.word	0x20000c20
 80030a4:	08011114 	.word	0x08011114
			fuzzy.eNB[i] = trapmf(fuzzy.error[i], -1E100, -1E100, -0.9667,  -0.7);
 80030a8:	4a7e      	ldr	r2, [pc, #504]	; (80032a4 <Fuzzy_Init+0x3e8>)
 80030aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80030ae:	332c      	adds	r3, #44	; 0x2c
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	3304      	adds	r3, #4
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	ed9f 2a7b 	vldr	s4, [pc, #492]	; 80032a8 <Fuzzy_Init+0x3ec>
 80030be:	eddf 1a7b 	vldr	s3, [pc, #492]	; 80032ac <Fuzzy_Init+0x3f0>
 80030c2:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 80032b0 <Fuzzy_Init+0x3f4>
 80030c6:	eddf 0a7a 	vldr	s1, [pc, #488]	; 80032b0 <Fuzzy_Init+0x3f4>
 80030ca:	eeb0 0a67 	vmov.f32	s0, s15
 80030ce:	f000 fe35 	bl	8003d3c <trapmf>
 80030d2:	eef0 7a40 	vmov.f32	s15, s0
 80030d6:	4a73      	ldr	r2, [pc, #460]	; (80032a4 <Fuzzy_Init+0x3e8>)
 80030d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80030dc:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.eNM[i] = trimf(fuzzy.error[i],  -1, -0.6667, -0.3333);
 80030e8:	4a6e      	ldr	r2, [pc, #440]	; (80032a4 <Fuzzy_Init+0x3e8>)
 80030ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80030ee:	332c      	adds	r3, #44	; 0x2c
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	3304      	adds	r3, #4
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	eddf 1a6e 	vldr	s3, [pc, #440]	; 80032b4 <Fuzzy_Init+0x3f8>
 80030fe:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 80032b8 <Fuzzy_Init+0x3fc>
 8003102:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003106:	eeb0 0a67 	vmov.f32	s0, s15
 800310a:	f000 fdd5 	bl	8003cb8 <trimf>
 800310e:	eef0 7a40 	vmov.f32	s15, s0
 8003112:	4a64      	ldr	r2, [pc, #400]	; (80032a4 <Fuzzy_Init+0x3e8>)
 8003114:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003118:	f203 33b6 	addw	r3, r3, #950	; 0x3b6
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	3304      	adds	r3, #4
 8003122:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.eNS[i] = trimf(fuzzy.error[i], -0.6667, -0.3333, -5.551E-17);
 8003126:	4a5f      	ldr	r2, [pc, #380]	; (80032a4 <Fuzzy_Init+0x3e8>)
 8003128:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800312c:	332c      	adds	r3, #44	; 0x2c
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	3304      	adds	r3, #4
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	eddf 1a60 	vldr	s3, [pc, #384]	; 80032bc <Fuzzy_Init+0x400>
 800313c:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 80032b4 <Fuzzy_Init+0x3f8>
 8003140:	eddf 0a5d 	vldr	s1, [pc, #372]	; 80032b8 <Fuzzy_Init+0x3fc>
 8003144:	eeb0 0a67 	vmov.f32	s0, s15
 8003148:	f000 fdb6 	bl	8003cb8 <trimf>
 800314c:	eef0 7a40 	vmov.f32	s15, s0
 8003150:	4a54      	ldr	r2, [pc, #336]	; (80032a4 <Fuzzy_Init+0x3e8>)
 8003152:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003156:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.eZO[i] = trimf(fuzzy.error[i], -0.3333, 0, 0.3333);
 8003162:	4a50      	ldr	r2, [pc, #320]	; (80032a4 <Fuzzy_Init+0x3e8>)
 8003164:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003168:	332c      	adds	r3, #44	; 0x2c
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	3304      	adds	r3, #4
 8003170:	edd3 7a00 	vldr	s15, [r3]
 8003174:	eddf 1a52 	vldr	s3, [pc, #328]	; 80032c0 <Fuzzy_Init+0x404>
 8003178:	ed9f 1a52 	vldr	s2, [pc, #328]	; 80032c4 <Fuzzy_Init+0x408>
 800317c:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80032b4 <Fuzzy_Init+0x3f8>
 8003180:	eeb0 0a67 	vmov.f32	s0, s15
 8003184:	f000 fd98 	bl	8003cb8 <trimf>
 8003188:	eef0 7a40 	vmov.f32	s15, s0
 800318c:	4a45      	ldr	r2, [pc, #276]	; (80032a4 <Fuzzy_Init+0x3e8>)
 800318e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003192:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.ePS[i] = trimf(fuzzy.error[i], -5.551e-17, 0.3333, 0.6667);
 80031a0:	4a40      	ldr	r2, [pc, #256]	; (80032a4 <Fuzzy_Init+0x3e8>)
 80031a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031a6:	332c      	adds	r3, #44	; 0x2c
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	3304      	adds	r3, #4
 80031ae:	edd3 7a00 	vldr	s15, [r3]
 80031b2:	eddf 1a45 	vldr	s3, [pc, #276]	; 80032c8 <Fuzzy_Init+0x40c>
 80031b6:	ed9f 1a42 	vldr	s2, [pc, #264]	; 80032c0 <Fuzzy_Init+0x404>
 80031ba:	eddf 0a40 	vldr	s1, [pc, #256]	; 80032bc <Fuzzy_Init+0x400>
 80031be:	eeb0 0a67 	vmov.f32	s0, s15
 80031c2:	f000 fd79 	bl	8003cb8 <trimf>
 80031c6:	eef0 7a40 	vmov.f32	s15, s0
 80031ca:	4a36      	ldr	r2, [pc, #216]	; (80032a4 <Fuzzy_Init+0x3e8>)
 80031cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031d0:	f203 6312 	addw	r3, r3, #1554	; 0x612
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.ePM[i] = trimf(fuzzy.error[i], 0.3333, 0.6667, 1);
 80031dc:	4a31      	ldr	r2, [pc, #196]	; (80032a4 <Fuzzy_Init+0x3e8>)
 80031de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031e2:	332c      	adds	r3, #44	; 0x2c
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	3304      	adds	r3, #4
 80031ea:	edd3 7a00 	vldr	s15, [r3]
 80031ee:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80031f2:	ed9f 1a35 	vldr	s2, [pc, #212]	; 80032c8 <Fuzzy_Init+0x40c>
 80031f6:	eddf 0a32 	vldr	s1, [pc, #200]	; 80032c0 <Fuzzy_Init+0x404>
 80031fa:	eeb0 0a67 	vmov.f32	s0, s15
 80031fe:	f000 fd5b 	bl	8003cb8 <trimf>
 8003202:	eef0 7a40 	vmov.f32	s15, s0
 8003206:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <Fuzzy_Init+0x3e8>)
 8003208:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800320c:	f203 63da 	addw	r3, r3, #1754	; 0x6da
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	3304      	adds	r3, #4
 8003216:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.ePB[i] = trapmf(fuzzy.error[i],  0.7, 0.9667,   1E10, 1E10);
 800321a:	4a22      	ldr	r2, [pc, #136]	; (80032a4 <Fuzzy_Init+0x3e8>)
 800321c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003220:	332c      	adds	r3, #44	; 0x2c
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	3304      	adds	r3, #4
 8003228:	edd3 7a00 	vldr	s15, [r3]
 800322c:	ed9f 2a27 	vldr	s4, [pc, #156]	; 80032cc <Fuzzy_Init+0x410>
 8003230:	eddf 1a26 	vldr	s3, [pc, #152]	; 80032cc <Fuzzy_Init+0x410>
 8003234:	ed9f 1a26 	vldr	s2, [pc, #152]	; 80032d0 <Fuzzy_Init+0x414>
 8003238:	eddf 0a26 	vldr	s1, [pc, #152]	; 80032d4 <Fuzzy_Init+0x418>
 800323c:	eeb0 0a67 	vmov.f32	s0, s15
 8003240:	f000 fd7c 	bl	8003d3c <trapmf>
 8003244:	eef0 7a40 	vmov.f32	s15, s0
 8003248:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <Fuzzy_Init+0x3e8>)
 800324a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800324e:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0 ; i < len_e; ++i){
 800325a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800325e:	3301      	adds	r3, #1
 8003260:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003264:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003268:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800326c:	429a      	cmp	r2, r3
 800326e:	f6ff af1b 	blt.w	80030a8 <Fuzzy_Init+0x1ec>
		}
		fuzzy.eMF[0] = fuzzy.eNB;
 8003272:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <Fuzzy_Init+0x3e8>)
 8003274:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <Fuzzy_Init+0x41c>)
 8003276:	649a      	str	r2, [r3, #72]	; 0x48
		fuzzy.eMF[1] = fuzzy.eNM;
 8003278:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <Fuzzy_Init+0x3e8>)
 800327a:	4a18      	ldr	r2, [pc, #96]	; (80032dc <Fuzzy_Init+0x420>)
 800327c:	64da      	str	r2, [r3, #76]	; 0x4c
		fuzzy.eMF[2] = fuzzy.eNS;
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <Fuzzy_Init+0x3e8>)
 8003280:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <Fuzzy_Init+0x424>)
 8003282:	651a      	str	r2, [r3, #80]	; 0x50
		fuzzy.eMF[3] = fuzzy.eZO;
 8003284:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <Fuzzy_Init+0x3e8>)
 8003286:	4a17      	ldr	r2, [pc, #92]	; (80032e4 <Fuzzy_Init+0x428>)
 8003288:	655a      	str	r2, [r3, #84]	; 0x54
		fuzzy.eMF[4] = fuzzy.ePS;
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <Fuzzy_Init+0x3e8>)
 800328c:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <Fuzzy_Init+0x42c>)
 800328e:	659a      	str	r2, [r3, #88]	; 0x58
		fuzzy.eMF[5] = fuzzy.ePM;
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <Fuzzy_Init+0x3e8>)
 8003292:	4a16      	ldr	r2, [pc, #88]	; (80032ec <Fuzzy_Init+0x430>)
 8003294:	65da      	str	r2, [r3, #92]	; 0x5c
		fuzzy.eMF[6] = fuzzy.ePB;
 8003296:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <Fuzzy_Init+0x3e8>)
 8003298:	4a15      	ldr	r2, [pc, #84]	; (80032f0 <Fuzzy_Init+0x434>)
 800329a:	661a      	str	r2, [r3, #96]	; 0x60

		for (int i = 0 ; i < len_de; ++i){
 800329c:	2300      	movs	r3, #0
 800329e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80032a2:	e0ff      	b.n	80034a4 <Fuzzy_Init+0x5e8>
 80032a4:	200001fc 	.word	0x200001fc
 80032a8:	bf333333 	.word	0xbf333333
 80032ac:	bf7779a7 	.word	0xbf7779a7
 80032b0:	ff800000 	.word	0xff800000
 80032b4:	beaaa64c 	.word	0xbeaaa64c
 80032b8:	bf2aacda 	.word	0xbf2aacda
 80032bc:	a47ffea4 	.word	0xa47ffea4
 80032c0:	3eaaa64c 	.word	0x3eaaa64c
 80032c4:	00000000 	.word	0x00000000
 80032c8:	3f2aacda 	.word	0x3f2aacda
 80032cc:	501502f9 	.word	0x501502f9
 80032d0:	3f7779a7 	.word	0x3f7779a7
 80032d4:	3f333333 	.word	0x3f333333
 80032d8:	20000db4 	.word	0x20000db4
 80032dc:	200010d8 	.word	0x200010d8
 80032e0:	200013fc 	.word	0x200013fc
 80032e4:	20001720 	.word	0x20001720
 80032e8:	20001a44 	.word	0x20001a44
 80032ec:	20001d68 	.word	0x20001d68
 80032f0:	2000208c 	.word	0x2000208c
			fuzzy.deNB[i] = trapmf(fuzzy.delt_error[i], -1E100, -1E100, -0.9667,  -0.7);
 80032f4:	4acc      	ldr	r2, [pc, #816]	; (8003628 <Fuzzy_Init+0x76c>)
 80032f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80032fa:	33f6      	adds	r3, #246	; 0xf6
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	edd3 7a00 	vldr	s15, [r3]
 8003304:	ed9f 2ac9 	vldr	s4, [pc, #804]	; 800362c <Fuzzy_Init+0x770>
 8003308:	eddf 1ac9 	vldr	s3, [pc, #804]	; 8003630 <Fuzzy_Init+0x774>
 800330c:	ed9f 1ac9 	vldr	s2, [pc, #804]	; 8003634 <Fuzzy_Init+0x778>
 8003310:	eddf 0ac8 	vldr	s1, [pc, #800]	; 8003634 <Fuzzy_Init+0x778>
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	f000 fd10 	bl	8003d3c <trapmf>
 800331c:	eef0 7a40 	vmov.f32	s15, s0
 8003320:	4ac1      	ldr	r2, [pc, #772]	; (8003628 <Fuzzy_Init+0x76c>)
 8003322:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003326:	f603 036c 	addw	r3, r3, #2156	; 0x86c
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	3304      	adds	r3, #4
 8003330:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.deNM[i] = trimf(fuzzy.delt_error[i],  -1, -0.6667, -0.3334);
 8003334:	4abc      	ldr	r2, [pc, #752]	; (8003628 <Fuzzy_Init+0x76c>)
 8003336:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800333a:	33f6      	adds	r3, #246	; 0xf6
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	edd3 7a00 	vldr	s15, [r3]
 8003344:	eddf 1abc 	vldr	s3, [pc, #752]	; 8003638 <Fuzzy_Init+0x77c>
 8003348:	ed9f 1abc 	vldr	s2, [pc, #752]	; 800363c <Fuzzy_Init+0x780>
 800334c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003350:	eeb0 0a67 	vmov.f32	s0, s15
 8003354:	f000 fcb0 	bl	8003cb8 <trimf>
 8003358:	eef0 7a40 	vmov.f32	s15, s0
 800335c:	4ab2      	ldr	r2, [pc, #712]	; (8003628 <Fuzzy_Init+0x76c>)
 800335e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003362:	f603 1336 	addw	r3, r3, #2358	; 0x936
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.deNS[i] = trimf(fuzzy.delt_error[i], -0.6666, -0.3333, 0);
 800336e:	4aae      	ldr	r2, [pc, #696]	; (8003628 <Fuzzy_Init+0x76c>)
 8003370:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003374:	33f6      	adds	r3, #246	; 0xf6
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	edd3 7a00 	vldr	s15, [r3]
 800337e:	eddf 1ab0 	vldr	s3, [pc, #704]	; 8003640 <Fuzzy_Init+0x784>
 8003382:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 8003644 <Fuzzy_Init+0x788>
 8003386:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8003648 <Fuzzy_Init+0x78c>
 800338a:	eeb0 0a67 	vmov.f32	s0, s15
 800338e:	f000 fc93 	bl	8003cb8 <trimf>
 8003392:	eef0 7a40 	vmov.f32	s15, s0
 8003396:	4aa4      	ldr	r2, [pc, #656]	; (8003628 <Fuzzy_Init+0x76c>)
 8003398:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800339c:	f603 13fe 	addw	r3, r3, #2558	; 0x9fe
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	3304      	adds	r3, #4
 80033a6:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.deZO[i] = trimf(fuzzy.delt_error[i], -0.3334, 0, 0.3334);
 80033aa:	4a9f      	ldr	r2, [pc, #636]	; (8003628 <Fuzzy_Init+0x76c>)
 80033ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80033b0:	33f6      	adds	r3, #246	; 0xf6
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	edd3 7a00 	vldr	s15, [r3]
 80033ba:	eddf 1aa4 	vldr	s3, [pc, #656]	; 800364c <Fuzzy_Init+0x790>
 80033be:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8003640 <Fuzzy_Init+0x784>
 80033c2:	eddf 0a9d 	vldr	s1, [pc, #628]	; 8003638 <Fuzzy_Init+0x77c>
 80033c6:	eeb0 0a67 	vmov.f32	s0, s15
 80033ca:	f000 fc75 	bl	8003cb8 <trimf>
 80033ce:	eef0 7a40 	vmov.f32	s15, s0
 80033d2:	4a95      	ldr	r2, [pc, #596]	; (8003628 <Fuzzy_Init+0x76c>)
 80033d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80033d8:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.dePS[i] = trimf(fuzzy.delt_error[i], 0, 0.3334, 0.6667);
 80033e4:	4a90      	ldr	r2, [pc, #576]	; (8003628 <Fuzzy_Init+0x76c>)
 80033e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80033ea:	33f6      	adds	r3, #246	; 0xf6
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	edd3 7a00 	vldr	s15, [r3]
 80033f4:	eddf 1a96 	vldr	s3, [pc, #600]	; 8003650 <Fuzzy_Init+0x794>
 80033f8:	ed9f 1a94 	vldr	s2, [pc, #592]	; 800364c <Fuzzy_Init+0x790>
 80033fc:	eddf 0a90 	vldr	s1, [pc, #576]	; 8003640 <Fuzzy_Init+0x784>
 8003400:	eeb0 0a67 	vmov.f32	s0, s15
 8003404:	f000 fc58 	bl	8003cb8 <trimf>
 8003408:	eef0 7a40 	vmov.f32	s15, s0
 800340c:	4a86      	ldr	r2, [pc, #536]	; (8003628 <Fuzzy_Init+0x76c>)
 800340e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003412:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	3304      	adds	r3, #4
 800341c:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.dePM[i] = trimf(fuzzy.delt_error[i], 0.3334, 0.6667, 1);
 8003420:	4a81      	ldr	r2, [pc, #516]	; (8003628 <Fuzzy_Init+0x76c>)
 8003422:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003426:	33f6      	adds	r3, #246	; 0xf6
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	edd3 7a00 	vldr	s15, [r3]
 8003430:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003434:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8003650 <Fuzzy_Init+0x794>
 8003438:	eddf 0a84 	vldr	s1, [pc, #528]	; 800364c <Fuzzy_Init+0x790>
 800343c:	eeb0 0a67 	vmov.f32	s0, s15
 8003440:	f000 fc3a 	bl	8003cb8 <trimf>
 8003444:	eef0 7a40 	vmov.f32	s15, s0
 8003448:	4a77      	ldr	r2, [pc, #476]	; (8003628 <Fuzzy_Init+0x76c>)
 800344a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800344e:	f603 435a 	addw	r3, r3, #3162	; 0xc5a
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.dePB[i] = trapmf(fuzzy.delt_error[i],  0.7, 0.9667,   1E10, 1E10);
 800345a:	4a73      	ldr	r2, [pc, #460]	; (8003628 <Fuzzy_Init+0x76c>)
 800345c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003460:	33f6      	adds	r3, #246	; 0xf6
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ed9f 2a7a 	vldr	s4, [pc, #488]	; 8003654 <Fuzzy_Init+0x798>
 800346e:	eddf 1a79 	vldr	s3, [pc, #484]	; 8003654 <Fuzzy_Init+0x798>
 8003472:	ed9f 1a79 	vldr	s2, [pc, #484]	; 8003658 <Fuzzy_Init+0x79c>
 8003476:	eddf 0a79 	vldr	s1, [pc, #484]	; 800365c <Fuzzy_Init+0x7a0>
 800347a:	eeb0 0a67 	vmov.f32	s0, s15
 800347e:	f000 fc5d 	bl	8003d3c <trapmf>
 8003482:	eef0 7a40 	vmov.f32	s15, s0
 8003486:	4a68      	ldr	r2, [pc, #416]	; (8003628 <Fuzzy_Init+0x76c>)
 8003488:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800348c:	f603 5322 	addw	r3, r3, #3362	; 0xd22
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	3304      	adds	r3, #4
 8003496:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0 ; i < len_de; ++i){
 800349a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800349e:	3301      	adds	r3, #1
 80034a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80034a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80034a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034ac:	429a      	cmp	r2, r3
 80034ae:	f6ff af21 	blt.w	80032f4 <Fuzzy_Init+0x438>
		}
		fuzzy.deMF[0] = fuzzy.deNB;
 80034b2:	4b5d      	ldr	r3, [pc, #372]	; (8003628 <Fuzzy_Init+0x76c>)
 80034b4:	4a6a      	ldr	r2, [pc, #424]	; (8003660 <Fuzzy_Init+0x7a4>)
 80034b6:	665a      	str	r2, [r3, #100]	; 0x64
		fuzzy.deMF[1] = fuzzy.deNM;
 80034b8:	4b5b      	ldr	r3, [pc, #364]	; (8003628 <Fuzzy_Init+0x76c>)
 80034ba:	4a6a      	ldr	r2, [pc, #424]	; (8003664 <Fuzzy_Init+0x7a8>)
 80034bc:	669a      	str	r2, [r3, #104]	; 0x68
		fuzzy.deMF[2] = fuzzy.deNS;
 80034be:	4b5a      	ldr	r3, [pc, #360]	; (8003628 <Fuzzy_Init+0x76c>)
 80034c0:	4a69      	ldr	r2, [pc, #420]	; (8003668 <Fuzzy_Init+0x7ac>)
 80034c2:	66da      	str	r2, [r3, #108]	; 0x6c
		fuzzy.deMF[3] = fuzzy.deZO;
 80034c4:	4b58      	ldr	r3, [pc, #352]	; (8003628 <Fuzzy_Init+0x76c>)
 80034c6:	4a69      	ldr	r2, [pc, #420]	; (800366c <Fuzzy_Init+0x7b0>)
 80034c8:	671a      	str	r2, [r3, #112]	; 0x70
		fuzzy.deMF[4] = fuzzy.dePS;
 80034ca:	4b57      	ldr	r3, [pc, #348]	; (8003628 <Fuzzy_Init+0x76c>)
 80034cc:	4a68      	ldr	r2, [pc, #416]	; (8003670 <Fuzzy_Init+0x7b4>)
 80034ce:	675a      	str	r2, [r3, #116]	; 0x74
		fuzzy.deMF[5] = fuzzy.dePM;
 80034d0:	4b55      	ldr	r3, [pc, #340]	; (8003628 <Fuzzy_Init+0x76c>)
 80034d2:	4a68      	ldr	r2, [pc, #416]	; (8003674 <Fuzzy_Init+0x7b8>)
 80034d4:	679a      	str	r2, [r3, #120]	; 0x78
		fuzzy.deMF[6] = fuzzy.dePB;
 80034d6:	4b54      	ldr	r3, [pc, #336]	; (8003628 <Fuzzy_Init+0x76c>)
 80034d8:	4a67      	ldr	r2, [pc, #412]	; (8003678 <Fuzzy_Init+0x7bc>)
 80034da:	67da      	str	r2, [r3, #124]	; 0x7c

		for (int i = 0 ; i < len_kpp; ++i){
 80034dc:	2300      	movs	r3, #0
 80034de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034e2:	e03f      	b.n	8003564 <Fuzzy_Init+0x6a8>
			fuzzy.small1[i] = gaussmf(fuzzy.kpp[i], 0.4247, 0);
 80034e4:	4a50      	ldr	r2, [pc, #320]	; (8003628 <Fuzzy_Init+0x76c>)
 80034e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80034ea:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	3304      	adds	r3, #4
 80034f4:	edd3 7a00 	vldr	s15, [r3]
 80034f8:	ed9f 1a51 	vldr	s2, [pc, #324]	; 8003640 <Fuzzy_Init+0x784>
 80034fc:	eddf 0a5f 	vldr	s1, [pc, #380]	; 800367c <Fuzzy_Init+0x7c0>
 8003500:	eeb0 0a67 	vmov.f32	s0, s15
 8003504:	f000 fb7c 	bl	8003c00 <gaussmf>
 8003508:	eef0 7a40 	vmov.f32	s15, s0
 800350c:	4a46      	ldr	r2, [pc, #280]	; (8003628 <Fuzzy_Init+0x76c>)
 800350e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003512:	f603 53ec 	addw	r3, r3, #3564	; 0xdec
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.big1[i] = gaussmf(fuzzy.kpp[i], 0.4247, 1);
 800351e:	4a42      	ldr	r2, [pc, #264]	; (8003628 <Fuzzy_Init+0x76c>)
 8003520:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003524:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	3304      	adds	r3, #4
 800352e:	edd3 7a00 	vldr	s15, [r3]
 8003532:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003536:	eddf 0a51 	vldr	s1, [pc, #324]	; 800367c <Fuzzy_Init+0x7c0>
 800353a:	eeb0 0a67 	vmov.f32	s0, s15
 800353e:	f000 fb5f 	bl	8003c00 <gaussmf>
 8003542:	eef0 7a40 	vmov.f32	s15, s0
 8003546:	4a38      	ldr	r2, [pc, #224]	; (8003628 <Fuzzy_Init+0x76c>)
 8003548:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800354c:	f503 6365 	add.w	r3, r3, #3664	; 0xe50
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	3304      	adds	r3, #4
 8003556:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0 ; i < len_kpp; ++i){
 800355a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800355e:	3301      	adds	r3, #1
 8003560:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003564:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003568:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800356c:	429a      	cmp	r2, r3
 800356e:	dbb9      	blt.n	80034e4 <Fuzzy_Init+0x628>
		}
		fuzzy.kppMF[0] = fuzzy.small1; fuzzy.kppMF[1] = fuzzy.big1;
 8003570:	4b2d      	ldr	r3, [pc, #180]	; (8003628 <Fuzzy_Init+0x76c>)
 8003572:	4a43      	ldr	r2, [pc, #268]	; (8003680 <Fuzzy_Init+0x7c4>)
 8003574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003578:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <Fuzzy_Init+0x76c>)
 800357a:	4a42      	ldr	r2, [pc, #264]	; (8003684 <Fuzzy_Init+0x7c8>)
 800357c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

		for (int i = 0 ; i < len_kdp; ++i){
 8003580:	2300      	movs	r3, #0
 8003582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003586:	e03d      	b.n	8003604 <Fuzzy_Init+0x748>
			fuzzy.small2[i] = gaussmf(fuzzy.kdp[i], 0.4247, 0);
 8003588:	4a27      	ldr	r2, [pc, #156]	; (8003628 <Fuzzy_Init+0x76c>)
 800358a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	edd3 7a00 	vldr	s15, [r3]
 800359a:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8003640 <Fuzzy_Init+0x784>
 800359e:	eddf 0a37 	vldr	s1, [pc, #220]	; 800367c <Fuzzy_Init+0x7c0>
 80035a2:	eeb0 0a67 	vmov.f32	s0, s15
 80035a6:	f000 fb2b 	bl	8003c00 <gaussmf>
 80035aa:	eef0 7a40 	vmov.f32	s15, s0
 80035ae:	4a1e      	ldr	r2, [pc, #120]	; (8003628 <Fuzzy_Init+0x76c>)
 80035b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b4:	f603 63b6 	addw	r3, r3, #3766	; 0xeb6
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.big2[i] = gaussmf(fuzzy.kdp[i], 0.4247, 1);
 80035c0:	4a19      	ldr	r2, [pc, #100]	; (8003628 <Fuzzy_Init+0x76c>)
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c6:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	edd3 7a00 	vldr	s15, [r3]
 80035d2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80035d6:	eddf 0a29 	vldr	s1, [pc, #164]	; 800367c <Fuzzy_Init+0x7c0>
 80035da:	eeb0 0a67 	vmov.f32	s0, s15
 80035de:	f000 fb0f 	bl	8003c00 <gaussmf>
 80035e2:	eef0 7a40 	vmov.f32	s15, s0
 80035e6:	4a10      	ldr	r2, [pc, #64]	; (8003628 <Fuzzy_Init+0x76c>)
 80035e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ec:	f603 731a 	addw	r3, r3, #3866	; 0xf1a
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	3304      	adds	r3, #4
 80035f6:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0 ; i < len_kdp; ++i){
 80035fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fe:	3301      	adds	r3, #1
 8003600:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003604:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800360c:	429a      	cmp	r2, r3
 800360e:	dbbb      	blt.n	8003588 <Fuzzy_Init+0x6cc>
		}
		fuzzy.kdpMF[0] = fuzzy.small2; fuzzy.kdpMF[1] = fuzzy.big2;
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <Fuzzy_Init+0x76c>)
 8003612:	4a1d      	ldr	r2, [pc, #116]	; (8003688 <Fuzzy_Init+0x7cc>)
 8003614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <Fuzzy_Init+0x76c>)
 800361a:	4a1c      	ldr	r2, [pc, #112]	; (800368c <Fuzzy_Init+0x7d0>)
 800361c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

		for (int i = 0 ; i < len_kip; ++i){
 8003620:	2300      	movs	r3, #0
 8003622:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003626:	e0b0      	b.n	800378a <Fuzzy_Init+0x8ce>
 8003628:	200001fc 	.word	0x200001fc
 800362c:	bf333333 	.word	0xbf333333
 8003630:	bf7779a7 	.word	0xbf7779a7
 8003634:	ff800000 	.word	0xff800000
 8003638:	beaab368 	.word	0xbeaab368
 800363c:	bf2aacda 	.word	0xbf2aacda
 8003640:	00000000 	.word	0x00000000
 8003644:	beaaa64c 	.word	0xbeaaa64c
 8003648:	bf2aa64c 	.word	0xbf2aa64c
 800364c:	3eaab368 	.word	0x3eaab368
 8003650:	3f2aacda 	.word	0x3f2aacda
 8003654:	501502f9 	.word	0x501502f9
 8003658:	3f7779a7 	.word	0x3f7779a7
 800365c:	3f333333 	.word	0x3f333333
 8003660:	200023b0 	.word	0x200023b0
 8003664:	200026d4 	.word	0x200026d4
 8003668:	200029f8 	.word	0x200029f8
 800366c:	20002d1c 	.word	0x20002d1c
 8003670:	20003040 	.word	0x20003040
 8003674:	20003364 	.word	0x20003364
 8003678:	20003688 	.word	0x20003688
 800367c:	3ed97247 	.word	0x3ed97247
 8003680:	200039ac 	.word	0x200039ac
 8003684:	20003b40 	.word	0x20003b40
 8003688:	20003cd4 	.word	0x20003cd4
 800368c:	20003e68 	.word	0x20003e68
			fuzzy.S[i]  = gaussmf(fuzzy.kip[i], 0.1,0);
 8003690:	4a53      	ldr	r2, [pc, #332]	; (80037e0 <Fuzzy_Init+0x924>)
 8003692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003696:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	3304      	adds	r3, #4
 80036a0:	edd3 7a00 	vldr	s15, [r3]
 80036a4:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 80037e4 <Fuzzy_Init+0x928>
 80036a8:	eddf 0a4f 	vldr	s1, [pc, #316]	; 80037e8 <Fuzzy_Init+0x92c>
 80036ac:	eeb0 0a67 	vmov.f32	s0, s15
 80036b0:	f000 faa6 	bl	8003c00 <gaussmf>
 80036b4:	eef0 7a40 	vmov.f32	s15, s0
 80036b8:	4a49      	ldr	r2, [pc, #292]	; (80037e0 <Fuzzy_Init+0x924>)
 80036ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036be:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.MS[i] = gaussmf(fuzzy.kip[i], 0.1, 0.295);
 80036ca:	4a45      	ldr	r2, [pc, #276]	; (80037e0 <Fuzzy_Init+0x924>)
 80036cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	3304      	adds	r3, #4
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	ed9f 1a43 	vldr	s2, [pc, #268]	; 80037ec <Fuzzy_Init+0x930>
 80036e2:	eddf 0a41 	vldr	s1, [pc, #260]	; 80037e8 <Fuzzy_Init+0x92c>
 80036e6:	eeb0 0a67 	vmov.f32	s0, s15
 80036ea:	f000 fa89 	bl	8003c00 <gaussmf>
 80036ee:	eef0 7a40 	vmov.f32	s15, s0
 80036f2:	4a3b      	ldr	r2, [pc, #236]	; (80037e0 <Fuzzy_Init+0x924>)
 80036f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f8:	f603 73e4 	addw	r3, r3, #4068	; 0xfe4
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	3304      	adds	r3, #4
 8003702:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.MB[i] = gaussmf(fuzzy.kip[i], 0.1, 0.705);
 8003706:	4a36      	ldr	r2, [pc, #216]	; (80037e0 <Fuzzy_Init+0x924>)
 8003708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	3304      	adds	r3, #4
 8003716:	edd3 7a00 	vldr	s15, [r3]
 800371a:	ed9f 1a35 	vldr	s2, [pc, #212]	; 80037f0 <Fuzzy_Init+0x934>
 800371e:	eddf 0a32 	vldr	s1, [pc, #200]	; 80037e8 <Fuzzy_Init+0x92c>
 8003722:	eeb0 0a67 	vmov.f32	s0, s15
 8003726:	f000 fa6b 	bl	8003c00 <gaussmf>
 800372a:	eef0 7a40 	vmov.f32	s15, s0
 800372e:	4a2c      	ldr	r2, [pc, #176]	; (80037e0 <Fuzzy_Init+0x924>)
 8003730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003734:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8003738:	330a      	adds	r3, #10
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	edc3 7a00 	vstr	s15, [r3]
			fuzzy.B[i]  = gaussmf(fuzzy.kip[i], 0.1, 1);
 8003742:	4a27      	ldr	r2, [pc, #156]	; (80037e0 <Fuzzy_Init+0x924>)
 8003744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003748:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	3304      	adds	r3, #4
 8003752:	edd3 7a00 	vldr	s15, [r3]
 8003756:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800375a:	eddf 0a23 	vldr	s1, [pc, #140]	; 80037e8 <Fuzzy_Init+0x92c>
 800375e:	eeb0 0a67 	vmov.f32	s0, s15
 8003762:	f000 fa4d 	bl	8003c00 <gaussmf>
 8003766:	eef0 7a40 	vmov.f32	s15, s0
 800376a:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <Fuzzy_Init+0x924>)
 800376c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003770:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8003774:	330e      	adds	r3, #14
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	3304      	adds	r3, #4
 800377c:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0 ; i < len_kip; ++i){
 8003780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003784:	3301      	adds	r3, #1
 8003786:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800378a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800378e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003792:	429a      	cmp	r2, r3
 8003794:	f6ff af7c 	blt.w	8003690 <Fuzzy_Init+0x7d4>
		}
		fuzzy.kipMF[0] = fuzzy.S; fuzzy.kipMF[1] = fuzzy.MS;
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <Fuzzy_Init+0x924>)
 800379a:	4a16      	ldr	r2, [pc, #88]	; (80037f4 <Fuzzy_Init+0x938>)
 800379c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <Fuzzy_Init+0x924>)
 80037a2:	4a15      	ldr	r2, [pc, #84]	; (80037f8 <Fuzzy_Init+0x93c>)
 80037a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		fuzzy.kipMF[2] = fuzzy.MB; fuzzy.kipMF[3] = fuzzy.B;
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <Fuzzy_Init+0x924>)
 80037aa:	4a14      	ldr	r2, [pc, #80]	; (80037fc <Fuzzy_Init+0x940>)
 80037ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <Fuzzy_Init+0x924>)
 80037b2:	4a13      	ldr	r2, [pc, #76]	; (8003800 <Fuzzy_Init+0x944>)
 80037b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		fuzzy.MFin[0]=fuzzy.eMF;fuzzy.MFin[1]=fuzzy.deMF;
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <Fuzzy_Init+0x924>)
 80037ba:	4a12      	ldr	r2, [pc, #72]	; (8003804 <Fuzzy_Init+0x948>)
 80037bc:	629a      	str	r2, [r3, #40]	; 0x28
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <Fuzzy_Init+0x924>)
 80037c0:	4a11      	ldr	r2, [pc, #68]	; (8003808 <Fuzzy_Init+0x94c>)
 80037c2:	62da      	str	r2, [r3, #44]	; 0x2c
		fuzzy.MFout[0]=fuzzy.kppMF;fuzzy.MFout[1]=fuzzy.kdpMF;fuzzy.MFout[2]=fuzzy.kipMF;
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <Fuzzy_Init+0x924>)
 80037c6:	4a11      	ldr	r2, [pc, #68]	; (800380c <Fuzzy_Init+0x950>)
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <Fuzzy_Init+0x924>)
 80037cc:	4a10      	ldr	r2, [pc, #64]	; (8003810 <Fuzzy_Init+0x954>)
 80037ce:	635a      	str	r2, [r3, #52]	; 0x34
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <Fuzzy_Init+0x924>)
 80037d2:	4a10      	ldr	r2, [pc, #64]	; (8003814 <Fuzzy_Init+0x958>)
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80037d6:	bf00      	nop
 80037d8:	37f8      	adds	r7, #248	; 0xf8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200001fc 	.word	0x200001fc
 80037e4:	00000000 	.word	0x00000000
 80037e8:	3dcccccd 	.word	0x3dcccccd
 80037ec:	3e970a3d 	.word	0x3e970a3d
 80037f0:	3f347ae1 	.word	0x3f347ae1
 80037f4:	20003ffc 	.word	0x20003ffc
 80037f8:	20004190 	.word	0x20004190
 80037fc:	20004324 	.word	0x20004324
 8003800:	200044b8 	.word	0x200044b8
 8003804:	20000244 	.word	0x20000244
 8003808:	20000260 	.word	0x20000260
 800380c:	2000027c 	.word	0x2000027c
 8003810:	20000284 	.word	0x20000284
 8003814:	2000028c 	.word	0x2000028c

08003818 <eval_fuzzy>:

void eval_fuzzy(float *entradas, float *salidas){
 8003818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800381c:	b09d      	sub	sp, #116	; 0x74
 800381e:	af00      	add	r7, sp, #0
 8003820:	61f8      	str	r0, [r7, #28]
 8003822:	61b9      	str	r1, [r7, #24]
 8003824:	466b      	mov	r3, sp
 8003826:	461e      	mov	r6, r3
	float paso = PASO;
 8003828:	4bb6      	ldr	r3, [pc, #728]	; (8003b04 <eval_fuzzy+0x2ec>)
 800382a:	653b      	str	r3, [r7, #80]	; 0x50
	int n_entradas = num_MFin;
 800382c:	2302      	movs	r3, #2
 800382e:	64fb      	str	r3, [r7, #76]	; 0x4c
	int n_salidas = num_MFout;
 8003830:	2303      	movs	r3, #3
 8003832:	64bb      	str	r3, [r7, #72]	; 0x48
	int n_rules = N_RULES;
 8003834:	2331      	movs	r3, #49	; 0x31
 8003836:	647b      	str	r3, [r7, #68]	; 0x44
	int index_in[n_entradas];
 8003838:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800383a:	1e4b      	subs	r3, r1, #1
 800383c:	643b      	str	r3, [r7, #64]	; 0x40
 800383e:	460a      	mov	r2, r1
 8003840:	2300      	movs	r3, #0
 8003842:	4614      	mov	r4, r2
 8003844:	461d      	mov	r5, r3
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	016b      	lsls	r3, r5, #5
 8003850:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003854:	0162      	lsls	r2, r4, #5
 8003856:	460a      	mov	r2, r1
 8003858:	2300      	movs	r3, #0
 800385a:	613a      	str	r2, [r7, #16]
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800386a:	4628      	mov	r0, r5
 800386c:	0143      	lsls	r3, r0, #5
 800386e:	4620      	mov	r0, r4
 8003870:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003874:	4620      	mov	r0, r4
 8003876:	0142      	lsls	r2, r0, #5
 8003878:	460b      	mov	r3, r1
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	3307      	adds	r3, #7
 800387e:	08db      	lsrs	r3, r3, #3
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	ebad 0d03 	sub.w	sp, sp, r3
 8003886:	466b      	mov	r3, sp
 8003888:	3303      	adds	r3, #3
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float aux_var;
	float **out;
	float fuzzy_value;
	int selec_MFin[n_entradas], selec_MFout[n_salidas];
 8003890:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003892:	1e4b      	subs	r3, r1, #1
 8003894:	63bb      	str	r3, [r7, #56]	; 0x38
 8003896:	460a      	mov	r2, r1
 8003898:	2300      	movs	r3, #0
 800389a:	60ba      	str	r2, [r7, #8]
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038aa:	4628      	mov	r0, r5
 80038ac:	0143      	lsls	r3, r0, #5
 80038ae:	4620      	mov	r0, r4
 80038b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038b4:	4620      	mov	r0, r4
 80038b6:	0142      	lsls	r2, r0, #5
 80038b8:	460a      	mov	r2, r1
 80038ba:	2300      	movs	r3, #0
 80038bc:	603a      	str	r2, [r7, #0]
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038cc:	4628      	mov	r0, r5
 80038ce:	0143      	lsls	r3, r0, #5
 80038d0:	4620      	mov	r0, r4
 80038d2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038d6:	4620      	mov	r0, r4
 80038d8:	0142      	lsls	r2, r0, #5
 80038da:	460b      	mov	r3, r1
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	3307      	adds	r3, #7
 80038e0:	08db      	lsrs	r3, r3, #3
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	ebad 0d03 	sub.w	sp, sp, r3
 80038e8:	466b      	mov	r3, sp
 80038ea:	3303      	adds	r3, #3
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
 80038f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80038f4:	1e4b      	subs	r3, r1, #1
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30
 80038f8:	460a      	mov	r2, r1
 80038fa:	2300      	movs	r3, #0
 80038fc:	4692      	mov	sl, r2
 80038fe:	469b      	mov	fp, r3
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800390c:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8003910:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8003914:	460a      	mov	r2, r1
 8003916:	2300      	movs	r3, #0
 8003918:	4690      	mov	r8, r2
 800391a:	4699      	mov	r9, r3
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003928:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800392c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003930:	460b      	mov	r3, r1
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	3307      	adds	r3, #7
 8003936:	08db      	lsrs	r3, r3, #3
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	ebad 0d03 	sub.w	sp, sp, r3
 800393e:	466b      	mov	r3, sp
 8003940:	3303      	adds	r3, #3
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c

	// reservamos espacio de memoria para out
	out = (float **) calloc(n_salidas, sizeof(float *));
 8003948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800394a:	2104      	movs	r1, #4
 800394c:	4618      	mov	r0, r3
 800394e:	f008 fdad 	bl	800c4ac <calloc>
 8003952:	4603      	mov	r3, r0
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int k = 0; k < n_salidas; ++k)
 8003956:	2300      	movs	r3, #0
 8003958:	657b      	str	r3, [r7, #84]	; 0x54
 800395a:	e012      	b.n	8003982 <eval_fuzzy+0x16a>
		out[k] = (float * ) calloc(fuzzy.len_MFout[k],sizeof(float));
 800395c:	4a6a      	ldr	r2, [pc, #424]	; (8003b08 <eval_fuzzy+0x2f0>)
 800395e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003960:	330e      	adds	r3, #14
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4618      	mov	r0, r3
 800396a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003970:	18d4      	adds	r4, r2, r3
 8003972:	2104      	movs	r1, #4
 8003974:	f008 fd9a 	bl	800c4ac <calloc>
 8003978:	4603      	mov	r3, r0
 800397a:	6023      	str	r3, [r4, #0]
	for(int k = 0; k < n_salidas; ++k)
 800397c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800397e:	3301      	adds	r3, #1
 8003980:	657b      	str	r3, [r7, #84]	; 0x54
 8003982:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003986:	429a      	cmp	r2, r3
 8003988:	dbe8      	blt.n	800395c <eval_fuzzy+0x144>

	//buscamos el indice correspondiente para cada variable de entrada;
	for (int i = 0; i < n_entradas;++i)
 800398a:	2300      	movs	r3, #0
 800398c:	65bb      	str	r3, [r7, #88]	; 0x58
 800398e:	e018      	b.n	80039c2 <eval_fuzzy+0x1aa>
		index_in[i] = find_index(*(entradas + i), fuzzy.error[0], paso);
 8003990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	4413      	add	r3, r2
 8003998:	edd3 7a00 	vldr	s15, [r3]
 800399c:	4b5a      	ldr	r3, [pc, #360]	; (8003b08 <eval_fuzzy+0x2f0>)
 800399e:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 80039a2:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 80039a6:	eef0 0a47 	vmov.f32	s1, s14
 80039aa:	eeb0 0a67 	vmov.f32	s0, s15
 80039ae:	f000 fa15 	bl	8003ddc <find_index>
 80039b2:	4601      	mov	r1, r0
 80039b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < n_entradas;++i)
 80039bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039be:	3301      	adds	r3, #1
 80039c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80039c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c6:	429a      	cmp	r2, r3
 80039c8:	dbe2      	blt.n	8003990 <eval_fuzzy+0x178>

	for(int i = 0 ; i < n_rules; ++i ){
 80039ca:	2300      	movs	r3, #0
 80039cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ce:	e06a      	b.n	8003aa6 <eval_fuzzy+0x28e>
		//convertimos los reglas de string a valores numericos
		// salidas de acuerdo a las entradas seleccionadas en base la reglas difusas
		// Ejem: IF (e is NB) and (de is NB) THEN (kpp is big ) and (kdp is small) and (alpha is 2)
		Reglas_str2num(selec_MFin,selec_MFout,i);
 80039d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039d6:	f000 fa37 	bl	8003e48 <Reglas_str2num>
		//fusificacion
		fuzzy_value = fuzz(n_entradas,selec_MFin,index_in);
 80039da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80039de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80039e0:	f000 fab6 	bl	8003f50 <fuzz>
 80039e4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		// inferencia difusa de mandani  (and => min)
		for (int k = 0; k< n_salidas;++k){
 80039e8:	2300      	movs	r3, #0
 80039ea:	663b      	str	r3, [r7, #96]	; 0x60
 80039ec:	e054      	b.n	8003a98 <eval_fuzzy+0x280>
			for (int j = 0; j < fuzzy.len_MFout[k]; ++j) {
 80039ee:	2300      	movs	r3, #0
 80039f0:	667b      	str	r3, [r7, #100]	; 0x64
 80039f2:	e045      	b.n	8003a80 <eval_fuzzy+0x268>
				aux_var = min(*(*(fuzzy.MFout[k]+selec_MFout[k])+ j),fuzzy_value);
 80039f4:	4a44      	ldr	r2, [pc, #272]	; (8003b08 <eval_fuzzy+0x2f0>)
 80039f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039f8:	330c      	adds	r3, #12
 80039fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a00:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003a02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	edd3 7a00 	vldr	s15, [r3]
 8003a16:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8003a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a1e:	f000 f8bd 	bl	8003b9c <min>
 8003a22:	ed87 0a08 	vstr	s0, [r7, #32]
				if (i == 0)
 8003a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <eval_fuzzy+0x22a>
					(*(*(out +k)+j)) = aux_var;
 8003a2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a32:	4413      	add	r3, r2
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	6a3a      	ldr	r2, [r7, #32]
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e01b      	b.n	8003a7a <eval_fuzzy+0x262>
				else
					*(*(out +k)+j) = max(*(*(out +k)+j),aux_var);
 8003a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a48:	4413      	add	r3, r2
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	edd3 7a00 	vldr	s15, [r3]
 8003a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a5c:	4413      	add	r3, r2
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	18d4      	adds	r4, r2, r3
 8003a66:	edd7 0a08 	vldr	s1, [r7, #32]
 8003a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a6e:	f000 f865 	bl	8003b3c <max>
 8003a72:	eef0 7a40 	vmov.f32	s15, s0
 8003a76:	edc4 7a00 	vstr	s15, [r4]
			for (int j = 0; j < fuzzy.len_MFout[k]; ++j) {
 8003a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	667b      	str	r3, [r7, #100]	; 0x64
 8003a80:	4a21      	ldr	r2, [pc, #132]	; (8003b08 <eval_fuzzy+0x2f0>)
 8003a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a84:	330e      	adds	r3, #14
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	dbb0      	blt.n	80039f4 <eval_fuzzy+0x1dc>
		for (int k = 0; k< n_salidas;++k){
 8003a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a94:	3301      	adds	r3, #1
 8003a96:	663b      	str	r3, [r7, #96]	; 0x60
 8003a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	dba6      	blt.n	80039ee <eval_fuzzy+0x1d6>
	for(int i = 0 ; i < n_rules; ++i ){
 8003aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	db90      	blt.n	80039d0 <eval_fuzzy+0x1b8>
			}
		}
	}
	//DefuzzificaciÃ³n
	for (int k = 0 ; k < n_salidas;++k)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ab2:	e01f      	b.n	8003af4 <eval_fuzzy+0x2dc>
	*(salidas+k) = defuzz(fuzzy.fun_in_out[n_entradas + k], out[k], fuzzy.len_MFout[k]);
 8003ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ab8:	4413      	add	r3, r2
 8003aba:	4a13      	ldr	r2, [pc, #76]	; (8003b08 <eval_fuzzy+0x2f0>)
 8003abc:	3328      	adds	r3, #40	; 0x28
 8003abe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ac8:	4413      	add	r3, r2
 8003aca:	6819      	ldr	r1, [r3, #0]
 8003acc:	4a0e      	ldr	r2, [pc, #56]	; (8003b08 <eval_fuzzy+0x2f0>)
 8003ace:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ad0:	330e      	adds	r3, #14
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	685d      	ldr	r5, [r3, #4]
 8003ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	18d4      	adds	r4, r2, r3
 8003ae0:	462a      	mov	r2, r5
 8003ae2:	f000 fa87 	bl	8003ff4 <defuzz>
 8003ae6:	eef0 7a40 	vmov.f32	s15, s0
 8003aea:	edc4 7a00 	vstr	s15, [r4]
	for (int k = 0 ; k < n_salidas;++k)
 8003aee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003af0:	3301      	adds	r3, #1
 8003af2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003af4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af8:	429a      	cmp	r2, r3
 8003afa:	dbdb      	blt.n	8003ab4 <eval_fuzzy+0x29c>

    //liberamos espacio de memoria de out
	for (int k = 0;k < n_salidas;++k)
 8003afc:	2300      	movs	r3, #0
 8003afe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b00:	e00f      	b.n	8003b22 <eval_fuzzy+0x30a>
 8003b02:	bf00      	nop
 8003b04:	3c23d70a 	.word	0x3c23d70a
 8003b08:	200001fc 	.word	0x200001fc
		free(out[k]);
 8003b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b12:	4413      	add	r3, r2
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f008 fd02 	bl	800c520 <free>
	for (int k = 0;k < n_salidas;++k)
 8003b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1e:	3301      	adds	r3, #1
 8003b20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b26:	429a      	cmp	r2, r3
 8003b28:	dbf0      	blt.n	8003b0c <eval_fuzzy+0x2f4>
	free(out);
 8003b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b2c:	f008 fcf8 	bl	800c520 <free>
 8003b30:	46b5      	mov	sp, r6
}
 8003b32:	bf00      	nop
 8003b34:	3774      	adds	r7, #116	; 0x74
 8003b36:	46bd      	mov	sp, r7
 8003b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003b3c <max>:

// funcion maximo
float max(float a, float b){
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	ed87 0a01 	vstr	s0, [r7, #4]
 8003b46:	edc7 0a00 	vstr	s1, [r7]
	float res_max;
	if(a>b || a == b)
 8003b4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b4e:	edd7 7a00 	vldr	s15, [r7]
 8003b52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5a:	dc08      	bgt.n	8003b6e <max+0x32>
 8003b5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b60:	edd7 7a00 	vldr	s15, [r7]
 8003b64:	eeb4 7a67 	vcmp.f32	s14, s15
 8003b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6c:	d101      	bne.n	8003b72 <max+0x36>
		res_max = a;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	60fb      	str	r3, [r7, #12]
	if ( b > a)
 8003b72:	ed97 7a00 	vldr	s14, [r7]
 8003b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b82:	dd01      	ble.n	8003b88 <max+0x4c>
		res_max = b;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	60fb      	str	r3, [r7, #12]
	return res_max;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	ee07 3a90 	vmov	s15, r3
}
 8003b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <min>:

// funcion minimo
float min(float a, float b){
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003ba6:	edc7 0a00 	vstr	s1, [r7]
	float res_min;
	if(a>b || a == b)
 8003baa:	ed97 7a01 	vldr	s14, [r7, #4]
 8003bae:	edd7 7a00 	vldr	s15, [r7]
 8003bb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bba:	dc08      	bgt.n	8003bce <min+0x32>
 8003bbc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003bc0:	edd7 7a00 	vldr	s15, [r7]
 8003bc4:	eeb4 7a67 	vcmp.f32	s14, s15
 8003bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bcc:	d101      	bne.n	8003bd2 <min+0x36>
		res_min = b;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]
	if ( b > a)
 8003bd2:	ed97 7a00 	vldr	s14, [r7]
 8003bd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	dd01      	ble.n	8003be8 <min+0x4c>
		res_min = a;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60fb      	str	r3, [r7, #12]
	return res_min;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	ee07 3a90 	vmov	s15, r3
}
 8003bee:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	0000      	movs	r0, r0
	...

08003c00 <gaussmf>:

float gaussmf(float x, float sigma, float media){
 8003c00:	b5b0      	push	{r4, r5, r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	ed87 0a03 	vstr	s0, [r7, #12]
 8003c0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003c0e:	ed87 1a01 	vstr	s2, [r7, #4]
// standard deviation: sigma, and mean: m,
	float y , value;
	value = -pow(x-media,2)/(2*pow(sigma,2));
 8003c12:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c16:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c1e:	ee17 0a90 	vmov	r0, s15
 8003c22:	f7fc fcb9 	bl	8000598 <__aeabi_f2d>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8003cb0 <gaussmf+0xb0>
 8003c2e:	ec43 2b10 	vmov	d0, r2, r3
 8003c32:	f00b fc01 	bl	800f438 <pow>
 8003c36:	ec53 2b10 	vmov	r2, r3, d0
 8003c3a:	4614      	mov	r4, r2
 8003c3c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003c40:	68b8      	ldr	r0, [r7, #8]
 8003c42:	f7fc fca9 	bl	8000598 <__aeabi_f2d>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8003cb0 <gaussmf+0xb0>
 8003c4e:	ec43 2b10 	vmov	d0, r2, r3
 8003c52:	f00b fbf1 	bl	800f438 <pow>
 8003c56:	ec51 0b10 	vmov	r0, r1, d0
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	f7fc fb3d 	bl	80002dc <__adddf3>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4620      	mov	r0, r4
 8003c68:	4629      	mov	r1, r5
 8003c6a:	f7fc fe17 	bl	800089c <__aeabi_ddiv>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4610      	mov	r0, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	f7fc ffbf 	bl	8000bf8 <__aeabi_d2f>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	617b      	str	r3, [r7, #20]
	y = exp(value);
 8003c7e:	6978      	ldr	r0, [r7, #20]
 8003c80:	f7fc fc8a 	bl	8000598 <__aeabi_f2d>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	ec43 2b10 	vmov	d0, r2, r3
 8003c8c:	f00b fb8c 	bl	800f3a8 <exp>
 8003c90:	ec53 2b10 	vmov	r2, r3, d0
 8003c94:	4610      	mov	r0, r2
 8003c96:	4619      	mov	r1, r3
 8003c98:	f7fc ffae 	bl	8000bf8 <__aeabi_d2f>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	613b      	str	r3, [r7, #16]
	return y ;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	ee07 3a90 	vmov	s15, r3
}
 8003ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bdb0      	pop	{r4, r5, r7, pc}
 8003cb0:	00000000 	.word	0x00000000
 8003cb4:	40000000 	.word	0x40000000

08003cb8 <trimf>:

float trimf(float x, float a, float b,float c){
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8003cc2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003cc6:	ed87 1a01 	vstr	s2, [r7, #4]
 8003cca:	edc7 1a00 	vstr	s3, [r7]
	float y ;
	 y = max(min((x-a)/(b-a),(c-x)/(c-b)),0);
 8003cce:	ed97 7a03 	vldr	s14, [r7, #12]
 8003cd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cda:	edd7 6a01 	vldr	s13, [r7, #4]
 8003cde:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ce2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ce6:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8003cea:	ed97 7a00 	vldr	s14, [r7]
 8003cee:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cf6:	edd7 6a00 	vldr	s13, [r7]
 8003cfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cfe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d02:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d06:	eef0 0a66 	vmov.f32	s1, s13
 8003d0a:	eeb0 0a46 	vmov.f32	s0, s12
 8003d0e:	f7ff ff45 	bl	8003b9c <min>
 8003d12:	eef0 7a40 	vmov.f32	s15, s0
 8003d16:	eddf 0a08 	vldr	s1, [pc, #32]	; 8003d38 <trimf+0x80>
 8003d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1e:	f7ff ff0d 	bl	8003b3c <max>
 8003d22:	ed87 0a05 	vstr	s0, [r7, #20]
	return y ;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	ee07 3a90 	vmov	s15, r3
}
 8003d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	00000000 	.word	0x00000000

08003d3c <trapmf>:

float trapmf(float x, float a, float b,float c,float d){
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	ed2d 8b02 	vpush	{d8}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	ed87 0a05 	vstr	s0, [r7, #20]
 8003d4a:	edc7 0a04 	vstr	s1, [r7, #16]
 8003d4e:	ed87 1a03 	vstr	s2, [r7, #12]
 8003d52:	edc7 1a02 	vstr	s3, [r7, #8]
 8003d56:	ed87 2a01 	vstr	s4, [r7, #4]
	float y ;
	 y = max(min((x-a)/(b-a),min(1,(d-x)/(d-c))),0);
 8003d5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d66:	edd7 6a03 	vldr	s13, [r7, #12]
 8003d6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d72:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003d76:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d82:	edd7 6a01 	vldr	s13, [r7, #4]
 8003d86:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003d8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d92:	eef0 0a66 	vmov.f32	s1, s13
 8003d96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003d9a:	f7ff feff 	bl	8003b9c <min>
 8003d9e:	eef0 7a40 	vmov.f32	s15, s0
 8003da2:	eef0 0a67 	vmov.f32	s1, s15
 8003da6:	eeb0 0a48 	vmov.f32	s0, s16
 8003daa:	f7ff fef7 	bl	8003b9c <min>
 8003dae:	eef0 7a40 	vmov.f32	s15, s0
 8003db2:	eddf 0a09 	vldr	s1, [pc, #36]	; 8003dd8 <trapmf+0x9c>
 8003db6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dba:	f7ff febf 	bl	8003b3c <max>
 8003dbe:	ed87 0a07 	vstr	s0, [r7, #28]
	return y ;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	ee07 3a90 	vmov	s15, r3
}
 8003dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dcc:	3720      	adds	r7, #32
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	ecbd 8b02 	vpop	{d8}
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	00000000 	.word	0x00000000

08003ddc <find_index>:

//encuentra la posicion de un elemento en un vector ordenado;
int find_index(float x, float inicio, float paso){
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	ed87 0a03 	vstr	s0, [r7, #12]
 8003de6:	edc7 0a02 	vstr	s1, [r7, #8]
 8003dea:	ed87 1a01 	vstr	s2, [r7, #4]
	int index;
	index = (x-inicio)/paso + 0.5;
 8003dee:	ed97 7a03 	vldr	s14, [r7, #12]
 8003df2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003df6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dfe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e02:	ee16 0a90 	vmov	r0, s13
 8003e06:	f7fc fbc7 	bl	8000598 <__aeabi_f2d>
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <find_index+0x68>)
 8003e10:	f7fc fa64 	bl	80002dc <__adddf3>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4610      	mov	r0, r2
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	f7fc fec4 	bl	8000ba8 <__aeabi_d2iz>
 8003e20:	4603      	mov	r3, r0
 8003e22:	617b      	str	r3, [r7, #20]
	if (index > n_max_e-1)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2bc8      	cmp	r3, #200	; 0xc8
 8003e28:	dd02      	ble.n	8003e30 <find_index+0x54>
		index = n_max_e-1;
 8003e2a:	23c8      	movs	r3, #200	; 0xc8
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	e004      	b.n	8003e3a <find_index+0x5e>
	else if (index < 0)
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	da01      	bge.n	8003e3a <find_index+0x5e>
		index = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
	return index;
 8003e3a:	697b      	ldr	r3, [r7, #20]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	3fe00000 	.word	0x3fe00000

08003e48 <Reglas_str2num>:

void Reglas_str2num(int *v1,int *v2, int i){
 8003e48:	b480      	push	{r7}
 8003e4a:	b089      	sub	sp, #36	; 0x24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
	int n = 0, cont1 = 0, cont2 = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
	while (fuzzy.reglas[i][n] != ','){
 8003e60:	e023      	b.n	8003eaa <Reglas_str2num+0x62>
		if (fuzzy.reglas[i][n] != ' '){
 8003e62:	4a3a      	ldr	r2, [pc, #232]	; (8003f4c <Reglas_str2num+0x104>)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003e6a:	3314      	adds	r3, #20
 8003e6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	4413      	add	r3, r2
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d014      	beq.n	8003ea4 <Reglas_str2num+0x5c>
			*(v1+cont1) = fuzzy.reglas[i][n] - '0'-1;
 8003e7a:	4a34      	ldr	r2, [pc, #208]	; (8003f4c <Reglas_str2num+0x104>)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003e82:	3314      	adds	r3, #20
 8003e84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f1a1 0231 	sub.w	r2, r1, #49	; 0x31
 8003e9c:	601a      	str	r2, [r3, #0]
			cont1++;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	61bb      	str	r3, [r7, #24]
		}
		n++;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
	while (fuzzy.reglas[i][n] != ','){
 8003eaa:	4a28      	ldr	r2, [pc, #160]	; (8003f4c <Reglas_str2num+0x104>)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003eb2:	3314      	adds	r3, #20
 8003eb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	4413      	add	r3, r2
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b2c      	cmp	r3, #44	; 0x2c
 8003ec0:	d1cf      	bne.n	8003e62 <Reglas_str2num+0x1a>
	}
	while (fuzzy.reglas[i][n] != '\0'){
 8003ec2:	e02f      	b.n	8003f24 <Reglas_str2num+0xdc>
		if (fuzzy.reglas[i][n] != ' ' && fuzzy.reglas[i][n] != ','){
 8003ec4:	4a21      	ldr	r2, [pc, #132]	; (8003f4c <Reglas_str2num+0x104>)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003ecc:	3314      	adds	r3, #20
 8003ece:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d020      	beq.n	8003f1e <Reglas_str2num+0xd6>
 8003edc:	4a1b      	ldr	r2, [pc, #108]	; (8003f4c <Reglas_str2num+0x104>)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003ee4:	3314      	adds	r3, #20
 8003ee6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b2c      	cmp	r3, #44	; 0x2c
 8003ef2:	d014      	beq.n	8003f1e <Reglas_str2num+0xd6>
			*(v2+cont2) = fuzzy.reglas[i][n] - '0'-1;
 8003ef4:	4a15      	ldr	r2, [pc, #84]	; (8003f4c <Reglas_str2num+0x104>)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003efc:	3314      	adds	r3, #20
 8003efe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4413      	add	r3, r2
 8003f12:	f1a1 0231 	sub.w	r2, r1, #49	; 0x31
 8003f16:	601a      	str	r2, [r3, #0]
			cont2++;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	617b      	str	r3, [r7, #20]
		}
	n++;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	3301      	adds	r3, #1
 8003f22:	61fb      	str	r3, [r7, #28]
	while (fuzzy.reglas[i][n] != '\0'){
 8003f24:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <Reglas_str2num+0x104>)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003f2c:	3314      	adds	r3, #20
 8003f2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	4413      	add	r3, r2
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1c3      	bne.n	8003ec4 <Reglas_str2num+0x7c>
	}
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	3724      	adds	r7, #36	; 0x24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	200001fc 	.word	0x200001fc

08003f50 <fuzz>:


float fuzz(int n_entradas, int selec_MFin[n_entradas], int index_in[n_entradas]){
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
	float fuzzy_value;
    for ( int k = 0 ;k <n_entradas; ++k){
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	e03a      	b.n	8003fd8 <fuzz+0x88>
    	if (k == 0){
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d116      	bne.n	8003f96 <fuzz+0x46>
    		fuzzy_value = *(*(fuzzy.MFin[k]+selec_MFin[k])+ index_in[k]);
 8003f68:	4a21      	ldr	r2, [pc, #132]	; (8003ff0 <fuzz+0xa0>)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	330a      	adds	r3, #10
 8003f6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	440b      	add	r3, r1
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	440b      	add	r3, r1
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e01d      	b.n	8003fd2 <fuzz+0x82>
    	}
    	else{
    		fuzzy_value = min(fuzzy_value,*(*(fuzzy.MFin[k]+(selec_MFin[k]))+ index_in[k]));
 8003f96:	4a16      	ldr	r2, [pc, #88]	; (8003ff0 <fuzz+0xa0>)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	330a      	adds	r3, #10
 8003f9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	440b      	add	r3, r1
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	440b      	add	r3, r1
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	edd3 7a00 	vldr	s15, [r3]
 8003fc2:	eef0 0a67 	vmov.f32	s1, s15
 8003fc6:	ed97 0a05 	vldr	s0, [r7, #20]
 8003fca:	f7ff fde7 	bl	8003b9c <min>
 8003fce:	ed87 0a05 	vstr	s0, [r7, #20]
    for ( int k = 0 ;k <n_entradas; ++k){
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	dbc0      	blt.n	8003f62 <fuzz+0x12>
    	}
    }
	return fuzzy_value;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	ee07 3a90 	vmov	s15, r3
}
 8003fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	200001fc 	.word	0x200001fc

08003ff4 <defuzz>:

float defuzz(float *x, float *mf,int len){
 8003ff4:	b480      	push	{r7}
 8003ff6:	b089      	sub	sp, #36	; 0x24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
	float out;
	float suma = 0;
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
	float Area = 0;
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	61bb      	str	r3, [r7, #24]
	for (int i = 0;i<len;++i){
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	e022      	b.n	8004058 <defuzz+0x64>
		suma = suma + (*(x+i))*(*(mf+i));
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	ed93 7a00 	vldr	s14, [r3]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	4413      	add	r3, r2
 8004026:	edd3 7a00 	vldr	s15, [r3]
 800402a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004036:	edc7 7a07 	vstr	s15, [r7, #28]
		Area = Area + (*(mf+i));
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	4413      	add	r3, r2
 8004042:	edd3 7a00 	vldr	s15, [r3]
 8004046:	ed97 7a06 	vldr	s14, [r7, #24]
 800404a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800404e:	edc7 7a06 	vstr	s15, [r7, #24]
	for (int i = 0;i<len;++i){
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	3301      	adds	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	429a      	cmp	r2, r3
 800405e:	dbd8      	blt.n	8004012 <defuzz+0x1e>
	}
	out = suma/Area;
 8004060:	edd7 6a07 	vldr	s13, [r7, #28]
 8004064:	ed97 7a06 	vldr	s14, [r7, #24]
 8004068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800406c:	edc7 7a04 	vstr	s15, [r7, #16]
	return out;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	ee07 3a90 	vmov	s15, r3
}
 8004076:	eeb0 0a67 	vmov.f32	s0, s15
 800407a:	3724      	adds	r7, #36	; 0x24
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <serial_printf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void serial_printf(char *str)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart3, (uint8_t *) str, strlen(str));
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7fc f8c7 	bl	8000220 <strlen>
 8004092:	4603      	mov	r3, r0
 8004094:	b29b      	uxth	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4803      	ldr	r0, [pc, #12]	; (80040a8 <serial_printf+0x24>)
 800409c:	f006 fede 	bl	800ae5c <HAL_UART_Transmit_DMA>
	//HAL_Delay(100);
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	200047a0 	.word	0x200047a0

080040ac <HAL_Delay_us>:
// Delay microseconds;
void HAL_Delay_us(uint16_t Delay)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80040b6:	4b09      	ldr	r3, [pc, #36]	; (80040dc <HAL_Delay_us+0x30>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2200      	movs	r2, #0
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < Delay);
 80040be:	bf00      	nop
 80040c0:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_Delay_us+0x30>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d3f9      	bcc.n	80040c0 <HAL_Delay_us+0x14>
}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20004758 	.word	0x20004758

080040e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040e4:	b0b6      	sub	sp, #216	; 0xd8
 80040e6:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE BEGIN 1 */
  char tx_buffer[52] = {0};
 80040e8:	2300      	movs	r3, #0
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040f0:	2230      	movs	r2, #48	; 0x30
 80040f2:	2100      	movs	r1, #0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f008 fa29 	bl	800c54c <memset>
  int select_algorithm;
  int iter = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  int Ts_ms = 1000*Ts;
 8004100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004104:	67fb      	str	r3, [r7, #124]	; 0x7c
  int time_on;
  int time_giro;
  int retardo = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  int vaciar;
  int M1 = 1;
 800410c:	2301      	movs	r3, #1
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
  int M2 = 1;
 8004110:	2301      	movs	r3, #1
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
  int sum_h1 = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  int sum_h2 = 0;
 800411a:	2300      	movs	r3, #0
 800411c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  float h1=0;
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  float h2=0;
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  float H1 = 0;
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	67bb      	str	r3, [r7, #120]	; 0x78
  float H2 = 0;
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  float interval[2] = {0,1};
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004148:	623b      	str	r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800414a:	f003 fb13 	bl	8007774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800414e:	f000 fe91 	bl	8004e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004152:	f001 f86f 	bl	8005234 <MX_GPIO_Init>
  MX_DMA_Init();
 8004156:	f001 f845 	bl	80051e4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800415a:	f000 ffe9 	bl	8005130 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800415e:	f001 f811 	bl	8005184 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8004162:	f000 ff69 	bl	8005038 <MX_TIM3_Init>
  MX_TIM2_Init();
 8004166:	f000 fef1 	bl	8004f4c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800416a:	2100      	movs	r1, #0
 800416c:	489e      	ldr	r0, [pc, #632]	; (80043e8 <main+0x308>)
 800416e:	f005 fc9b 	bl	8009aa8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8004172:	2104      	movs	r1, #4
 8004174:	489c      	ldr	r0, [pc, #624]	; (80043e8 <main+0x308>)
 8004176:	f005 fc97 	bl	8009aa8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800417a:	2100      	movs	r1, #0
 800417c:	489b      	ldr	r0, [pc, #620]	; (80043ec <main+0x30c>)
 800417e:	f005 fb71 	bl	8009864 <HAL_TIM_PWM_Start>

  PID_Init(&pid1,1);
 8004182:	2101      	movs	r1, #1
 8004184:	489a      	ldr	r0, [pc, #616]	; (80043f0 <main+0x310>)
 8004186:	f002 fa97 	bl	80066b8 <PID_Init>
  PID_Init(&pid2,2);
 800418a:	2102      	movs	r1, #2
 800418c:	4899      	ldr	r0, [pc, #612]	; (80043f4 <main+0x314>)
 800418e:	f002 fa93 	bl	80066b8 <PID_Init>
  PID_Init(&pid3,3);
 8004192:	2103      	movs	r1, #3
 8004194:	4898      	ldr	r0, [pc, #608]	; (80043f8 <main+0x318>)
 8004196:	f002 fa8f 	bl	80066b8 <PID_Init>

  FGS_Init(&fgs1, 1);
 800419a:	2101      	movs	r1, #1
 800419c:	4897      	ldr	r0, [pc, #604]	; (80043fc <main+0x31c>)
 800419e:	f7fe fd37 	bl	8002c10 <FGS_Init>
  FGS_Init(&fgs2, 2);
 80041a2:	2102      	movs	r1, #2
 80041a4:	4896      	ldr	r0, [pc, #600]	; (8004400 <main+0x320>)
 80041a6:	f7fe fd33 	bl	8002c10 <FGS_Init>
  FGS_Init(&fgs3, 3);
 80041aa:	2103      	movs	r1, #3
 80041ac:	4895      	ldr	r0, [pc, #596]	; (8004404 <main+0x324>)
 80041ae:	f7fe fd2f 	bl	8002c10 <FGS_Init>

  SA_Init(&sa1,1);
 80041b2:	2101      	movs	r1, #1
 80041b4:	4894      	ldr	r0, [pc, #592]	; (8004408 <main+0x328>)
 80041b6:	f002 fcd3 	bl	8006b60 <SA_Init>
  SA_Init(&sa2,2);
 80041ba:	2102      	movs	r1, #2
 80041bc:	4893      	ldr	r0, [pc, #588]	; (800440c <main+0x32c>)
 80041be:	f002 fccf 	bl	8006b60 <SA_Init>
  SA_Init(&sa3,3);
 80041c2:	2103      	movs	r1, #3
 80041c4:	4892      	ldr	r0, [pc, #584]	; (8004410 <main+0x330>)
 80041c6:	f002 fccb 	bl	8006b60 <SA_Init>

  Astar_Init(&as1, 1);
 80041ca:	2101      	movs	r1, #1
 80041cc:	4891      	ldr	r0, [pc, #580]	; (8004414 <main+0x334>)
 80041ce:	f7fc fee7 	bl	8000fa0 <Astar_Init>
  Astar_Init(&as2, 2);
 80041d2:	2102      	movs	r1, #2
 80041d4:	4890      	ldr	r0, [pc, #576]	; (8004418 <main+0x338>)
 80041d6:	f7fc fee3 	bl	8000fa0 <Astar_Init>
  Astar_Init(&as3, 3);
 80041da:	2103      	movs	r1, #3
 80041dc:	488f      	ldr	r0, [pc, #572]	; (800441c <main+0x33c>)
 80041de:	f7fc fedf 	bl	8000fa0 <Astar_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  pid1.r = 0.0;
 80041e2:	4b83      	ldr	r3, [pc, #524]	; (80043f0 <main+0x310>)
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
  pid3.r = 0.0;
 80041ea:	4b83      	ldr	r3, [pc, #524]	; (80043f8 <main+0x318>)
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
  pid2.r = pid3.r - pid1.r;
 80041f2:	4b81      	ldr	r3, [pc, #516]	; (80043f8 <main+0x318>)
 80041f4:	ed93 7a00 	vldr	s14, [r3]
 80041f8:	4b7d      	ldr	r3, [pc, #500]	; (80043f0 <main+0x310>)
 80041fa:	edd3 7a00 	vldr	s15, [r3]
 80041fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004202:	4b7c      	ldr	r3, [pc, #496]	; (80043f4 <main+0x314>)
 8004204:	edc3 7a00 	vstr	s15, [r3]

  vaciar = 1;
 8004208:	2301      	movs	r3, #1
 800420a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  select_algorithm = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	677b      	str	r3, [r7, #116]	; 0x74

  float rbajo = 2;
 8004212:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004216:	673b      	str	r3, [r7, #112]	; 0x70
  float ralto = 5;
 8004218:	4b81      	ldr	r3, [pc, #516]	; (8004420 <main+0x340>)
 800421a:	66fb      	str	r3, [r7, #108]	; 0x6c
  float ralto2 = 8;
 800421c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004220:	66bb      	str	r3, [r7, #104]	; 0x68
  int espacio = 140;
 8004222:	238c      	movs	r3, #140	; 0x8c
 8004224:	667b      	str	r3, [r7, #100]	; 0x64


  while (1)
  {
	  sa1.r  = pid1.r ;			  sa2.r  = pid2.r ; 	  sa3.r  = pid3.r ;
 8004226:	4b72      	ldr	r3, [pc, #456]	; (80043f0 <main+0x310>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a77      	ldr	r2, [pc, #476]	; (8004408 <main+0x328>)
 800422c:	6493      	str	r3, [r2, #72]	; 0x48
 800422e:	4b71      	ldr	r3, [pc, #452]	; (80043f4 <main+0x314>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a76      	ldr	r2, [pc, #472]	; (800440c <main+0x32c>)
 8004234:	6493      	str	r3, [r2, #72]	; 0x48
 8004236:	4b70      	ldr	r3, [pc, #448]	; (80043f8 <main+0x318>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a75      	ldr	r2, [pc, #468]	; (8004410 <main+0x330>)
 800423c:	6493      	str	r3, [r2, #72]	; 0x48
	  as1.r =  pid1.r ;			  as2.r =  pid2.r ;	      as3.r =  pid3.r ;
 800423e:	4b6c      	ldr	r3, [pc, #432]	; (80043f0 <main+0x310>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a74      	ldr	r2, [pc, #464]	; (8004414 <main+0x334>)
 8004244:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004248:	4b6a      	ldr	r3, [pc, #424]	; (80043f4 <main+0x314>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a72      	ldr	r2, [pc, #456]	; (8004418 <main+0x338>)
 800424e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004252:	4b69      	ldr	r3, [pc, #420]	; (80043f8 <main+0x318>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a71      	ldr	r2, [pc, #452]	; (800441c <main+0x33c>)
 8004258:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	  if (iter == espacio*20 +20) {    pid1.r = ralto ;       pid3.r = 0 ;  }
	  if (iter == espacio*21 +20) {    pid1.r = rbajo;       pid3.r = 0;  }
	  if (iter == espacio*22 +20) {    pid1.r = ralto ;       pid3.r = 0 ;  }

*/
	  if (iter == 0)         	{    pid1.r = ralto2;		pid3.r = rbajo; }
 800425c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <main+0x190>
 8004264:	4a62      	ldr	r2, [pc, #392]	; (80043f0 <main+0x310>)
 8004266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	4a63      	ldr	r2, [pc, #396]	; (80043f8 <main+0x318>)
 800426c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800426e:	6013      	str	r3, [r2, #0]
	  if (iter == 20)  			{    pid1.r = ralto2 ;    pid3.r = ralto ; }
 8004270:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004274:	2b14      	cmp	r3, #20
 8004276:	d105      	bne.n	8004284 <main+0x1a4>
 8004278:	4a5d      	ldr	r2, [pc, #372]	; (80043f0 <main+0x310>)
 800427a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4a5e      	ldr	r2, [pc, #376]	; (80043f8 <main+0x318>)
 8004280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004282:	6013      	str	r3, [r2, #0]
	  if (iter == espacio +20)	 {    pid1.r = ralto2;      pid3.r = rbajo; }
 8004284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004286:	3314      	adds	r3, #20
 8004288:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800428c:	429a      	cmp	r2, r3
 800428e:	d105      	bne.n	800429c <main+0x1bc>
 8004290:	4a57      	ldr	r2, [pc, #348]	; (80043f0 <main+0x310>)
 8004292:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4a58      	ldr	r2, [pc, #352]	; (80043f8 <main+0x318>)
 8004298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800429a:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*2 +20) {    pid1.r = ralto2;      pid3.r = ralto ;  }
 800429c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800429e:	330a      	adds	r3, #10
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d105      	bne.n	80042b6 <main+0x1d6>
 80042aa:	4a51      	ldr	r2, [pc, #324]	; (80043f0 <main+0x310>)
 80042ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	4a51      	ldr	r2, [pc, #324]	; (80043f8 <main+0x318>)
 80042b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b4:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*3 + 20) {    pid1.r = ralto2;      pid3.r = rbajo; }
 80042b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80042b8:	4613      	mov	r3, r2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	4413      	add	r3, r2
 80042be:	3314      	adds	r3, #20
 80042c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d105      	bne.n	80042d4 <main+0x1f4>
 80042c8:	4a49      	ldr	r2, [pc, #292]	; (80043f0 <main+0x310>)
 80042ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4a4a      	ldr	r2, [pc, #296]	; (80043f8 <main+0x318>)
 80042d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042d2:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*4 +20) {    pid1.r = ralto2;       pid3.r = ralto ;  }
 80042d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042d6:	3305      	adds	r3, #5
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80042de:	429a      	cmp	r2, r3
 80042e0:	d105      	bne.n	80042ee <main+0x20e>
 80042e2:	4a43      	ldr	r2, [pc, #268]	; (80043f0 <main+0x310>)
 80042e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4a43      	ldr	r2, [pc, #268]	; (80043f8 <main+0x318>)
 80042ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ec:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*5 +20) {    pid1.r = ralto2;       pid3.r = rbajo;  }
 80042ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	3314      	adds	r3, #20
 80042f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d105      	bne.n	800430c <main+0x22c>
 8004300:	4a3b      	ldr	r2, [pc, #236]	; (80043f0 <main+0x310>)
 8004302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4a3c      	ldr	r2, [pc, #240]	; (80043f8 <main+0x318>)
 8004308:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800430a:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*6 +20) {    pid1.r = ralto2;       pid3.r = ralto ;  }
 800430c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800430e:	4613      	mov	r3, r2
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	4413      	add	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	3314      	adds	r3, #20
 8004318:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800431c:	429a      	cmp	r2, r3
 800431e:	d105      	bne.n	800432c <main+0x24c>
 8004320:	4a33      	ldr	r2, [pc, #204]	; (80043f0 <main+0x310>)
 8004322:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4a34      	ldr	r2, [pc, #208]	; (80043f8 <main+0x318>)
 8004328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800432a:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*7 +20) {    pid1.r = ralto2;       pid3.r = rbajo;  }
 800432c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	3314      	adds	r3, #20
 8004336:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800433a:	429a      	cmp	r2, r3
 800433c:	d105      	bne.n	800434a <main+0x26a>
 800433e:	4a2c      	ldr	r2, [pc, #176]	; (80043f0 <main+0x310>)
 8004340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	4a2c      	ldr	r2, [pc, #176]	; (80043f8 <main+0x318>)
 8004346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004348:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*8 +20) {    pid1.r = ralto2;       pid3.r = ralto ;  }
 800434a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	3314      	adds	r3, #20
 8004350:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004354:	429a      	cmp	r2, r3
 8004356:	d105      	bne.n	8004364 <main+0x284>
 8004358:	4a25      	ldr	r2, [pc, #148]	; (80043f0 <main+0x310>)
 800435a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	4a26      	ldr	r2, [pc, #152]	; (80043f8 <main+0x318>)
 8004360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004362:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*9 +20) {    pid1.r = ralto2;       pid3.r = rbajo;  }
 8004364:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004366:	4613      	mov	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4413      	add	r3, r2
 800436c:	3314      	adds	r3, #20
 800436e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004372:	429a      	cmp	r2, r3
 8004374:	d105      	bne.n	8004382 <main+0x2a2>
 8004376:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <main+0x310>)
 8004378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <main+0x318>)
 800437e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004380:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*10 +20) {    pid1.r = ralto2;       pid3.r = ralto ;  }
 8004382:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	3314      	adds	r3, #20
 800438e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004392:	429a      	cmp	r2, r3
 8004394:	d105      	bne.n	80043a2 <main+0x2c2>
 8004396:	4a16      	ldr	r2, [pc, #88]	; (80043f0 <main+0x310>)
 8004398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	4a16      	ldr	r2, [pc, #88]	; (80043f8 <main+0x318>)
 800439e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a0:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*11 +20) {    pid1.r = ralto2;       pid3.r = rbajo;  }
 80043a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	4413      	add	r3, r2
 80043ae:	3314      	adds	r3, #20
 80043b0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d105      	bne.n	80043c4 <main+0x2e4>
 80043b8:	4a0d      	ldr	r2, [pc, #52]	; (80043f0 <main+0x310>)
 80043ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	4a0e      	ldr	r2, [pc, #56]	; (80043f8 <main+0x318>)
 80043c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043c2:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*12 +20) {    pid1.r = ralto2;       pid3.r = ralto ;  }
 80043c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	3314      	adds	r3, #20
 80043d0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d125      	bne.n	8004424 <main+0x344>
 80043d8:	4a05      	ldr	r2, [pc, #20]	; (80043f0 <main+0x310>)
 80043da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4a06      	ldr	r2, [pc, #24]	; (80043f8 <main+0x318>)
 80043e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	e01e      	b.n	8004424 <main+0x344>
 80043e6:	bf00      	nop
 80043e8:	20004758 	.word	0x20004758
 80043ec:	20004710 	.word	0x20004710
 80043f0:	20004dd4 	.word	0x20004dd4
 80043f4:	20004e04 	.word	0x20004e04
 80043f8:	20004e34 	.word	0x20004e34
 80043fc:	20004e68 	.word	0x20004e68
 8004400:	20004e98 	.word	0x20004e98
 8004404:	20004ec8 	.word	0x20004ec8
 8004408:	20004ef8 	.word	0x20004ef8
 800440c:	20004f68 	.word	0x20004f68
 8004410:	20004fd8 	.word	0x20004fd8
 8004414:	20005048 	.word	0x20005048
 8004418:	200050f0 	.word	0x200050f0
 800441c:	20005198 	.word	0x20005198
 8004420:	40a00000 	.word	0x40a00000
	  if (iter == espacio*13 +20) {    pid1.r = ralto2;       pid3.r = rbajo;  }
 8004424:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	3314      	adds	r3, #20
 8004432:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004436:	429a      	cmp	r2, r3
 8004438:	d105      	bne.n	8004446 <main+0x366>
 800443a:	4a84      	ldr	r2, [pc, #528]	; (800464c <main+0x56c>)
 800443c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4a83      	ldr	r2, [pc, #524]	; (8004650 <main+0x570>)
 8004442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004444:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*14 +20) {    pid1.r = ralto2;       pid3.r = ralto ;  }
 8004446:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	3314      	adds	r3, #20
 8004452:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004456:	429a      	cmp	r2, r3
 8004458:	d105      	bne.n	8004466 <main+0x386>
 800445a:	4a7c      	ldr	r2, [pc, #496]	; (800464c <main+0x56c>)
 800445c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800445e:	6013      	str	r3, [r2, #0]
 8004460:	4a7b      	ldr	r2, [pc, #492]	; (8004650 <main+0x570>)
 8004462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004464:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*15 +20) {    pid1.r = ralto2;       pid3.r = rbajo;  }
 8004466:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004468:	4613      	mov	r3, r2
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	3314      	adds	r3, #20
 8004470:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004474:	429a      	cmp	r2, r3
 8004476:	d105      	bne.n	8004484 <main+0x3a4>
 8004478:	4a74      	ldr	r2, [pc, #464]	; (800464c <main+0x56c>)
 800447a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	4a74      	ldr	r2, [pc, #464]	; (8004650 <main+0x570>)
 8004480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004482:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*16 +20) {    pid1.r = ralto2;       pid3.r = ralto ;  }
 8004484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	3314      	adds	r3, #20
 800448a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800448e:	429a      	cmp	r2, r3
 8004490:	d105      	bne.n	800449e <main+0x3be>
 8004492:	4a6e      	ldr	r2, [pc, #440]	; (800464c <main+0x56c>)
 8004494:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	4a6d      	ldr	r2, [pc, #436]	; (8004650 <main+0x570>)
 800449a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449c:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*17 +20) {    pid1.r = ralto2;       pid3.r = rbajo;  }
 800449e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80044a0:	4613      	mov	r3, r2
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	4413      	add	r3, r2
 80044a6:	3314      	adds	r3, #20
 80044a8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d105      	bne.n	80044bc <main+0x3dc>
 80044b0:	4a66      	ldr	r2, [pc, #408]	; (800464c <main+0x56c>)
 80044b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4a66      	ldr	r2, [pc, #408]	; (8004650 <main+0x570>)
 80044b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044ba:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*18 +20) {    pid1.r = ralto2;       pid3.r = ralto ;  }
 80044bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4413      	add	r3, r2
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	3314      	adds	r3, #20
 80044c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d105      	bne.n	80044dc <main+0x3fc>
 80044d0:	4a5e      	ldr	r2, [pc, #376]	; (800464c <main+0x56c>)
 80044d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4a5e      	ldr	r2, [pc, #376]	; (8004650 <main+0x570>)
 80044d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044da:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*19 +20) {    pid1.r = ralto2;       pid3.r = rbajo;  }
 80044dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4413      	add	r3, r2
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4413      	add	r3, r2
 80044e8:	3314      	adds	r3, #20
 80044ea:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d105      	bne.n	80044fe <main+0x41e>
 80044f2:	4a56      	ldr	r2, [pc, #344]	; (800464c <main+0x56c>)
 80044f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	4a55      	ldr	r2, [pc, #340]	; (8004650 <main+0x570>)
 80044fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044fc:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*20 +20) {    pid1.r = ralto2;       pid3.r = ralto ;  }
 80044fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	461a      	mov	r2, r3
 800450c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004510:	4293      	cmp	r3, r2
 8004512:	d105      	bne.n	8004520 <main+0x440>
 8004514:	4a4d      	ldr	r2, [pc, #308]	; (800464c <main+0x56c>)
 8004516:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4a4d      	ldr	r2, [pc, #308]	; (8004650 <main+0x570>)
 800451c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451e:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*21 +20) {    pid1.r = ralto2;       pid3.r = rbajo;  }
 8004520:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004522:	4613      	mov	r3, r2
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	4413      	add	r3, r2
 8004528:	00da      	lsls	r2, r3, #3
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	3314      	adds	r3, #20
 800452e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004532:	429a      	cmp	r2, r3
 8004534:	d105      	bne.n	8004542 <main+0x462>
 8004536:	4a45      	ldr	r2, [pc, #276]	; (800464c <main+0x56c>)
 8004538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	4a44      	ldr	r2, [pc, #272]	; (8004650 <main+0x570>)
 800453e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004540:	6013      	str	r3, [r2, #0]
	  if (iter == espacio*22 +20) {    pid1.r = ralto2;       pid3.r = ralto ;  }
 8004542:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004544:	2216      	movs	r2, #22
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	3314      	adds	r3, #20
 800454c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004550:	429a      	cmp	r2, r3
 8004552:	d105      	bne.n	8004560 <main+0x480>
 8004554:	4a3d      	ldr	r2, [pc, #244]	; (800464c <main+0x56c>)
 8004556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4a3d      	ldr	r2, [pc, #244]	; (8004650 <main+0x570>)
 800455c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455e:	6013      	str	r3, [r2, #0]

	  pid2.r = pid3.r-pid1.r;
 8004560:	4b3b      	ldr	r3, [pc, #236]	; (8004650 <main+0x570>)
 8004562:	ed93 7a00 	vldr	s14, [r3]
 8004566:	4b39      	ldr	r3, [pc, #228]	; (800464c <main+0x56c>)
 8004568:	edd3 7a00 	vldr	s15, [r3]
 800456c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004570:	4b38      	ldr	r3, [pc, #224]	; (8004654 <main+0x574>)
 8004572:	edc3 7a00 	vstr	s15, [r3]

	  if (iter == 20){sa1.iniciar = 1; sa2.iniciar = 1; sa3.iniciar = 1;}
 8004576:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800457a:	2b14      	cmp	r3, #20
 800457c:	d108      	bne.n	8004590 <main+0x4b0>
 800457e:	4b36      	ldr	r3, [pc, #216]	; (8004658 <main+0x578>)
 8004580:	2201      	movs	r2, #1
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	4b35      	ldr	r3, [pc, #212]	; (800465c <main+0x57c>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	4b35      	ldr	r3, [pc, #212]	; (8004660 <main+0x580>)
 800458c:	2201      	movs	r2, #1
 800458e:	601a      	str	r2, [r3, #0]

	  if ( ( (fabs(sa3.r - pid3.r)>0) || (fabs(as3.r - pid3.r)>0) ) && iter != 20 && iter != 0)
 8004590:	4b33      	ldr	r3, [pc, #204]	; (8004660 <main+0x580>)
 8004592:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004596:	4b2e      	ldr	r3, [pc, #184]	; (8004650 <main+0x570>)
 8004598:	edd3 7a00 	vldr	s15, [r3]
 800459c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045a0:	eef0 7ae7 	vabs.f32	s15, s15
 80045a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ac:	dc0e      	bgt.n	80045cc <main+0x4ec>
 80045ae:	4b2d      	ldr	r3, [pc, #180]	; (8004664 <main+0x584>)
 80045b0:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80045b4:	4b26      	ldr	r3, [pc, #152]	; (8004650 <main+0x570>)
 80045b6:	edd3 7a00 	vldr	s15, [r3]
 80045ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045be:	eef0 7ae7 	vabs.f32	s15, s15
 80045c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ca:	dd19      	ble.n	8004600 <main+0x520>
 80045cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045d0:	2b14      	cmp	r3, #20
 80045d2:	d015      	beq.n	8004600 <main+0x520>
 80045d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d011      	beq.n	8004600 <main+0x520>
	  {
		  /*
		  sa1.r  = ralto;			  sa2.r  = 0 ; 	  sa3.r  = ralto;
		  as1.r =  ralto;			  as2.r =  0 ;	  as3.r =  ralto;
		  */
		  sa1.enable = 1;	sa2.enable = 1;		sa3.enable = 1;
 80045dc:	4b1e      	ldr	r3, [pc, #120]	; (8004658 <main+0x578>)
 80045de:	2201      	movs	r2, #1
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	4b1e      	ldr	r3, [pc, #120]	; (800465c <main+0x57c>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	605a      	str	r2, [r3, #4]
 80045e8:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <main+0x580>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	605a      	str	r2, [r3, #4]
		  as1.enable = 1;	as2.enable = 1;		as3.enable = 1;
 80045ee:	4b1e      	ldr	r3, [pc, #120]	; (8004668 <main+0x588>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	4b1d      	ldr	r3, [pc, #116]	; (800466c <main+0x58c>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <main+0x584>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
	  }

	  if ( vaciar == 1) {
 8004600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004604:	2b01      	cmp	r3, #1
 8004606:	f040 80e0 	bne.w	80047ca <main+0x6ea>
		  	htim2.Instance -> CCR1 = 0;
 800460a:	4b19      	ldr	r3, [pc, #100]	; (8004670 <main+0x590>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2200      	movs	r2, #0
 8004610:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(VALV3_ON_GPIO_Port, VALV3_ON_Pin,GPIO_PIN_SET);
 8004612:	2201      	movs	r2, #1
 8004614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004618:	4816      	ldr	r0, [pc, #88]	; (8004674 <main+0x594>)
 800461a:	f003 ffe9 	bl	80085f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VALV3_GPIO_Port, VALV3_Pin, GPIO_PIN_SET);
 800461e:	2201      	movs	r2, #1
 8004620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004624:	4814      	ldr	r0, [pc, #80]	; (8004678 <main+0x598>)
 8004626:	f003 ffe3 	bl	80085f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( BOMBA_GPIO_Port, BOMBA_Pin, GPIO_PIN_RESET);
 800462a:	2200      	movs	r2, #0
 800462c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004630:	4810      	ldr	r0, [pc, #64]	; (8004674 <main+0x594>)
 8004632:	f003 ffdd 	bl	80085f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VALV2_GPIO_Port, VALV2_Pin,GPIO_PIN_RESET);
 8004636:	2200      	movs	r2, #0
 8004638:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800463c:	480e      	ldr	r0, [pc, #56]	; (8004678 <main+0x598>)
 800463e:	f003 ffd7 	bl	80085f0 <HAL_GPIO_WritePin>
			int time_vaciar = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while (time_vaciar < 10000)
 8004648:	e0a9      	b.n	800479e <main+0x6be>
 800464a:	bf00      	nop
 800464c:	20004dd4 	.word	0x20004dd4
 8004650:	20004e34 	.word	0x20004e34
 8004654:	20004e04 	.word	0x20004e04
 8004658:	20004ef8 	.word	0x20004ef8
 800465c:	20004f68 	.word	0x20004f68
 8004660:	20004fd8 	.word	0x20004fd8
 8004664:	20005198 	.word	0x20005198
 8004668:	20005048 	.word	0x20005048
 800466c:	200050f0 	.word	0x200050f0
 8004670:	20004710 	.word	0x20004710
 8004674:	40021400 	.word	0x40021400
 8004678:	40021000 	.word	0x40021000
			{
				if (time_vaciar % 100 == 0)
 800467c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004680:	4bcb      	ldr	r3, [pc, #812]	; (80049b0 <main+0x8d0>)
 8004682:	fb83 1302 	smull	r1, r3, r3, r2
 8004686:	1159      	asrs	r1, r3, #5
 8004688:	17d3      	asrs	r3, r2, #31
 800468a:	1acb      	subs	r3, r1, r3
 800468c:	2164      	movs	r1, #100	; 0x64
 800468e:	fb01 f303 	mul.w	r3, r1, r3
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d17a      	bne.n	800478e <main+0x6ae>
				{
					h2 = 25.5 - HCSR04_Read(2);
 8004698:	2002      	movs	r0, #2
 800469a:	f001 f80d 	bl	80056b8 <HCSR04_Read>
 800469e:	ee10 3a10 	vmov	r3, s0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fb ff78 	bl	8000598 <__aeabi_f2d>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	f04f 0000 	mov.w	r0, #0
 80046b0:	49c0      	ldr	r1, [pc, #768]	; (80049b4 <main+0x8d4>)
 80046b2:	f7fb fe11 	bl	80002d8 <__aeabi_dsub>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4610      	mov	r0, r2
 80046bc:	4619      	mov	r1, r3
 80046be:	f7fc fa9b 	bl	8000bf8 <__aeabi_d2f>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					h1 = 25.3 - HCSR04_Read(1);
 80046c8:	2001      	movs	r0, #1
 80046ca:	f000 fff5 	bl	80056b8 <HCSR04_Read>
 80046ce:	ee10 3a10 	vmov	r3, s0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fb ff60 	bl	8000598 <__aeabi_f2d>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	a1b2      	add	r1, pc, #712	; (adr r1, 80049a8 <main+0x8c8>)
 80046de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046e2:	f7fb fdf9 	bl	80002d8 <__aeabi_dsub>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4610      	mov	r0, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	f7fc fa83 	bl	8000bf8 <__aeabi_d2f>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					sprintf(tx_buffer,"%0.2f %0.2f %0.1f %0.1f %0.1f %0.1f %0.1f\r\n",h1, h2, pid1.r, pid3.r,pid1.u, pid2.u,pid3.u);
 80046f8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80046fc:	f7fb ff4c 	bl	8000598 <__aeabi_f2d>
 8004700:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004704:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8004708:	f7fb ff46 	bl	8000598 <__aeabi_f2d>
 800470c:	4680      	mov	r8, r0
 800470e:	4689      	mov	r9, r1
 8004710:	4ba9      	ldr	r3, [pc, #676]	; (80049b8 <main+0x8d8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f7fb ff3f 	bl	8000598 <__aeabi_f2d>
 800471a:	4682      	mov	sl, r0
 800471c:	468b      	mov	fp, r1
 800471e:	4ba7      	ldr	r3, [pc, #668]	; (80049bc <main+0x8dc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f7fb ff38 	bl	8000598 <__aeabi_f2d>
 8004728:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800472c:	4ba2      	ldr	r3, [pc, #648]	; (80049b8 <main+0x8d8>)
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	4618      	mov	r0, r3
 8004732:	f7fb ff31 	bl	8000598 <__aeabi_f2d>
 8004736:	e9c7 0100 	strd	r0, r1, [r7]
 800473a:	4ba1      	ldr	r3, [pc, #644]	; (80049c0 <main+0x8e0>)
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fb ff2a 	bl	8000598 <__aeabi_f2d>
 8004744:	4604      	mov	r4, r0
 8004746:	460d      	mov	r5, r1
 8004748:	4b9c      	ldr	r3, [pc, #624]	; (80049bc <main+0x8dc>)
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	4618      	mov	r0, r3
 800474e:	f7fb ff23 	bl	8000598 <__aeabi_f2d>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800475a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800475e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004762:	ed97 7b00 	vldr	d7, [r7]
 8004766:	ed8d 7b06 	vstr	d7, [sp, #24]
 800476a:	ed97 7b02 	vldr	d7, [r7, #8]
 800476e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004772:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004776:	e9cd 8900 	strd	r8, r9, [sp]
 800477a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800477e:	4991      	ldr	r1, [pc, #580]	; (80049c4 <main+0x8e4>)
 8004780:	f008 fcb2 	bl	800d0e8 <siprintf>
					serial_printf(tx_buffer);
 8004784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fc7b 	bl	8004084 <serial_printf>
				}
				HAL_Delay(1);
 800478e:	2001      	movs	r0, #1
 8004790:	f003 f862 	bl	8007858 <HAL_Delay>
				time_vaciar++;
 8004794:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004798:	3301      	adds	r3, #1
 800479a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while (time_vaciar < 10000)
 800479e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80047a6:	4293      	cmp	r3, r2
 80047a8:	f77f af68 	ble.w	800467c <main+0x59c>
			}
			vaciar = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			sprintf(tx_buffer,"H1 H2  Ref1 Ref2/u1 u2 u3 \r\n");
 80047b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047b6:	4984      	ldr	r1, [pc, #528]	; (80049c8 <main+0x8e8>)
 80047b8:	4618      	mov	r0, r3
 80047ba:	f008 fc95 	bl	800d0e8 <siprintf>
			serial_printf(tx_buffer);
 80047be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fc5e 	bl	8004084 <serial_printf>
 80047c8:	e52d      	b.n	8004226 <main+0x146>
	  }
	  else
	  {
		 HAL_GPIO_WritePin( BOMBA_GPIO_Port, BOMBA_Pin, GPIO_PIN_SET);
 80047ca:	2201      	movs	r2, #1
 80047cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047d0:	487e      	ldr	r0, [pc, #504]	; (80049cc <main+0x8ec>)
 80047d2:	f003 ff0d 	bl	80085f0 <HAL_GPIO_WritePin>
		// Medicion de altura de los tanques
	  	h2 = 25.5 - HCSR04_Read(2);
 80047d6:	2002      	movs	r0, #2
 80047d8:	f000 ff6e 	bl	80056b8 <HCSR04_Read>
 80047dc:	ee10 3a10 	vmov	r3, s0
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fb fed9 	bl	8000598 <__aeabi_f2d>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	f04f 0000 	mov.w	r0, #0
 80047ee:	4971      	ldr	r1, [pc, #452]	; (80049b4 <main+0x8d4>)
 80047f0:	f7fb fd72 	bl	80002d8 <__aeabi_dsub>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	f7fc f9fc 	bl	8000bf8 <__aeabi_d2f>
 8004800:	4603      	mov	r3, r0
 8004802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	    h1 = 25.3 - HCSR04_Read(1);
 8004806:	2001      	movs	r0, #1
 8004808:	f000 ff56 	bl	80056b8 <HCSR04_Read>
 800480c:	ee10 3a10 	vmov	r3, s0
 8004810:	4618      	mov	r0, r3
 8004812:	f7fb fec1 	bl	8000598 <__aeabi_f2d>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	a163      	add	r1, pc, #396	; (adr r1, 80049a8 <main+0x8c8>)
 800481c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004820:	f7fb fd5a 	bl	80002d8 <__aeabi_dsub>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	f7fc f9e4 	bl	8000bf8 <__aeabi_d2f>
 8004830:	4603      	mov	r3, r0
 8004832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		HAL_Delay(5);
 8004836:	2005      	movs	r0, #5
 8004838:	f003 f80e 	bl	8007858 <HAL_Delay>
	    // Correcion de medicion de altura
	    h2 = limitar_altura(h2, &M2);
 800483c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004840:	4618      	mov	r0, r3
 8004842:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 8004846:	f002 f91f 	bl	8006a88 <limitar_altura>
 800484a:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
	    h1 = limitar_altura(h1, &M1);
 800484e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004852:	4618      	mov	r0, r3
 8004854:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8004858:	f002 f916 	bl	8006a88 <limitar_altura>
 800485c:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
	    // Promedio de medicion de altura.
	    if (M2!= 0){ h2 = (sum_h2+ h2)/M2;}
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	2b00      	cmp	r3, #0
 8004864:	d012      	beq.n	800488c <main+0x7ac>
 8004866:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004872:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004876:	ee77 6a27 	vadd.f32	s13, s14, s15
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	ee07 3a90 	vmov	s15, r3
 8004880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004888:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	    if (M1!= 0){ h1 = (sum_h1+ h1)/M1;}
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	2b00      	cmp	r3, #0
 8004890:	d012      	beq.n	80048b8 <main+0x7d8>
 8004892:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800489e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80048a2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	ee07 3a90 	vmov	s15, r3
 80048ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

	    // filtro del valor de las alturas
	    if (iter > 3)
 80048b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048bc:	2b03      	cmp	r3, #3
 80048be:	dd15      	ble.n	80048ec <main+0x80c>
	    {
			 // h1 = fabs(H1-h1) < 6 ? h1 : H1 ;
			  h2 = fabs(H2-h2) < 4 ? h2 : H2 ;
 80048c0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80048c4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80048c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048cc:	eef0 7ae7 	vabs.f32	s15, s15
 80048d0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80048d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048dc:	d502      	bpl.n	80048e4 <main+0x804>
 80048de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048e2:	e001      	b.n	80048e8 <main+0x808>
 80048e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	    }
	    // Guarda el valor de altura para graficar

	    H1 = h1;
 80048ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048f0:	67bb      	str	r3, [r7, #120]	; 0x78
	    H2 = h2;
 80048f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	    // redondeamos un 1 decimal
	    h1 = fround(h1,1);
 80048fa:	2001      	movs	r0, #1
 80048fc:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8004900:	f001 ffda 	bl	80068b8 <fround>
 8004904:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
	    h2 = fround(h2,1);
 8004908:	2001      	movs	r0, #1
 800490a:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 800490e:	f001 ffd3 	bl	80068b8 <fround>
 8004912:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
	  //--------------------------- PID -------------------------------------------------
		// ********* Salidas del sistema ********************
		pid1.y =  h1;   			// VALV1
 8004916:	4a28      	ldr	r2, [pc, #160]	; (80049b8 <main+0x8d8>)
 8004918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800491c:	61d3      	str	r3, [r2, #28]
		pid2.y =  fround(h2-h1,1);	// VALV2
 800491e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8004922:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800492a:	2001      	movs	r0, #1
 800492c:	eeb0 0a67 	vmov.f32	s0, s15
 8004930:	f001 ffc2 	bl	80068b8 <fround>
 8004934:	eef0 7a40 	vmov.f32	s15, s0
 8004938:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <main+0x8e0>)
 800493a:	edc3 7a07 	vstr	s15, [r3, #28]
		pid3.y =  h2  ;				// VALV3
 800493e:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <main+0x8dc>)
 8004940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004944:	61d3      	str	r3, [r2, #28]

		// ***********Señal de error entrada PID ************
		pid1.e[0] = pid1.r - pid1.y ;
 8004946:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <main+0x8d8>)
 8004948:	ed93 7a00 	vldr	s14, [r3]
 800494c:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <main+0x8d8>)
 800494e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004956:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <main+0x8d8>)
 8004958:	edc3 7a01 	vstr	s15, [r3, #4]
		pid2.e[0] = pid2.r - pid2.y ;
 800495c:	4b18      	ldr	r3, [pc, #96]	; (80049c0 <main+0x8e0>)
 800495e:	ed93 7a00 	vldr	s14, [r3]
 8004962:	4b17      	ldr	r3, [pc, #92]	; (80049c0 <main+0x8e0>)
 8004964:	edd3 7a07 	vldr	s15, [r3, #28]
 8004968:	ee77 7a67 	vsub.f32	s15, s14, s15
 800496c:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <main+0x8e0>)
 800496e:	edc3 7a01 	vstr	s15, [r3, #4]
		pid3.e[0] = pid3.r - pid3.y ;
 8004972:	4b12      	ldr	r3, [pc, #72]	; (80049bc <main+0x8dc>)
 8004974:	ed93 7a00 	vldr	s14, [r3]
 8004978:	4b10      	ldr	r3, [pc, #64]	; (80049bc <main+0x8dc>)
 800497a:	edd3 7a07 	vldr	s15, [r3, #28]
 800497e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004982:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <main+0x8dc>)
 8004984:	edc3 7a01 	vstr	s15, [r3, #4]

		switch (select_algorithm)
 8004988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800498a:	2b03      	cmp	r3, #3
 800498c:	d05b      	beq.n	8004a46 <main+0x966>
 800498e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004990:	2b03      	cmp	r3, #3
 8004992:	f300 808c 	bgt.w	8004aae <main+0x9ce>
 8004996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004998:	2b01      	cmp	r3, #1
 800499a:	d019      	beq.n	80049d0 <main+0x8f0>
 800499c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d023      	beq.n	80049ea <main+0x90a>
			Aestrella(&as1, &pid1,Ts);
			Aestrella(&as2, &pid2,Ts);
			Aestrella(&as3, &pid3,Ts);
			break;
		default:
			break;
 80049a2:	e084      	b.n	8004aae <main+0x9ce>
 80049a4:	f3af 8000 	nop.w
 80049a8:	cccccccd 	.word	0xcccccccd
 80049ac:	40394ccc 	.word	0x40394ccc
 80049b0:	51eb851f 	.word	0x51eb851f
 80049b4:	40398000 	.word	0x40398000
 80049b8:	20004dd4 	.word	0x20004dd4
 80049bc:	20004e34 	.word	0x20004e34
 80049c0:	20004e04 	.word	0x20004e04
 80049c4:	080111d8 	.word	0x080111d8
 80049c8:	08011204 	.word	0x08011204
 80049cc:	40021400 	.word	0x40021400
			FGS_control(&fgs1, &pid1);
 80049d0:	49b8      	ldr	r1, [pc, #736]	; (8004cb4 <main+0xbd4>)
 80049d2:	48b9      	ldr	r0, [pc, #740]	; (8004cb8 <main+0xbd8>)
 80049d4:	f7fe f9a8 	bl	8002d28 <FGS_control>
			FGS_control(&fgs2, &pid2);
 80049d8:	49b8      	ldr	r1, [pc, #736]	; (8004cbc <main+0xbdc>)
 80049da:	48b9      	ldr	r0, [pc, #740]	; (8004cc0 <main+0xbe0>)
 80049dc:	f7fe f9a4 	bl	8002d28 <FGS_control>
			FGS_control(&fgs3, &pid3);
 80049e0:	49b8      	ldr	r1, [pc, #736]	; (8004cc4 <main+0xbe4>)
 80049e2:	48b9      	ldr	r0, [pc, #740]	; (8004cc8 <main+0xbe8>)
 80049e4:	f7fe f9a0 	bl	8002d28 <FGS_control>
			break;
 80049e8:	e062      	b.n	8004ab0 <main+0x9d0>
			sa1.y[sa1.muestra_i]= pid1.y ;
 80049ea:	4bb8      	ldr	r3, [pc, #736]	; (8004ccc <main+0xbec>)
 80049ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ee:	4bb7      	ldr	r3, [pc, #732]	; (8004ccc <main+0xbec>)
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	4aaf      	ldr	r2, [pc, #700]	; (8004cb4 <main+0xbd4>)
 80049f8:	69d2      	ldr	r2, [r2, #28]
 80049fa:	601a      	str	r2, [r3, #0]
			sa3.y[sa3.muestra_i]= pid3.y ;
 80049fc:	4bb4      	ldr	r3, [pc, #720]	; (8004cd0 <main+0xbf0>)
 80049fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a00:	4bb3      	ldr	r3, [pc, #716]	; (8004cd0 <main+0xbf0>)
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	4aae      	ldr	r2, [pc, #696]	; (8004cc4 <main+0xbe4>)
 8004a0a:	69d2      	ldr	r2, [r2, #28]
 8004a0c:	601a      	str	r2, [r3, #0]
			sa2.y[sa2.muestra_i]= pid2.y ;
 8004a0e:	4bb1      	ldr	r3, [pc, #708]	; (8004cd4 <main+0xbf4>)
 8004a10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a12:	4bb0      	ldr	r3, [pc, #704]	; (8004cd4 <main+0xbf4>)
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	4aa8      	ldr	r2, [pc, #672]	; (8004cbc <main+0xbdc>)
 8004a1c:	69d2      	ldr	r2, [r2, #28]
 8004a1e:	601a      	str	r2, [r3, #0]
			Simulated_Annealing(&sa1, &pid1,Ts);
 8004a20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004a24:	49a3      	ldr	r1, [pc, #652]	; (8004cb4 <main+0xbd4>)
 8004a26:	48a9      	ldr	r0, [pc, #676]	; (8004ccc <main+0xbec>)
 8004a28:	f002 f938 	bl	8006c9c <Simulated_Annealing>
			Simulated_Annealing(&sa2, &pid2,Ts);
 8004a2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004a30:	49a2      	ldr	r1, [pc, #648]	; (8004cbc <main+0xbdc>)
 8004a32:	48a8      	ldr	r0, [pc, #672]	; (8004cd4 <main+0xbf4>)
 8004a34:	f002 f932 	bl	8006c9c <Simulated_Annealing>
			Simulated_Annealing(&sa3, &pid3,Ts);
 8004a38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004a3c:	49a1      	ldr	r1, [pc, #644]	; (8004cc4 <main+0xbe4>)
 8004a3e:	48a4      	ldr	r0, [pc, #656]	; (8004cd0 <main+0xbf0>)
 8004a40:	f002 f92c 	bl	8006c9c <Simulated_Annealing>
			break;
 8004a44:	e034      	b.n	8004ab0 <main+0x9d0>
			as1.y[as1.muestra_i]= pid1.y;
 8004a46:	4ba4      	ldr	r3, [pc, #656]	; (8004cd8 <main+0xbf8>)
 8004a48:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004a4c:	4ba2      	ldr	r3, [pc, #648]	; (8004cd8 <main+0xbf8>)
 8004a4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	4a97      	ldr	r2, [pc, #604]	; (8004cb4 <main+0xbd4>)
 8004a58:	69d2      	ldr	r2, [r2, #28]
 8004a5a:	601a      	str	r2, [r3, #0]
			as3.y[as3.muestra_i]= pid3.y;
 8004a5c:	4b9f      	ldr	r3, [pc, #636]	; (8004cdc <main+0xbfc>)
 8004a5e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004a62:	4b9e      	ldr	r3, [pc, #632]	; (8004cdc <main+0xbfc>)
 8004a64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	4a95      	ldr	r2, [pc, #596]	; (8004cc4 <main+0xbe4>)
 8004a6e:	69d2      	ldr	r2, [r2, #28]
 8004a70:	601a      	str	r2, [r3, #0]
			as2.y[as2.muestra_i]= pid2.y;
 8004a72:	4b9b      	ldr	r3, [pc, #620]	; (8004ce0 <main+0xc00>)
 8004a74:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004a78:	4b99      	ldr	r3, [pc, #612]	; (8004ce0 <main+0xc00>)
 8004a7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	4a8e      	ldr	r2, [pc, #568]	; (8004cbc <main+0xbdc>)
 8004a84:	69d2      	ldr	r2, [r2, #28]
 8004a86:	601a      	str	r2, [r3, #0]
			Aestrella(&as1, &pid1,Ts);
 8004a88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004a8c:	4989      	ldr	r1, [pc, #548]	; (8004cb4 <main+0xbd4>)
 8004a8e:	4892      	ldr	r0, [pc, #584]	; (8004cd8 <main+0xbf8>)
 8004a90:	f7fc fbfa 	bl	8001288 <Aestrella>
			Aestrella(&as2, &pid2,Ts);
 8004a94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004a98:	4988      	ldr	r1, [pc, #544]	; (8004cbc <main+0xbdc>)
 8004a9a:	4891      	ldr	r0, [pc, #580]	; (8004ce0 <main+0xc00>)
 8004a9c:	f7fc fbf4 	bl	8001288 <Aestrella>
			Aestrella(&as3, &pid3,Ts);
 8004aa0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004aa4:	4987      	ldr	r1, [pc, #540]	; (8004cc4 <main+0xbe4>)
 8004aa6:	488d      	ldr	r0, [pc, #564]	; (8004cdc <main+0xbfc>)
 8004aa8:	f7fc fbee 	bl	8001288 <Aestrella>
			break;
 8004aac:	e000      	b.n	8004ab0 <main+0x9d0>
			break;
 8004aae:	bf00      	nop
		}

		// ************Señal de control *********************
		pid1.u = PID_control(pid1.e,pid1.Gains,Ts);
 8004ab0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004ab4:	498b      	ldr	r1, [pc, #556]	; (8004ce4 <main+0xc04>)
 8004ab6:	488c      	ldr	r0, [pc, #560]	; (8004ce8 <main+0xc08>)
 8004ab8:	f001 fe72 	bl	80067a0 <PID_control>
 8004abc:	eef0 7a40 	vmov.f32	s15, s0
 8004ac0:	4b7c      	ldr	r3, [pc, #496]	; (8004cb4 <main+0xbd4>)
 8004ac2:	edc3 7a08 	vstr	s15, [r3, #32]
		pid2.u = PID_control(pid2.e,pid2.Gains,Ts);
 8004ac6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004aca:	4988      	ldr	r1, [pc, #544]	; (8004cec <main+0xc0c>)
 8004acc:	4888      	ldr	r0, [pc, #544]	; (8004cf0 <main+0xc10>)
 8004ace:	f001 fe67 	bl	80067a0 <PID_control>
 8004ad2:	eef0 7a40 	vmov.f32	s15, s0
 8004ad6:	4b79      	ldr	r3, [pc, #484]	; (8004cbc <main+0xbdc>)
 8004ad8:	edc3 7a08 	vstr	s15, [r3, #32]
		pid3.u = PID_control(pid3.e,pid3.Gains,Ts);
 8004adc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004ae0:	4984      	ldr	r1, [pc, #528]	; (8004cf4 <main+0xc14>)
 8004ae2:	4885      	ldr	r0, [pc, #532]	; (8004cf8 <main+0xc18>)
 8004ae4:	f001 fe5c 	bl	80067a0 <PID_control>
 8004ae8:	eef0 7a40 	vmov.f32	s15, s0
 8004aec:	4b75      	ldr	r3, [pc, #468]	; (8004cc4 <main+0xbe4>)
 8004aee:	edc3 7a08 	vstr	s15, [r3, #32]

		// ************Señal de control [0 - 1]**************
		pid1.u = saturation(pid1.u,interval);
 8004af2:	4b70      	ldr	r3, [pc, #448]	; (8004cb4 <main+0xbd4>)
 8004af4:	edd3 7a08 	vldr	s15, [r3, #32]
 8004af8:	f107 031c 	add.w	r3, r7, #28
 8004afc:	4618      	mov	r0, r3
 8004afe:	eeb0 0a67 	vmov.f32	s0, s15
 8004b02:	f001 fea8 	bl	8006856 <saturation>
 8004b06:	eef0 7a40 	vmov.f32	s15, s0
 8004b0a:	4b6a      	ldr	r3, [pc, #424]	; (8004cb4 <main+0xbd4>)
 8004b0c:	edc3 7a08 	vstr	s15, [r3, #32]
		pid2.u = saturation(pid2.u,interval);
 8004b10:	4b6a      	ldr	r3, [pc, #424]	; (8004cbc <main+0xbdc>)
 8004b12:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b16:	f107 031c 	add.w	r3, r7, #28
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8004b20:	f001 fe99 	bl	8006856 <saturation>
 8004b24:	eef0 7a40 	vmov.f32	s15, s0
 8004b28:	4b64      	ldr	r3, [pc, #400]	; (8004cbc <main+0xbdc>)
 8004b2a:	edc3 7a08 	vstr	s15, [r3, #32]
		pid3.u = saturation(-pid3.u,interval);
 8004b2e:	4b65      	ldr	r3, [pc, #404]	; (8004cc4 <main+0xbe4>)
 8004b30:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b34:	eef1 7a67 	vneg.f32	s15, s15
 8004b38:	f107 031c 	add.w	r3, r7, #28
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004b42:	f001 fe88 	bl	8006856 <saturation>
 8004b46:	eef0 7a40 	vmov.f32	s15, s0
 8004b4a:	4b5e      	ldr	r3, [pc, #376]	; (8004cc4 <main+0xbe4>)
 8004b4c:	edc3 7a08 	vstr	s15, [r3, #32]

		// ************Actualizar e inicia el estado VALVULA 1***********
	    htim2.Instance -> CCR1 = (int) (pid1.u * 750 + 35);
 8004b50:	4b58      	ldr	r3, [pc, #352]	; (8004cb4 <main+0xbd4>)
 8004b52:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b56:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004cfc <main+0xc1c>
 8004b5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b5e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004d00 <main+0xc20>
 8004b62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b6a:	4b66      	ldr	r3, [pc, #408]	; (8004d04 <main+0xc24>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	ee17 2a90 	vmov	r2, s15
 8004b72:	635a      	str	r2, [r3, #52]	; 0x34
		// ************Define e inicia el estado VALVULA 2***************
	    time_on =  (int)  (pid2.u * Ts_ms);
 8004b74:	4b51      	ldr	r3, [pc, #324]	; (8004cbc <main+0xbdc>)
 8004b76:	ed93 7a08 	vldr	s14, [r3, #32]
 8004b7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b7c:	ee07 3a90 	vmov	s15, r3
 8004b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b8c:	ee17 3a90 	vmov	r3, s15
 8004b90:	663b      	str	r3, [r7, #96]	; 0x60
		HAL_GPIO_WritePin(VALV2_GPIO_Port, VALV2_Pin,GPIO_PIN_RESET);
 8004b92:	2200      	movs	r2, #0
 8004b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b98:	485b      	ldr	r0, [pc, #364]	; (8004d08 <main+0xc28>)
 8004b9a:	f003 fd29 	bl	80085f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VALV3_ON_GPIO_Port, VALV3_ON_Pin,GPIO_PIN_SET);
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ba4:	4859      	ldr	r0, [pc, #356]	; (8004d0c <main+0xc2c>)
 8004ba6:	f003 fd23 	bl	80085f0 <HAL_GPIO_WritePin>
		// *************Define e inicia el estado VALVULA 3 ***************
	    if (pid3.u == 0 )
 8004baa:	4b46      	ldr	r3, [pc, #280]	; (8004cc4 <main+0xbe4>)
 8004bac:	edd3 7a08 	vldr	s15, [r3, #32]
 8004bb0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb8:	d109      	bne.n	8004bce <main+0xaee>
	    {
		   HAL_GPIO_WritePin(VALV3_GPIO_Port, VALV3_Pin, GPIO_PIN_RESET);
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bc0:	4851      	ldr	r0, [pc, #324]	; (8004d08 <main+0xc28>)
 8004bc2:	f003 fd15 	bl	80085f0 <HAL_GPIO_WritePin>
	       time_giro = Ts_ms;
 8004bc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bcc:	e019      	b.n	8004c02 <main+0xb22>
	    }
	    else
	    {
	       HAL_GPIO_WritePin(VALV3_GPIO_Port, VALV3_Pin, GPIO_PIN_SET);
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bd4:	484c      	ldr	r0, [pc, #304]	; (8004d08 <main+0xc28>)
 8004bd6:	f003 fd0b 	bl	80085f0 <HAL_GPIO_WritePin>
	       time_giro = (int) (pid3.u * Ts_ms + 50);
 8004bda:	4b3a      	ldr	r3, [pc, #232]	; (8004cc4 <main+0xbe4>)
 8004bdc:	ed93 7a08 	vldr	s14, [r3, #32]
 8004be0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bee:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004d10 <main+0xc30>
 8004bf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bfa:	ee17 3a90 	vmov	r3, s15
 8004bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	    }
	    // ************** Eviar Datos por el puerto serial *********
		sprintf(tx_buffer,"%0.2f %0.2f %0.1f %0.1f %0.1f %0.1f %0.1f\r\n",H1, H2, pid1.r, pid3.r,pid1.u, pid2.u,pid3.u);
 8004c02:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004c04:	f7fb fcc8 	bl	8000598 <__aeabi_f2d>
 8004c08:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004c0c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004c10:	f7fb fcc2 	bl	8000598 <__aeabi_f2d>
 8004c14:	4680      	mov	r8, r0
 8004c16:	4689      	mov	r9, r1
 8004c18:	4b26      	ldr	r3, [pc, #152]	; (8004cb4 <main+0xbd4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fb fcbb 	bl	8000598 <__aeabi_f2d>
 8004c22:	4682      	mov	sl, r0
 8004c24:	468b      	mov	fp, r1
 8004c26:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <main+0xbe4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fb fcb4 	bl	8000598 <__aeabi_f2d>
 8004c30:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004c34:	4b1f      	ldr	r3, [pc, #124]	; (8004cb4 <main+0xbd4>)
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fb fcad 	bl	8000598 <__aeabi_f2d>
 8004c3e:	e9c7 0100 	strd	r0, r1, [r7]
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <main+0xbdc>)
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fb fca6 	bl	8000598 <__aeabi_f2d>
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	460d      	mov	r5, r1
 8004c50:	4b1c      	ldr	r3, [pc, #112]	; (8004cc4 <main+0xbe4>)
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fb fc9f 	bl	8000598 <__aeabi_f2d>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8004c62:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004c66:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004c6a:	ed97 7b00 	vldr	d7, [r7]
 8004c6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004c72:	ed97 7b02 	vldr	d7, [r7, #8]
 8004c76:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004c7a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004c7e:	e9cd 8900 	strd	r8, r9, [sp]
 8004c82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c86:	4923      	ldr	r1, [pc, #140]	; (8004d14 <main+0xc34>)
 8004c88:	f008 fa2e 	bl	800d0e8 <siprintf>
		serial_printf(tx_buffer);
 8004c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff f9f7 	bl	8004084 <serial_printf>

	    retardo = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		//Numero de mediciones
		M1 = 1; 			M2 = 1;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
	    sum_h1 = 0;	  	sum_h2 = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004caa:	2300      	movs	r3, #0
 8004cac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	    while (retardo < Ts_ms - 5)
 8004cb0:	e0c7      	b.n	8004e42 <main+0xd62>
 8004cb2:	bf00      	nop
 8004cb4:	20004dd4 	.word	0x20004dd4
 8004cb8:	20004e68 	.word	0x20004e68
 8004cbc:	20004e04 	.word	0x20004e04
 8004cc0:	20004e98 	.word	0x20004e98
 8004cc4:	20004e34 	.word	0x20004e34
 8004cc8:	20004ec8 	.word	0x20004ec8
 8004ccc:	20004ef8 	.word	0x20004ef8
 8004cd0:	20004fd8 	.word	0x20004fd8
 8004cd4:	20004f68 	.word	0x20004f68
 8004cd8:	20005048 	.word	0x20005048
 8004cdc:	20005198 	.word	0x20005198
 8004ce0:	200050f0 	.word	0x200050f0
 8004ce4:	20004df8 	.word	0x20004df8
 8004ce8:	20004dd8 	.word	0x20004dd8
 8004cec:	20004e28 	.word	0x20004e28
 8004cf0:	20004e08 	.word	0x20004e08
 8004cf4:	20004e58 	.word	0x20004e58
 8004cf8:	20004e38 	.word	0x20004e38
 8004cfc:	443b8000 	.word	0x443b8000
 8004d00:	420c0000 	.word	0x420c0000
 8004d04:	20004710 	.word	0x20004710
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	40021400 	.word	0x40021400
 8004d10:	42480000 	.word	0x42480000
 8004d14:	080111d8 	.word	0x080111d8
	    {
		  // ************* Finaliza el  estado VALVULA 2 ***** ****************
	      if (retardo == time_on )
 8004d18:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d105      	bne.n	8004d2e <main+0xc4e>
	      {
				HAL_GPIO_WritePin(VALV2_GPIO_Port, VALV2_Pin, GPIO_PIN_SET);
 8004d22:	2201      	movs	r2, #1
 8004d24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d28:	484f      	ldr	r0, [pc, #316]	; (8004e68 <main+0xd88>)
 8004d2a:	f003 fc61 	bl	80085f0 <HAL_GPIO_WritePin>
	      }
	      // ******************************************************************
	      // ***********  Finaliza el  estado VALVULA 3 ***********************
	      if (retardo  > time_giro )
 8004d2e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d36:	429a      	cmp	r2, r3
 8004d38:	dd05      	ble.n	8004d46 <main+0xc66>
	      {
				HAL_GPIO_WritePin(VALV3_GPIO_Port, VALV3_Pin, GPIO_PIN_RESET);
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d40:	4849      	ldr	r0, [pc, #292]	; (8004e68 <main+0xd88>)
 8004d42:	f003 fc55 	bl	80085f0 <HAL_GPIO_WritePin>
	      }
	      // ************* Promedio de mediciones de altura *******************
	      if (retardo % 100 == 0)
 8004d46:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004d4a:	4b48      	ldr	r3, [pc, #288]	; (8004e6c <main+0xd8c>)
 8004d4c:	fb83 1302 	smull	r1, r3, r3, r2
 8004d50:	1159      	asrs	r1, r3, #5
 8004d52:	17d3      	asrs	r3, r2, #31
 8004d54:	1acb      	subs	r3, r1, r3
 8004d56:	2164      	movs	r1, #100	; 0x64
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d167      	bne.n	8004e32 <main+0xd52>
	      {
			h2 = 25.5 - HCSR04_Read(2);			    M2 ++;
 8004d62:	2002      	movs	r0, #2
 8004d64:	f000 fca8 	bl	80056b8 <HCSR04_Read>
 8004d68:	ee10 3a10 	vmov	r3, s0
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fb fc13 	bl	8000598 <__aeabi_f2d>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	f04f 0000 	mov.w	r0, #0
 8004d7a:	493d      	ldr	r1, [pc, #244]	; (8004e70 <main+0xd90>)
 8004d7c:	f7fb faac 	bl	80002d8 <__aeabi_dsub>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	f7fb ff36 	bl	8000bf8 <__aeabi_d2f>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	3301      	adds	r3, #1
 8004d96:	627b      	str	r3, [r7, #36]	; 0x24
			h1 = 25.3 - HCSR04_Read(1); 			M1 ++;
 8004d98:	2001      	movs	r0, #1
 8004d9a:	f000 fc8d 	bl	80056b8 <HCSR04_Read>
 8004d9e:	ee10 3a10 	vmov	r3, s0
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fb fbf8 	bl	8000598 <__aeabi_f2d>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	a12c      	add	r1, pc, #176	; (adr r1, 8004e60 <main+0xd80>)
 8004dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004db2:	f7fb fa91 	bl	80002d8 <__aeabi_dsub>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	f7fb ff1b 	bl	8000bf8 <__aeabi_d2f>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	3301      	adds	r3, #1
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28

			h2 = limitar_altura(h2, &M2);
 8004dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 8004dd8:	f001 fe56 	bl	8006a88 <limitar_altura>
 8004ddc:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
			h1 = limitar_altura(h1, &M1);
 8004de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004de4:	4618      	mov	r0, r3
 8004de6:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8004dea:	f001 fe4d 	bl	8006a88 <limitar_altura>
 8004dee:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c

			sum_h2 = h2 + sum_h2;
 8004df2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dfe:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004e02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e0a:	ee17 3a90 	vmov	r3, s15
 8004e0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			sum_h1 = h1 + sum_h1;
 8004e12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e1e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e2a:	ee17 3a90 	vmov	r3, s15
 8004e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	      }
	      //************************ Retardo *********************************
	      HAL_Delay(1);     // 1ms retardo
 8004e32:	2001      	movs	r0, #1
 8004e34:	f002 fd10 	bl	8007858 <HAL_Delay>
	      retardo++;
 8004e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	    while (retardo < Ts_ms - 5)
 8004e42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e44:	3b05      	subs	r3, #5
 8004e46:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	f6ff af64 	blt.w	8004d18 <main+0xc38>
	    }
		iter ++;
 8004e50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004e54:	3301      	adds	r3, #1
 8004e56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  sa1.r  = pid1.r ;			  sa2.r  = pid2.r ; 	  sa3.r  = pid3.r ;
 8004e5a:	f7ff b9e4 	b.w	8004226 <main+0x146>
 8004e5e:	bf00      	nop
 8004e60:	cccccccd 	.word	0xcccccccd
 8004e64:	40394ccc 	.word	0x40394ccc
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	51eb851f 	.word	0x51eb851f
 8004e70:	40398000 	.word	0x40398000

08004e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b094      	sub	sp, #80	; 0x50
 8004e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e7a:	f107 031c 	add.w	r3, r7, #28
 8004e7e:	2234      	movs	r2, #52	; 0x34
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f007 fb62 	bl	800c54c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e88:	f107 0308 	add.w	r3, r7, #8
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e98:	2300      	movs	r3, #0
 8004e9a:	607b      	str	r3, [r7, #4]
 8004e9c:	4b29      	ldr	r3, [pc, #164]	; (8004f44 <SystemClock_Config+0xd0>)
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	4a28      	ldr	r2, [pc, #160]	; (8004f44 <SystemClock_Config+0xd0>)
 8004ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea8:	4b26      	ldr	r3, [pc, #152]	; (8004f44 <SystemClock_Config+0xd0>)
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	4b23      	ldr	r3, [pc, #140]	; (8004f48 <SystemClock_Config+0xd4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <SystemClock_Config+0xd4>)
 8004ebe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	4b20      	ldr	r3, [pc, #128]	; (8004f48 <SystemClock_Config+0xd4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ecc:	603b      	str	r3, [r7, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004ed4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004ed8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004eda:	2302      	movs	r3, #2
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ede:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004ee4:	2308      	movs	r3, #8
 8004ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8004ee8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004eec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004eee:	2304      	movs	r3, #4
 8004ef0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004efa:	f107 031c 	add.w	r3, r7, #28
 8004efe:	4618      	mov	r0, r3
 8004f00:	f004 f984 	bl	800920c <HAL_RCC_OscConfig>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004f0a:	f000 fc27 	bl	800575c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f0e:	230f      	movs	r3, #15
 8004f10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f12:	2302      	movs	r3, #2
 8004f14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f16:	2300      	movs	r3, #0
 8004f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004f24:	f107 0308 	add.w	r3, r7, #8
 8004f28:	2103      	movs	r1, #3
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f003 fcc2 	bl	80088b4 <HAL_RCC_ClockConfig>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004f36:	f000 fc11 	bl	800575c <Error_Handler>
  }
}
 8004f3a:	bf00      	nop
 8004f3c:	3750      	adds	r7, #80	; 0x50
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40007000 	.word	0x40007000

08004f4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08e      	sub	sp, #56	; 0x38
 8004f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	605a      	str	r2, [r3, #4]
 8004f5c:	609a      	str	r2, [r3, #8]
 8004f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f60:	f107 0320 	add.w	r3, r7, #32
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f6a:	1d3b      	adds	r3, r7, #4
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	605a      	str	r2, [r3, #4]
 8004f72:	609a      	str	r2, [r3, #8]
 8004f74:	60da      	str	r2, [r3, #12]
 8004f76:	611a      	str	r2, [r3, #16]
 8004f78:	615a      	str	r2, [r3, #20]
 8004f7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004f7c:	4b2d      	ldr	r3, [pc, #180]	; (8005034 <MX_TIM2_Init+0xe8>)
 8004f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8004f84:	4b2b      	ldr	r3, [pc, #172]	; (8005034 <MX_TIM2_Init+0xe8>)
 8004f86:	225f      	movs	r2, #95	; 0x5f
 8004f88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f8a:	4b2a      	ldr	r3, [pc, #168]	; (8005034 <MX_TIM2_Init+0xe8>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8004f90:	4b28      	ldr	r3, [pc, #160]	; (8005034 <MX_TIM2_Init+0xe8>)
 8004f92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f98:	4b26      	ldr	r3, [pc, #152]	; (8005034 <MX_TIM2_Init+0xe8>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f9e:	4b25      	ldr	r3, [pc, #148]	; (8005034 <MX_TIM2_Init+0xe8>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004fa4:	4823      	ldr	r0, [pc, #140]	; (8005034 <MX_TIM2_Init+0xe8>)
 8004fa6:	f004 fbb5 	bl	8009714 <HAL_TIM_Base_Init>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004fb0:	f000 fbd4 	bl	800575c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	481c      	ldr	r0, [pc, #112]	; (8005034 <MX_TIM2_Init+0xe8>)
 8004fc2:	f005 f8ff 	bl	800a1c4 <HAL_TIM_ConfigClockSource>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004fcc:	f000 fbc6 	bl	800575c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004fd0:	4818      	ldr	r0, [pc, #96]	; (8005034 <MX_TIM2_Init+0xe8>)
 8004fd2:	f004 fbee 	bl	80097b2 <HAL_TIM_PWM_Init>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004fdc:	f000 fbbe 	bl	800575c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004fe8:	f107 0320 	add.w	r3, r7, #32
 8004fec:	4619      	mov	r1, r3
 8004fee:	4811      	ldr	r0, [pc, #68]	; (8005034 <MX_TIM2_Init+0xe8>)
 8004ff0:	f005 fe56 	bl	800aca0 <HAL_TIMEx_MasterConfigSynchronization>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004ffa:	f000 fbaf 	bl	800575c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ffe:	2360      	movs	r3, #96	; 0x60
 8005000:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8005002:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005006:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005010:	1d3b      	adds	r3, r7, #4
 8005012:	2200      	movs	r2, #0
 8005014:	4619      	mov	r1, r3
 8005016:	4807      	ldr	r0, [pc, #28]	; (8005034 <MX_TIM2_Init+0xe8>)
 8005018:	f005 f812 	bl	800a040 <HAL_TIM_PWM_ConfigChannel>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005022:	f000 fb9b 	bl	800575c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005026:	4803      	ldr	r0, [pc, #12]	; (8005034 <MX_TIM2_Init+0xe8>)
 8005028:	f002 f8f4 	bl	8007214 <HAL_TIM_MspPostInit>

}
 800502c:	bf00      	nop
 800502e:	3738      	adds	r7, #56	; 0x38
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20004710 	.word	0x20004710

08005038 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800503e:	f107 0318 	add.w	r3, r7, #24
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	605a      	str	r2, [r3, #4]
 8005048:	609a      	str	r2, [r3, #8]
 800504a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800504c:	f107 0310 	add.w	r3, r7, #16
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005056:	463b      	mov	r3, r7
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005062:	4b31      	ldr	r3, [pc, #196]	; (8005128 <MX_TIM3_Init+0xf0>)
 8005064:	4a31      	ldr	r2, [pc, #196]	; (800512c <MX_TIM3_Init+0xf4>)
 8005066:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8005068:	4b2f      	ldr	r3, [pc, #188]	; (8005128 <MX_TIM3_Init+0xf0>)
 800506a:	225f      	movs	r2, #95	; 0x5f
 800506c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800506e:	4b2e      	ldr	r3, [pc, #184]	; (8005128 <MX_TIM3_Init+0xf0>)
 8005070:	2200      	movs	r2, #0
 8005072:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005074:	4b2c      	ldr	r3, [pc, #176]	; (8005128 <MX_TIM3_Init+0xf0>)
 8005076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800507a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800507c:	4b2a      	ldr	r3, [pc, #168]	; (8005128 <MX_TIM3_Init+0xf0>)
 800507e:	2200      	movs	r2, #0
 8005080:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005082:	4b29      	ldr	r3, [pc, #164]	; (8005128 <MX_TIM3_Init+0xf0>)
 8005084:	2200      	movs	r2, #0
 8005086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005088:	4827      	ldr	r0, [pc, #156]	; (8005128 <MX_TIM3_Init+0xf0>)
 800508a:	f004 fb43 	bl	8009714 <HAL_TIM_Base_Init>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8005094:	f000 fb62 	bl	800575c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800509c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800509e:	f107 0318 	add.w	r3, r7, #24
 80050a2:	4619      	mov	r1, r3
 80050a4:	4820      	ldr	r0, [pc, #128]	; (8005128 <MX_TIM3_Init+0xf0>)
 80050a6:	f005 f88d 	bl	800a1c4 <HAL_TIM_ConfigClockSource>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80050b0:	f000 fb54 	bl	800575c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80050b4:	481c      	ldr	r0, [pc, #112]	; (8005128 <MX_TIM3_Init+0xf0>)
 80050b6:	f004 fc9d 	bl	80099f4 <HAL_TIM_IC_Init>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80050c0:	f000 fb4c 	bl	800575c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050c8:	2300      	movs	r3, #0
 80050ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80050cc:	f107 0310 	add.w	r3, r7, #16
 80050d0:	4619      	mov	r1, r3
 80050d2:	4815      	ldr	r0, [pc, #84]	; (8005128 <MX_TIM3_Init+0xf0>)
 80050d4:	f005 fde4 	bl	800aca0 <HAL_TIMEx_MasterConfigSynchronization>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80050de:	f000 fb3d 	bl	800575c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80050e2:	2300      	movs	r3, #0
 80050e4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80050e6:	2301      	movs	r3, #1
 80050e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 80050ee:	2304      	movs	r3, #4
 80050f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80050f2:	463b      	mov	r3, r7
 80050f4:	2200      	movs	r2, #0
 80050f6:	4619      	mov	r1, r3
 80050f8:	480b      	ldr	r0, [pc, #44]	; (8005128 <MX_TIM3_Init+0xf0>)
 80050fa:	f004 ff05 	bl	8009f08 <HAL_TIM_IC_ConfigChannel>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8005104:	f000 fb2a 	bl	800575c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005108:	463b      	mov	r3, r7
 800510a:	2204      	movs	r2, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4806      	ldr	r0, [pc, #24]	; (8005128 <MX_TIM3_Init+0xf0>)
 8005110:	f004 fefa 	bl	8009f08 <HAL_TIM_IC_ConfigChannel>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800511a:	f000 fb1f 	bl	800575c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800511e:	bf00      	nop
 8005120:	3728      	adds	r7, #40	; 0x28
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20004758 	.word	0x20004758
 800512c:	40000400 	.word	0x40000400

08005130 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005134:	4b11      	ldr	r3, [pc, #68]	; (800517c <MX_USART3_UART_Init+0x4c>)
 8005136:	4a12      	ldr	r2, [pc, #72]	; (8005180 <MX_USART3_UART_Init+0x50>)
 8005138:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800513a:	4b10      	ldr	r3, [pc, #64]	; (800517c <MX_USART3_UART_Init+0x4c>)
 800513c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005140:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005142:	4b0e      	ldr	r3, [pc, #56]	; (800517c <MX_USART3_UART_Init+0x4c>)
 8005144:	2200      	movs	r2, #0
 8005146:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005148:	4b0c      	ldr	r3, [pc, #48]	; (800517c <MX_USART3_UART_Init+0x4c>)
 800514a:	2200      	movs	r2, #0
 800514c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800514e:	4b0b      	ldr	r3, [pc, #44]	; (800517c <MX_USART3_UART_Init+0x4c>)
 8005150:	2200      	movs	r2, #0
 8005152:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005154:	4b09      	ldr	r3, [pc, #36]	; (800517c <MX_USART3_UART_Init+0x4c>)
 8005156:	220c      	movs	r2, #12
 8005158:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800515a:	4b08      	ldr	r3, [pc, #32]	; (800517c <MX_USART3_UART_Init+0x4c>)
 800515c:	2200      	movs	r2, #0
 800515e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <MX_USART3_UART_Init+0x4c>)
 8005162:	2200      	movs	r2, #0
 8005164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005166:	4805      	ldr	r0, [pc, #20]	; (800517c <MX_USART3_UART_Init+0x4c>)
 8005168:	f005 fe2a 	bl	800adc0 <HAL_UART_Init>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005172:	f000 faf3 	bl	800575c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005176:	bf00      	nop
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	200047a0 	.word	0x200047a0
 8005180:	40004800 	.word	0x40004800

08005184 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005188:	4b15      	ldr	r3, [pc, #84]	; (80051e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800518a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800518e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005190:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005192:	2206      	movs	r2, #6
 8005194:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005196:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8005198:	2202      	movs	r2, #2
 800519a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800519c:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800519e:	2200      	movs	r2, #0
 80051a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80051a2:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80051a4:	2202      	movs	r2, #2
 80051a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80051a8:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80051ae:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80051b4:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80051ba:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80051bc:	2201      	movs	r2, #1
 80051be:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80051c0:	4b07      	ldr	r3, [pc, #28]	; (80051e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80051c2:	2201      	movs	r2, #1
 80051c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80051c6:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80051cc:	4804      	ldr	r0, [pc, #16]	; (80051e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80051ce:	f003 fa28 	bl	8008622 <HAL_PCD_Init>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80051d8:	f000 fac0 	bl	800575c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80051dc:	bf00      	nop
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	200048a4 	.word	0x200048a4

080051e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80051ea:	2300      	movs	r3, #0
 80051ec:	607b      	str	r3, [r7, #4]
 80051ee:	4b10      	ldr	r3, [pc, #64]	; (8005230 <MX_DMA_Init+0x4c>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	4a0f      	ldr	r2, [pc, #60]	; (8005230 <MX_DMA_Init+0x4c>)
 80051f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051f8:	6313      	str	r3, [r2, #48]	; 0x30
 80051fa:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <MX_DMA_Init+0x4c>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8005206:	2200      	movs	r2, #0
 8005208:	2100      	movs	r1, #0
 800520a:	200c      	movs	r0, #12
 800520c:	f002 fc23 	bl	8007a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005210:	200c      	movs	r0, #12
 8005212:	f002 fc3c 	bl	8007a8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8005216:	2200      	movs	r2, #0
 8005218:	2100      	movs	r1, #0
 800521a:	200e      	movs	r0, #14
 800521c:	f002 fc1b 	bl	8007a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005220:	200e      	movs	r0, #14
 8005222:	f002 fc34 	bl	8007a8e <HAL_NVIC_EnableIRQ>

}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40023800 	.word	0x40023800

08005234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08e      	sub	sp, #56	; 0x38
 8005238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800523a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	605a      	str	r2, [r3, #4]
 8005244:	609a      	str	r2, [r3, #8]
 8005246:	60da      	str	r2, [r3, #12]
 8005248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800524a:	2300      	movs	r3, #0
 800524c:	623b      	str	r3, [r7, #32]
 800524e:	4b70      	ldr	r3, [pc, #448]	; (8005410 <MX_GPIO_Init+0x1dc>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	4a6f      	ldr	r2, [pc, #444]	; (8005410 <MX_GPIO_Init+0x1dc>)
 8005254:	f043 0304 	orr.w	r3, r3, #4
 8005258:	6313      	str	r3, [r2, #48]	; 0x30
 800525a:	4b6d      	ldr	r3, [pc, #436]	; (8005410 <MX_GPIO_Init+0x1dc>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	623b      	str	r3, [r7, #32]
 8005264:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	4b69      	ldr	r3, [pc, #420]	; (8005410 <MX_GPIO_Init+0x1dc>)
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	4a68      	ldr	r2, [pc, #416]	; (8005410 <MX_GPIO_Init+0x1dc>)
 8005270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005274:	6313      	str	r3, [r2, #48]	; 0x30
 8005276:	4b66      	ldr	r3, [pc, #408]	; (8005410 <MX_GPIO_Init+0x1dc>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005282:	2300      	movs	r3, #0
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	4b62      	ldr	r3, [pc, #392]	; (8005410 <MX_GPIO_Init+0x1dc>)
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	4a61      	ldr	r2, [pc, #388]	; (8005410 <MX_GPIO_Init+0x1dc>)
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	6313      	str	r3, [r2, #48]	; 0x30
 8005292:	4b5f      	ldr	r3, [pc, #380]	; (8005410 <MX_GPIO_Init+0x1dc>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	4b5b      	ldr	r3, [pc, #364]	; (8005410 <MX_GPIO_Init+0x1dc>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	4a5a      	ldr	r2, [pc, #360]	; (8005410 <MX_GPIO_Init+0x1dc>)
 80052a8:	f043 0302 	orr.w	r3, r3, #2
 80052ac:	6313      	str	r3, [r2, #48]	; 0x30
 80052ae:	4b58      	ldr	r3, [pc, #352]	; (8005410 <MX_GPIO_Init+0x1dc>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	4b54      	ldr	r3, [pc, #336]	; (8005410 <MX_GPIO_Init+0x1dc>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	4a53      	ldr	r2, [pc, #332]	; (8005410 <MX_GPIO_Init+0x1dc>)
 80052c4:	f043 0320 	orr.w	r3, r3, #32
 80052c8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ca:	4b51      	ldr	r3, [pc, #324]	; (8005410 <MX_GPIO_Init+0x1dc>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	4b4d      	ldr	r3, [pc, #308]	; (8005410 <MX_GPIO_Init+0x1dc>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	4a4c      	ldr	r2, [pc, #304]	; (8005410 <MX_GPIO_Init+0x1dc>)
 80052e0:	f043 0310 	orr.w	r3, r3, #16
 80052e4:	6313      	str	r3, [r2, #48]	; 0x30
 80052e6:	4b4a      	ldr	r3, [pc, #296]	; (8005410 <MX_GPIO_Init+0x1dc>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052f2:	2300      	movs	r3, #0
 80052f4:	60bb      	str	r3, [r7, #8]
 80052f6:	4b46      	ldr	r3, [pc, #280]	; (8005410 <MX_GPIO_Init+0x1dc>)
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	4a45      	ldr	r2, [pc, #276]	; (8005410 <MX_GPIO_Init+0x1dc>)
 80052fc:	f043 0308 	orr.w	r3, r3, #8
 8005300:	6313      	str	r3, [r2, #48]	; 0x30
 8005302:	4b43      	ldr	r3, [pc, #268]	; (8005410 <MX_GPIO_Init+0x1dc>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	60bb      	str	r3, [r7, #8]
 800530c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800530e:	2300      	movs	r3, #0
 8005310:	607b      	str	r3, [r7, #4]
 8005312:	4b3f      	ldr	r3, [pc, #252]	; (8005410 <MX_GPIO_Init+0x1dc>)
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	4a3e      	ldr	r2, [pc, #248]	; (8005410 <MX_GPIO_Init+0x1dc>)
 8005318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800531c:	6313      	str	r3, [r2, #48]	; 0x30
 800531e:	4b3c      	ldr	r3, [pc, #240]	; (8005410 <MX_GPIO_Init+0x1dc>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	607b      	str	r3, [r7, #4]
 8005328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800532a:	2200      	movs	r2, #0
 800532c:	f244 0181 	movw	r1, #16513	; 0x4081
 8005330:	4838      	ldr	r0, [pc, #224]	; (8005414 <MX_GPIO_Init+0x1e0>)
 8005332:	f003 f95d 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, VALV3_ON_Pin|BOMBA_Pin|TRIG1_Pin, GPIO_PIN_RESET);
 8005336:	2200      	movs	r2, #0
 8005338:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800533c:	4836      	ldr	r0, [pc, #216]	; (8005418 <MX_GPIO_Init+0x1e4>)
 800533e:	f003 f957 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VALV3_Pin|VALV2_Pin, GPIO_PIN_RESET);
 8005342:	2200      	movs	r2, #0
 8005344:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8005348:	4834      	ldr	r0, [pc, #208]	; (800541c <MX_GPIO_Init+0x1e8>)
 800534a:	f003 f951 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|TRIG2_Pin, GPIO_PIN_RESET);
 800534e:	2200      	movs	r2, #0
 8005350:	f244 0140 	movw	r1, #16448	; 0x4040
 8005354:	4832      	ldr	r0, [pc, #200]	; (8005420 <MX_GPIO_Init+0x1ec>)
 8005356:	f003 f94b 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800535a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005360:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005366:	2300      	movs	r3, #0
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800536a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800536e:	4619      	mov	r1, r3
 8005370:	482c      	ldr	r0, [pc, #176]	; (8005424 <MX_GPIO_Init+0x1f0>)
 8005372:	f002 ffa9 	bl	80082c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8005376:	f244 0381 	movw	r3, #16513	; 0x4081
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800537c:	2301      	movs	r3, #1
 800537e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005380:	2300      	movs	r3, #0
 8005382:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005384:	2300      	movs	r3, #0
 8005386:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800538c:	4619      	mov	r1, r3
 800538e:	4821      	ldr	r0, [pc, #132]	; (8005414 <MX_GPIO_Init+0x1e0>)
 8005390:	f002 ff9a 	bl	80082c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VALV3_ON_Pin BOMBA_Pin TRIG1_Pin */
  GPIO_InitStruct.Pin = VALV3_ON_Pin|BOMBA_Pin|TRIG1_Pin;
 8005394:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800539a:	2301      	movs	r3, #1
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a2:	2300      	movs	r3, #0
 80053a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053aa:	4619      	mov	r1, r3
 80053ac:	481a      	ldr	r0, [pc, #104]	; (8005418 <MX_GPIO_Init+0x1e4>)
 80053ae:	f002 ff8b 	bl	80082c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VALV3_Pin VALV2_Pin */
  GPIO_InitStruct.Pin = VALV3_Pin|VALV2_Pin;
 80053b2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053b8:	2301      	movs	r3, #1
 80053ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053c0:	2300      	movs	r3, #0
 80053c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80053c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053c8:	4619      	mov	r1, r3
 80053ca:	4814      	ldr	r0, [pc, #80]	; (800541c <MX_GPIO_Init+0x1e8>)
 80053cc:	f002 ff7c 	bl	80082c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin TRIG2_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|TRIG2_Pin;
 80053d0:	f244 0340 	movw	r3, #16448	; 0x4040
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053d6:	2301      	movs	r3, #1
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053da:	2300      	movs	r3, #0
 80053dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053de:	2300      	movs	r3, #0
 80053e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80053e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e6:	4619      	mov	r1, r3
 80053e8:	480d      	ldr	r0, [pc, #52]	; (8005420 <MX_GPIO_Init+0x1ec>)
 80053ea:	f002 ff6d 	bl	80082c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053f2:	2300      	movs	r3, #0
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80053fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053fe:	4619      	mov	r1, r3
 8005400:	4807      	ldr	r0, [pc, #28]	; (8005420 <MX_GPIO_Init+0x1ec>)
 8005402:	f002 ff61 	bl	80082c8 <HAL_GPIO_Init>

}
 8005406:	bf00      	nop
 8005408:	3738      	adds	r7, #56	; 0x38
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40023800 	.word	0x40023800
 8005414:	40020400 	.word	0x40020400
 8005418:	40021400 	.word	0x40021400
 800541c:	40021000 	.word	0x40021000
 8005420:	40021800 	.word	0x40021800
 8005424:	40020800 	.word	0x40020800

08005428 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
//Input Capture callback in non blocking mode.
void HAL_TIM_IC_CaptureCallback( TIM_HandleTypeDef *htim){
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	7f1b      	ldrb	r3, [r3, #28]
 8005434:	2b02      	cmp	r3, #2
 8005436:	f040 808f 	bne.w	8005558 <HAL_TIM_IC_CaptureCallback+0x130>
	{
		if(First_Captured2 == 0){
 800543a:	4b95      	ldr	r3, [pc, #596]	; (8005690 <HAL_TIM_IC_CaptureCallback+0x268>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d122      	bne.n	8005488 <HAL_TIM_IC_CaptureCallback+0x60>
			IC2_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // if the interrupt source is channel2
 8005442:	2104      	movs	r1, #4
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f004 ff85 	bl	800a354 <HAL_TIM_ReadCapturedValue>
 800544a:	4603      	mov	r3, r0
 800544c:	4a91      	ldr	r2, [pc, #580]	; (8005694 <HAL_TIM_IC_CaptureCallback+0x26c>)
 800544e:	6013      	str	r3, [r2, #0]
			First_Captured2 = 1; 									   // set the first captured as true
 8005450:	4b8f      	ldr	r3, [pc, #572]	; (8005690 <HAL_TIM_IC_CaptureCallback+0x268>)
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_FALLING);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6a1a      	ldr	r2, [r3, #32]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005464:	621a      	str	r2, [r3, #32]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a1a      	ldr	r2, [r3, #32]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0220 	orr.w	r2, r2, #32
 8005474:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0204 	bic.w	r2, r2, #4
 8005484:	60da      	str	r2, [r3, #12]
 8005486:	e067      	b.n	8005558 <HAL_TIM_IC_CaptureCallback+0x130>

		}
		else if(First_Captured2 == 1){
 8005488:	4b81      	ldr	r3, [pc, #516]	; (8005690 <HAL_TIM_IC_CaptureCallback+0x268>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d163      	bne.n	8005558 <HAL_TIM_IC_CaptureCallback+0x130>
			IC2_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8005490:	2104      	movs	r1, #4
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f004 ff5e 	bl	800a354 <HAL_TIM_ReadCapturedValue>
 8005498:	4603      	mov	r3, r0
 800549a:	4a7f      	ldr	r2, [pc, #508]	; (8005698 <HAL_TIM_IC_CaptureCallback+0x270>)
 800549c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim,0);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	625a      	str	r2, [r3, #36]	; 0x24

			if (IC2_Val2 > IC2_Val1){
 80054a6:	4b7c      	ldr	r3, [pc, #496]	; (8005698 <HAL_TIM_IC_CaptureCallback+0x270>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b7a      	ldr	r3, [pc, #488]	; (8005694 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d907      	bls.n	80054c2 <HAL_TIM_IC_CaptureCallback+0x9a>
				Difference2 = IC2_Val2 - IC2_Val1;
 80054b2:	4b79      	ldr	r3, [pc, #484]	; (8005698 <HAL_TIM_IC_CaptureCallback+0x270>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b77      	ldr	r3, [pc, #476]	; (8005694 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	4a77      	ldr	r2, [pc, #476]	; (800569c <HAL_TIM_IC_CaptureCallback+0x274>)
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	e00f      	b.n	80054e2 <HAL_TIM_IC_CaptureCallback+0xba>
			}
			else if(IC2_Val1 > IC2_Val2){
 80054c2:	4b74      	ldr	r3, [pc, #464]	; (8005694 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	4b74      	ldr	r3, [pc, #464]	; (8005698 <HAL_TIM_IC_CaptureCallback+0x270>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d909      	bls.n	80054e2 <HAL_TIM_IC_CaptureCallback+0xba>
				Difference2 = (65535 - IC2_Val1) +  IC2_Val2 ;
 80054ce:	4b72      	ldr	r3, [pc, #456]	; (8005698 <HAL_TIM_IC_CaptureCallback+0x270>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4b70      	ldr	r3, [pc, #448]	; (8005694 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80054dc:	33ff      	adds	r3, #255	; 0xff
 80054de:	4a6f      	ldr	r2, [pc, #444]	; (800569c <HAL_TIM_IC_CaptureCallback+0x274>)
 80054e0:	6013      	str	r3, [r2, #0]
			}
			 distancia2 = (float) Difference2 * 0.034 /2 ;
 80054e2:	4b6e      	ldr	r3, [pc, #440]	; (800569c <HAL_TIM_IC_CaptureCallback+0x274>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ee:	ee17 0a90 	vmov	r0, s15
 80054f2:	f7fb f851 	bl	8000598 <__aeabi_f2d>
 80054f6:	a364      	add	r3, pc, #400	; (adr r3, 8005688 <HAL_TIM_IC_CaptureCallback+0x260>)
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	f7fb f8a4 	bl	8000648 <__aeabi_dmul>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4610      	mov	r0, r2
 8005506:	4619      	mov	r1, r3
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005510:	f7fb f9c4 	bl	800089c <__aeabi_ddiv>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4610      	mov	r0, r2
 800551a:	4619      	mov	r1, r3
 800551c:	f7fb fb6c 	bl	8000bf8 <__aeabi_d2f>
 8005520:	4603      	mov	r3, r0
 8005522:	4a5f      	ldr	r2, [pc, #380]	; (80056a0 <HAL_TIM_IC_CaptureCallback+0x278>)
 8005524:	6013      	str	r3, [r2, #0]
			 First_Captured2 = 0;  // set it back to false
 8005526:	4b5a      	ldr	r3, [pc, #360]	; (8005690 <HAL_TIM_IC_CaptureCallback+0x268>)
 8005528:	2200      	movs	r2, #0
 800552a:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,TIM_INPUTCHANNELPOLARITY_RISING);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6a1a      	ldr	r2, [r3, #32]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800553a:	621a      	str	r2, [r3, #32]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6a12      	ldr	r2, [r2, #32]
 8005546:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0204 	bic.w	r2, r2, #4
 8005556:	60da      	str	r2, [r3, #12]
		}

	}
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	7f1b      	ldrb	r3, [r3, #28]
 800555c:	2b01      	cmp	r3, #1
 800555e:	f040 808f 	bne.w	8005680 <HAL_TIM_IC_CaptureCallback+0x258>
	{
		if(First_Captured1 == 0){
 8005562:	4b50      	ldr	r3, [pc, #320]	; (80056a4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d122      	bne.n	80055b0 <HAL_TIM_IC_CaptureCallback+0x188>
			IC1_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // if the interrupt source is channel1
 800556a:	2100      	movs	r1, #0
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f004 fef1 	bl	800a354 <HAL_TIM_ReadCapturedValue>
 8005572:	4603      	mov	r3, r0
 8005574:	4a4c      	ldr	r2, [pc, #304]	; (80056a8 <HAL_TIM_IC_CaptureCallback+0x280>)
 8005576:	6013      	str	r3, [r2, #0]
			First_Captured1 = 1; 									   // set the first captured as true
 8005578:	4b4a      	ldr	r3, [pc, #296]	; (80056a4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800557a:	2201      	movs	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6a1a      	ldr	r2, [r3, #32]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 020a 	bic.w	r2, r2, #10
 800558c:	621a      	str	r2, [r3, #32]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6a1a      	ldr	r2, [r3, #32]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0202 	orr.w	r2, r2, #2
 800559c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0202 	bic.w	r2, r2, #2
 80055ac:	60da      	str	r2, [r3, #12]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
		}

	}

}
 80055ae:	e067      	b.n	8005680 <HAL_TIM_IC_CaptureCallback+0x258>
		else if(First_Captured1 == 1){
 80055b0:	4b3c      	ldr	r3, [pc, #240]	; (80056a4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d163      	bne.n	8005680 <HAL_TIM_IC_CaptureCallback+0x258>
			IC1_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 80055b8:	2100      	movs	r1, #0
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f004 feca 	bl	800a354 <HAL_TIM_ReadCapturedValue>
 80055c0:	4603      	mov	r3, r0
 80055c2:	4a3a      	ldr	r2, [pc, #232]	; (80056ac <HAL_TIM_IC_CaptureCallback+0x284>)
 80055c4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim,0); // reset the counter
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2200      	movs	r2, #0
 80055cc:	625a      	str	r2, [r3, #36]	; 0x24
			if ( IC1_Val2 > IC1_Val1 )
 80055ce:	4b37      	ldr	r3, [pc, #220]	; (80056ac <HAL_TIM_IC_CaptureCallback+0x284>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b35      	ldr	r3, [pc, #212]	; (80056a8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d907      	bls.n	80055ea <HAL_TIM_IC_CaptureCallback+0x1c2>
				Difference1 = IC1_Val2-IC1_Val1;
 80055da:	4b34      	ldr	r3, [pc, #208]	; (80056ac <HAL_TIM_IC_CaptureCallback+0x284>)
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	4b32      	ldr	r3, [pc, #200]	; (80056a8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	4a32      	ldr	r2, [pc, #200]	; (80056b0 <HAL_TIM_IC_CaptureCallback+0x288>)
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	e00f      	b.n	800560a <HAL_TIM_IC_CaptureCallback+0x1e2>
			else if ( IC1_Val1 > IC1_Val2 )
 80055ea:	4b2f      	ldr	r3, [pc, #188]	; (80056a8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b2f      	ldr	r3, [pc, #188]	; (80056ac <HAL_TIM_IC_CaptureCallback+0x284>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d909      	bls.n	800560a <HAL_TIM_IC_CaptureCallback+0x1e2>
				Difference1 = (65535 - IC1_Val1) +  IC1_Val2;
 80055f6:	4b2d      	ldr	r3, [pc, #180]	; (80056ac <HAL_TIM_IC_CaptureCallback+0x284>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b2b      	ldr	r3, [pc, #172]	; (80056a8 <HAL_TIM_IC_CaptureCallback+0x280>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8005604:	33ff      	adds	r3, #255	; 0xff
 8005606:	4a2a      	ldr	r2, [pc, #168]	; (80056b0 <HAL_TIM_IC_CaptureCallback+0x288>)
 8005608:	6013      	str	r3, [r2, #0]
			 distancia1 = (float) Difference1 * 0.034 / 2;
 800560a:	4b29      	ldr	r3, [pc, #164]	; (80056b0 <HAL_TIM_IC_CaptureCallback+0x288>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005616:	ee17 0a90 	vmov	r0, s15
 800561a:	f7fa ffbd 	bl	8000598 <__aeabi_f2d>
 800561e:	a31a      	add	r3, pc, #104	; (adr r3, 8005688 <HAL_TIM_IC_CaptureCallback+0x260>)
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	f7fb f810 	bl	8000648 <__aeabi_dmul>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4610      	mov	r0, r2
 800562e:	4619      	mov	r1, r3
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005638:	f7fb f930 	bl	800089c <__aeabi_ddiv>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4610      	mov	r0, r2
 8005642:	4619      	mov	r1, r3
 8005644:	f7fb fad8 	bl	8000bf8 <__aeabi_d2f>
 8005648:	4603      	mov	r3, r0
 800564a:	4a1a      	ldr	r2, [pc, #104]	; (80056b4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800564c:	6013      	str	r3, [r2, #0]
			 First_Captured1 = 0;  // set it back to false
 800564e:	4b15      	ldr	r3, [pc, #84]	; (80056a4 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6a1a      	ldr	r2, [r3, #32]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 020a 	bic.w	r2, r2, #10
 8005662:	621a      	str	r2, [r3, #32]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6a12      	ldr	r2, [r2, #32]
 800566e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0202 	bic.w	r2, r2, #2
 800567e:	60da      	str	r2, [r3, #12]
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	b020c49c 	.word	0xb020c49c
 800568c:	3fa16872 	.word	0x3fa16872
 8005690:	20004dd1 	.word	0x20004dd1
 8005694:	20004dbc 	.word	0x20004dbc
 8005698:	20004dc4 	.word	0x20004dc4
 800569c:	20004dcc 	.word	0x20004dcc
 80056a0:	20004db4 	.word	0x20004db4
 80056a4:	20004dd0 	.word	0x20004dd0
 80056a8:	20004db8 	.word	0x20004db8
 80056ac:	20004dc0 	.word	0x20004dc0
 80056b0:	20004dc8 	.word	0x20004dc8
 80056b4:	20004db0 	.word	0x20004db0

080056b8 <HCSR04_Read>:

float HCSR04_Read(int select)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	float distancia;
	if (select == 1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d11a      	bne.n	80056fc <HCSR04_Read+0x44>
	{
	  HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, GPIO_PIN_SET);
 80056c6:	2201      	movs	r2, #1
 80056c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056cc:	481e      	ldr	r0, [pc, #120]	; (8005748 <HCSR04_Read+0x90>)
 80056ce:	f002 ff8f 	bl	80085f0 <HAL_GPIO_WritePin>
	  HAL_Delay_us(10);
 80056d2:	200a      	movs	r0, #10
 80056d4:	f7fe fcea 	bl	80040ac <HAL_Delay_us>
	  HAL_GPIO_WritePin(TRIG1_GPIO_Port, TRIG1_Pin, GPIO_PIN_RESET);
 80056d8:	2200      	movs	r2, #0
 80056da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056de:	481a      	ldr	r0, [pc, #104]	; (8005748 <HCSR04_Read+0x90>)
 80056e0:	f002 ff86 	bl	80085f0 <HAL_GPIO_WritePin>
	  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80056e4:	4b19      	ldr	r3, [pc, #100]	; (800574c <HCSR04_Read+0x94>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	4b18      	ldr	r3, [pc, #96]	; (800574c <HCSR04_Read+0x94>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0202 	orr.w	r2, r2, #2
 80056f2:	60da      	str	r2, [r3, #12]
	  distancia =  distancia1 ;
 80056f4:	4b16      	ldr	r3, [pc, #88]	; (8005750 <HCSR04_Read+0x98>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	e01c      	b.n	8005736 <HCSR04_Read+0x7e>
	}
	else if(select == 2)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d119      	bne.n	8005736 <HCSR04_Read+0x7e>
	{
	  HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, GPIO_PIN_SET);
 8005702:	2201      	movs	r2, #1
 8005704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005708:	4812      	ldr	r0, [pc, #72]	; (8005754 <HCSR04_Read+0x9c>)
 800570a:	f002 ff71 	bl	80085f0 <HAL_GPIO_WritePin>
	  HAL_Delay_us(10);
 800570e:	200a      	movs	r0, #10
 8005710:	f7fe fccc 	bl	80040ac <HAL_Delay_us>
	  HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, GPIO_PIN_RESET);
 8005714:	2200      	movs	r2, #0
 8005716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800571a:	480e      	ldr	r0, [pc, #56]	; (8005754 <HCSR04_Read+0x9c>)
 800571c:	f002 ff68 	bl	80085f0 <HAL_GPIO_WritePin>
	  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <HCSR04_Read+0x94>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	4b09      	ldr	r3, [pc, #36]	; (800574c <HCSR04_Read+0x94>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0204 	orr.w	r2, r2, #4
 800572e:	60da      	str	r2, [r3, #12]
	  distancia = distancia2 ;
 8005730:	4b09      	ldr	r3, [pc, #36]	; (8005758 <HCSR04_Read+0xa0>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]
	}
	return distancia;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	ee07 3a90 	vmov	s15, r3
}
 800573c:	eeb0 0a67 	vmov.f32	s0, s15
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	40021400 	.word	0x40021400
 800574c:	20004758 	.word	0x20004758
 8005750:	20004db0 	.word	0x20004db0
 8005754:	40021800 	.word	0x40021800
 8005758:	20004db4 	.word	0x20004db4

0800575c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005760:	b672      	cpsid	i
}
 8005762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005764:	e7fe      	b.n	8005764 <Error_Handler+0x8>

08005766 <onesR3f>:
			}
		}
	}
}

void onesR3f(int filas, int columnas, int capas,float ***matriz){
 8005766:	b480      	push	{r7}
 8005768:	b089      	sub	sp, #36	; 0x24
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	603b      	str	r3, [r7, #0]
	for (int k = 0;k<capas;++k){
 8005774:	2300      	movs	r3, #0
 8005776:	61fb      	str	r3, [r7, #28]
 8005778:	e025      	b.n	80057c6 <onesR3f+0x60>
		for (int i = 0;i<filas;++i){
 800577a:	2300      	movs	r3, #0
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e01b      	b.n	80057b8 <onesR3f+0x52>
			for (int j = 0;j<columnas;++j){
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	e011      	b.n	80057aa <onesR3f+0x44>
				matriz[i][j][k] = 1;
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	4413      	add	r3, r2
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80057a2:	601a      	str	r2, [r3, #0]
			for (int j = 0;j<columnas;++j){
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	3301      	adds	r3, #1
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	dbe9      	blt.n	8005786 <onesR3f+0x20>
		for (int i = 0;i<filas;++i){
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	3301      	adds	r3, #1
 80057b6:	61bb      	str	r3, [r7, #24]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	429a      	cmp	r2, r3
 80057be:	dbdf      	blt.n	8005780 <onesR3f+0x1a>
	for (int k = 0;k<capas;++k){
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	3301      	adds	r3, #1
 80057c4:	61fb      	str	r3, [r7, #28]
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	dbd5      	blt.n	800577a <onesR3f+0x14>
			}
		}
	}
}
 80057ce:	bf00      	nop
 80057d0:	bf00      	nop
 80057d2:	3724      	adds	r7, #36	; 0x24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <zerosR3>:


void zerosR3(int filas, int columnas, int capas,int ***matriz){
 80057dc:	b480      	push	{r7}
 80057de:	b089      	sub	sp, #36	; 0x24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
	for (int k = 0;k<capas;++k){
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
 80057ee:	e024      	b.n	800583a <zerosR3+0x5e>
		for (int i = 0;i<filas;++i){
 80057f0:	2300      	movs	r3, #0
 80057f2:	61bb      	str	r3, [r7, #24]
 80057f4:	e01a      	b.n	800582c <zerosR3+0x50>
			for (int j = 0;j<columnas;++j){
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e010      	b.n	800581e <zerosR3+0x42>
				matriz[i][j][k] = 0;
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	4413      	add	r3, r2
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
			for (int j = 0;j<columnas;++j){
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	3301      	adds	r3, #1
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	429a      	cmp	r2, r3
 8005824:	dbea      	blt.n	80057fc <zerosR3+0x20>
		for (int i = 0;i<filas;++i){
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	3301      	adds	r3, #1
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	429a      	cmp	r2, r3
 8005832:	dbe0      	blt.n	80057f6 <zerosR3+0x1a>
	for (int k = 0;k<capas;++k){
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	3301      	adds	r3, #1
 8005838:	61fb      	str	r3, [r7, #28]
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	429a      	cmp	r2, r3
 8005840:	dbd6      	blt.n	80057f0 <zerosR3+0x14>
			}
		}
	}
}
 8005842:	bf00      	nop
 8005844:	bf00      	nop
 8005846:	3724      	adds	r7, #36	; 0x24
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <zerosR3f>:

void zerosR3f(int filas, int columnas, int capas,float ***matriz){
 8005850:	b480      	push	{r7}
 8005852:	b089      	sub	sp, #36	; 0x24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
	for (int k = 0;k<capas;++k){
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
 8005862:	e025      	b.n	80058b0 <zerosR3f+0x60>
		for (int i = 0;i<filas;++i){
 8005864:	2300      	movs	r3, #0
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	e01b      	b.n	80058a2 <zerosR3f+0x52>
			for (int j = 0;j<columnas;++j){
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	e011      	b.n	8005894 <zerosR3f+0x44>
				matriz[i][j][k] = 0;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	4413      	add	r3, r2
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
			for (int j = 0;j<columnas;++j){
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	3301      	adds	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	429a      	cmp	r2, r3
 800589a:	dbe9      	blt.n	8005870 <zerosR3f+0x20>
		for (int i = 0;i<filas;++i){
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	3301      	adds	r3, #1
 80058a0:	61bb      	str	r3, [r7, #24]
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	dbdf      	blt.n	800586a <zerosR3f+0x1a>
	for (int k = 0;k<capas;++k){
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3301      	adds	r3, #1
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	dbd5      	blt.n	8005864 <zerosR3f+0x14>
			}
		}
	}
}
 80058b8:	bf00      	nop
 80058ba:	bf00      	nop
 80058bc:	3724      	adds	r7, #36	; 0x24
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <findminMatrizR3>:

void findminMatrizR3(int filas,int columnas ,int capas, float ***matriz,int *out){
 80058c6:	b480      	push	{r7}
 80058c8:	b08d      	sub	sp, #52	; 0x34
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	607a      	str	r2, [r7, #4]
 80058d2:	603b      	str	r3, [r7, #0]
	int x= -1, y=-1,z = -1;
 80058d4:	f04f 33ff 	mov.w	r3, #4294967295
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058da:	f04f 33ff 	mov.w	r3, #4294967295
 80058de:	62bb      	str	r3, [r7, #40]	; 0x28
 80058e0:	f04f 33ff 	mov.w	r3, #4294967295
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
	float min_value = INFINITY;
 80058e6:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80058ea:	623b      	str	r3, [r7, #32]
	for (int i = 0;i<filas;++i)
 80058ec:	2300      	movs	r3, #0
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e03f      	b.n	8005972 <findminMatrizR3+0xac>
	{
		for (int j = 0;j<columnas;++j)
 80058f2:	2300      	movs	r3, #0
 80058f4:	61bb      	str	r3, [r7, #24]
 80058f6:	e035      	b.n	8005964 <findminMatrizR3+0x9e>
		{
			for (int k = 0;k<capas;++k)
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e02b      	b.n	8005956 <findminMatrizR3+0x90>
			{
				if (min_value > matriz[i][j][k]){
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	4413      	add	r3, r2
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	edd3 7a00 	vldr	s15, [r3]
 800591a:	ed97 7a08 	vldr	s14, [r7, #32]
 800591e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005926:	dd13      	ble.n	8005950 <findminMatrizR3+0x8a>
					min_value = matriz[i][j][k];
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	4413      	add	r3, r2
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	623b      	str	r3, [r7, #32]
					x = i; y = j; z = k;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
			for (int k = 0;k<capas;++k)
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	3301      	adds	r3, #1
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	429a      	cmp	r2, r3
 800595c:	dbcf      	blt.n	80058fe <findminMatrizR3+0x38>
		for (int j = 0;j<columnas;++j)
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	3301      	adds	r3, #1
 8005962:	61bb      	str	r3, [r7, #24]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	429a      	cmp	r2, r3
 800596a:	dbc5      	blt.n	80058f8 <findminMatrizR3+0x32>
	for (int i = 0;i<filas;++i)
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	3301      	adds	r3, #1
 8005970:	61fb      	str	r3, [r7, #28]
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	429a      	cmp	r2, r3
 8005978:	dbbb      	blt.n	80058f2 <findminMatrizR3+0x2c>
				}
			}
		}
	}

	out[0] = x;
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800597e:	601a      	str	r2, [r3, #0]
	out[1] = y;
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	3304      	adds	r3, #4
 8005984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005986:	601a      	str	r2, [r3, #0]
	out[2] = z;
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	3308      	adds	r3, #8
 800598c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598e:	601a      	str	r2, [r3, #0]
}
 8005990:	bf00      	nop
 8005992:	3734      	adds	r7, #52	; 0x34
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <prod_escalarMatrizR3>:

void prod_escalarMatrizR3(int filas,int columnas ,int capas, float ***matriz,float escalar){
 800599c:	b480      	push	{r7}
 800599e:	b08b      	sub	sp, #44	; 0x2c
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6178      	str	r0, [r7, #20]
 80059a4:	6139      	str	r1, [r7, #16]
 80059a6:	60fa      	str	r2, [r7, #12]
 80059a8:	60bb      	str	r3, [r7, #8]
 80059aa:	ed87 0a01 	vstr	s0, [r7, #4]
	for (int k = 0;k<capas;++k){
 80059ae:	2300      	movs	r3, #0
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
 80059b2:	e036      	b.n	8005a22 <prod_escalarMatrizR3+0x86>
		for (int i = 0;i<filas;++i){
 80059b4:	2300      	movs	r3, #0
 80059b6:	623b      	str	r3, [r7, #32]
 80059b8:	e02c      	b.n	8005a14 <prod_escalarMatrizR3+0x78>
			for (int j = 0;j<columnas;++j){
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	e022      	b.n	8005a06 <prod_escalarMatrizR3+0x6a>
				matriz[i][j][k] = escalar*matriz[i][j][k];
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	4413      	add	r3, r2
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	ed93 7a00 	vldr	s14, [r3]
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	4413      	add	r3, r2
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80059f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fc:	edc3 7a00 	vstr	s15, [r3]
			for (int j = 0;j<columnas;++j){
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	3301      	adds	r3, #1
 8005a04:	61fb      	str	r3, [r7, #28]
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	dbd8      	blt.n	80059c0 <prod_escalarMatrizR3+0x24>
		for (int i = 0;i<filas;++i){
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	3301      	adds	r3, #1
 8005a12:	623b      	str	r3, [r7, #32]
 8005a14:	6a3a      	ldr	r2, [r7, #32]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	dbce      	blt.n	80059ba <prod_escalarMatrizR3+0x1e>
	for (int k = 0;k<capas;++k){
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	3301      	adds	r3, #1
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
 8005a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	dbc4      	blt.n	80059b4 <prod_escalarMatrizR3+0x18>
			}
		}
	}
}
 8005a2a:	bf00      	nop
 8005a2c:	bf00      	nop
 8005a2e:	372c      	adds	r7, #44	; 0x2c
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <sum_vector_escalar>:
#include "math_vector.h"
#include <stdio.h>
#include <math.h>


void sum_vector_escalar(int len_vector,float v[len_vector],float valor, float *out){
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	ed87 0a01 	vstr	s0, [r7, #4]
 8005a46:	603a      	str	r2, [r7, #0]
	for ( int i = 0;i<len_vector;++i){
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e012      	b.n	8005a74 <sum_vector_escalar+0x3c>
		out[i] = valor + v[i];
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	4413      	add	r3, r2
 8005a56:	ed93 7a00 	vldr	s14, [r3]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	4413      	add	r3, r2
 8005a62:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a6a:	edc3 7a00 	vstr	s15, [r3]
	for ( int i = 0;i<len_vector;++i){
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	3301      	adds	r3, #1
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	dbe8      	blt.n	8005a4e <sum_vector_escalar+0x16>
	}
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <prod_vector_escalar>:
void prod_vector_escalar(int len_vector,float v[len_vector],float valor, float *out){
 8005a8a:	b480      	push	{r7}
 8005a8c:	b087      	sub	sp, #28
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	ed87 0a01 	vstr	s0, [r7, #4]
 8005a98:	603a      	str	r2, [r7, #0]
	for ( int i = 0;i<len_vector;++i){
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e012      	b.n	8005ac6 <prod_vector_escalar+0x3c>
		out[i] = valor*v[i];
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	ed93 7a00 	vldr	s14, [r3]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005abc:	edc3 7a00 	vstr	s15, [r3]
	for ( int i = 0;i<len_vector;++i){
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	dbe8      	blt.n	8005aa0 <prod_vector_escalar+0x16>
	}
}
 8005ace:	bf00      	nop
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <linspace>:
	}
	return sum;
}


void linspace(float *vector,float inicio,float fin, int muestras){
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ae8:	edc7 0a01 	vstr	s1, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
	float paso = (float)(fin-inicio)/(muestras-1);
 8005aee:	ed97 7a01 	vldr	s14, [r7, #4]
 8005af2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005af6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b0a:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0;  i < muestras; ++i ){
 8005b0e:	2300      	movs	r3, #0
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	e015      	b.n	8005b40 <linspace+0x64>
			*(vector + i) = (float)inicio + paso*i;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b36:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0;  i < muestras; ++i ){
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	dbe5      	blt.n	8005b14 <linspace+0x38>
		}
}
 8005b48:	bf00      	nop
 8005b4a:	bf00      	nop
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
	...

08005b58 <generate_vector>:

void generate_vector(float *vector ,float inicio, float fin, float paso){
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b64:	edc7 0a01 	vstr	s1, [r7, #4]
 8005b68:	ed87 1a00 	vstr	s2, [r7]
	int n = ((fin - inicio)/paso)+1.000009;
 8005b6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b70:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b78:	edd7 7a00 	vldr	s15, [r7]
 8005b7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b80:	ee16 0a90 	vmov	r0, s13
 8005b84:	f7fa fd08 	bl	8000598 <__aeabi_f2d>
 8005b88:	a317      	add	r3, pc, #92	; (adr r3, 8005be8 <generate_vector+0x90>)
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f7fa fba5 	bl	80002dc <__adddf3>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4610      	mov	r0, r2
 8005b98:	4619      	mov	r1, r3
 8005b9a:	f7fb f805 	bl	8000ba8 <__aeabi_d2iz>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < n; ++i ){
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	e015      	b.n	8005bd4 <generate_vector+0x7c>
			*(vector + i) = inicio + paso*i;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bb2:	edd7 7a00 	vldr	s15, [r7]
 8005bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bca:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0;  i < n; ++i ){
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	dbe5      	blt.n	8005ba8 <generate_vector+0x50>
		}
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	6feb4a66 	.word	0x6feb4a66
 8005bec:	3ff00009 	.word	0x3ff00009

08005bf0 <find>:
	printf("]';\n");
}



int find(float value, int len, float *v, float error){
 8005bf0:	b5b0      	push	{r4, r5, r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	ed87 0a03 	vstr	s0, [r7, #12]
 8005bfa:	60b8      	str	r0, [r7, #8]
 8005bfc:	6079      	str	r1, [r7, #4]
 8005bfe:	edc7 0a00 	vstr	s1, [r7]
	int index = -1;
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295
 8005c06:	61fb      	str	r3, [r7, #28]
	if (len>=2){
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	f340 80c8 	ble.w	8005da0 <find+0x1b0>
		if (fabsf(v[1]-v[0]) - (v[len-1] - v[len-2]) < 0.0000009 && error == -1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3304      	adds	r3, #4
 8005c14:	ed93 7a00 	vldr	s14, [r3]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	edd3 7a00 	vldr	s15, [r3]
 8005c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c22:	eeb0 7ae7 	vabs.f32	s14, s15
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	4413      	add	r3, r2
 8005c34:	edd3 6a00 	vldr	s13, [r3]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c3e:	3b02      	subs	r3, #2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	4413      	add	r3, r2
 8005c46:	edd3 7a00 	vldr	s15, [r3]
 8005c4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c52:	ee17 0a90 	vmov	r0, s15
 8005c56:	f7fa fc9f 	bl	8000598 <__aeabi_f2d>
 8005c5a:	a35d      	add	r3, pc, #372	; (adr r3, 8005dd0 <find+0x1e0>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	f7fa ff64 	bl	8000b2c <__aeabi_dcmplt>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d039      	beq.n	8005cde <find+0xee>
 8005c6a:	edd7 7a00 	vldr	s15, [r7]
 8005c6e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005c72:	eef4 7a47 	vcmp.f32	s15, s14
 8005c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7a:	d130      	bne.n	8005cde <find+0xee>
		{
			index = (value - v[0])/(v[1]-v[0]) + 0.5;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	edd3 7a00 	vldr	s15, [r3]
 8005c82:	ed97 7a03 	vldr	s14, [r7, #12]
 8005c86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	edd3 6a00 	vldr	s13, [r3]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	edd3 7a00 	vldr	s15, [r3]
 8005c98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005c9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005ca0:	ee16 0a90 	vmov	r0, s13
 8005ca4:	f7fa fc78 	bl	8000598 <__aeabi_f2d>
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	4b4a      	ldr	r3, [pc, #296]	; (8005dd8 <find+0x1e8>)
 8005cae:	f7fa fb15 	bl	80002dc <__adddf3>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	4619      	mov	r1, r3
 8005cba:	f7fa ff75 	bl	8000ba8 <__aeabi_d2iz>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	61fb      	str	r3, [r7, #28]
			if (index > len-1)
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	dc03      	bgt.n	8005cd2 <find+0xe2>
				index = len-1;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	61fb      	str	r3, [r7, #28]
			if (index > len-1)
 8005cd0:	e076      	b.n	8005dc0 <find+0x1d0>
			else if (index < 0)
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	da73      	bge.n	8005dc0 <find+0x1d0>
				index = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61fb      	str	r3, [r7, #28]
			if (index > len-1)
 8005cdc:	e070      	b.n	8005dc0 <find+0x1d0>
		}
		else
		{
			int i = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61bb      	str	r3, [r7, #24]
			while( i< len && fabsf(value) != INFINITY)
 8005ce2:	e028      	b.n	8005d36 <find+0x146>
			{
				if (fabsf(value-v[i])< error + 0.0000009){
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	4413      	add	r3, r2
 8005cec:	edd3 7a00 	vldr	s15, [r3]
 8005cf0:	ed97 7a03 	vldr	s14, [r7, #12]
 8005cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cf8:	eef0 7ae7 	vabs.f32	s15, s15
 8005cfc:	ee17 0a90 	vmov	r0, s15
 8005d00:	f7fa fc4a 	bl	8000598 <__aeabi_f2d>
 8005d04:	4604      	mov	r4, r0
 8005d06:	460d      	mov	r5, r1
 8005d08:	6838      	ldr	r0, [r7, #0]
 8005d0a:	f7fa fc45 	bl	8000598 <__aeabi_f2d>
 8005d0e:	a330      	add	r3, pc, #192	; (adr r3, 8005dd0 <find+0x1e0>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f7fa fae2 	bl	80002dc <__adddf3>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	4629      	mov	r1, r5
 8005d20:	f7fa ff04 	bl	8000b2c <__aeabi_dcmplt>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <find+0x140>
					index = i;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	61fb      	str	r3, [r7, #28]
					break;
 8005d2e:	e011      	b.n	8005d54 <find+0x164>
				}
				i++;
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	3301      	adds	r3, #1
 8005d34:	61bb      	str	r3, [r7, #24]
			while( i< len && fabsf(value) != INFINITY)
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	da0a      	bge.n	8005d54 <find+0x164>
 8005d3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d42:	eef0 7ae7 	vabs.f32	s15, s15
 8005d46:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005ddc <find+0x1ec>
 8005d4a:	eef4 7a47 	vcmp.f32	s15, s14
 8005d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d52:	ddc7      	ble.n	8005ce4 <find+0xf4>
			}
			if (fabsf(value) == INFINITY)
 8005d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d58:	eef0 7ae7 	vabs.f32	s15, s15
 8005d5c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005de0 <find+0x1f0>
 8005d60:	eef4 7a47 	vcmp.f32	s15, s14
 8005d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d68:	d12b      	bne.n	8005dc2 <find+0x1d2>
			{
				int i = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]
				while( i< len )
 8005d6e:	e012      	b.n	8005d96 <find+0x1a6>
				{
					if (value == v[i] ){
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	4413      	add	r3, r2
 8005d78:	edd3 7a00 	vldr	s15, [r3]
 8005d7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005d80:	eeb4 7a67 	vcmp.f32	s14, s15
 8005d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d88:	d102      	bne.n	8005d90 <find+0x1a0>
						index = i;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	61fb      	str	r3, [r7, #28]
						break;
 8005d8e:	e018      	b.n	8005dc2 <find+0x1d2>
					}
					i++;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	3301      	adds	r3, #1
 8005d94:	617b      	str	r3, [r7, #20]
				while( i< len )
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	dbe8      	blt.n	8005d70 <find+0x180>
 8005d9e:	e010      	b.n	8005dc2 <find+0x1d2>
				}
			}

		}
	}
	else if (len == 1)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d10d      	bne.n	8005dc2 <find+0x1d2>
	{
		if (value == v[0] )
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	edd3 7a00 	vldr	s15, [r3]
 8005dac:	ed97 7a03 	vldr	s14, [r7, #12]
 8005db0:	eeb4 7a67 	vcmp.f32	s14, s15
 8005db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db8:	d103      	bne.n	8005dc2 <find+0x1d2>
			index = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61fb      	str	r3, [r7, #28]
 8005dbe:	e000      	b.n	8005dc2 <find+0x1d2>
			if (index > len-1)
 8005dc0:	bf00      	nop
	}
	return index;
 8005dc2:	69fb      	ldr	r3, [r7, #28]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3720      	adds	r7, #32
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bdb0      	pop	{r4, r5, r7, pc}
 8005dcc:	f3af 8000 	nop.w
 8005dd0:	ee144531 	.word	0xee144531
 8005dd4:	3eae32f0 	.word	0x3eae32f0
 8005dd8:	3fe00000 	.word	0x3fe00000
 8005ddc:	7f7fffff 	.word	0x7f7fffff
 8005de0:	7f800000 	.word	0x7f800000
 8005de4:	00000000 	.word	0x00000000

08005de8 <find_int>:



int find_int(int value, int len, int *v, float error){
 8005de8:	b5b0      	push	{r4, r5, r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	ed87 0a00 	vstr	s0, [r7]
	int index = -1;
 8005df8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfc:	617b      	str	r3, [r7, #20]
			int i = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
			while( i< len){
 8005e02:	e029      	b.n	8005e58 <find_int+0x70>
				if (fabsf(value-v[i])< error + 0.0000009){
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e1a:	eef0 7ae7 	vabs.f32	s15, s15
 8005e1e:	ee17 0a90 	vmov	r0, s15
 8005e22:	f7fa fbb9 	bl	8000598 <__aeabi_f2d>
 8005e26:	4604      	mov	r4, r0
 8005e28:	460d      	mov	r5, r1
 8005e2a:	6838      	ldr	r0, [r7, #0]
 8005e2c:	f7fa fbb4 	bl	8000598 <__aeabi_f2d>
 8005e30:	a30f      	add	r3, pc, #60	; (adr r3, 8005e70 <find_int+0x88>)
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f7fa fa51 	bl	80002dc <__adddf3>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	4620      	mov	r0, r4
 8005e40:	4629      	mov	r1, r5
 8005e42:	f7fa fe73 	bl	8000b2c <__aeabi_dcmplt>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <find_int+0x6a>
					index = i;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	617b      	str	r3, [r7, #20]
					break;
 8005e50:	e006      	b.n	8005e60 <find_int+0x78>
				}
				i++;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	3301      	adds	r3, #1
 8005e56:	613b      	str	r3, [r7, #16]
			while( i< len){
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	dbd1      	blt.n	8005e04 <find_int+0x1c>
			}
	return index;
 8005e60:	697b      	ldr	r3, [r7, #20]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bdb0      	pop	{r4, r5, r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	f3af 8000 	nop.w
 8005e70:	ee144531 	.word	0xee144531
 8005e74:	3eae32f0 	.word	0x3eae32f0

08005e78 <min_v>:


float min_v(int len, float *v){
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
	float a = v[0];
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
	for (int i = 1;i<len;++i){
 8005e88:	2301      	movs	r3, #1
 8005e8a:	60bb      	str	r3, [r7, #8]
 8005e8c:	e017      	b.n	8005ebe <min_v+0x46>
		a = a > v[i] ? v[i] : a;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	4413      	add	r3, r2
 8005e96:	edd3 7a00 	vldr	s15, [r3]
 8005e9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8005e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea6:	dd05      	ble.n	8005eb4 <min_v+0x3c>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	4413      	add	r3, r2
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	e000      	b.n	8005eb6 <min_v+0x3e>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	60fb      	str	r3, [r7, #12]
	for (int i = 1;i<len;++i){
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	dbe3      	blt.n	8005e8e <min_v+0x16>
	}
	return a;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	ee07 3a90 	vmov	s15, r3
}
 8005ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <remove_value_position>:
		(*len_dir)--;
	}
	return pos_removed;
}

void remove_value_position(int *len_dir,float *v, int pos){
 8005eda:	b480      	push	{r7}
 8005edc:	b087      	sub	sp, #28
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]
	int len = *len_dir;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	613b      	str	r3, [r7, #16]
	if (pos>=0 && pos<len)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	db1e      	blt.n	8005f30 <remove_value_position+0x56>
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	da1a      	bge.n	8005f30 <remove_value_position+0x56>
	{
		for (int i = pos;i<len-1;++i)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	e00d      	b.n	8005f1c <remove_value_position+0x42>
		{
			v[i] = v[i+1];}
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	3301      	adds	r3, #1
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	441a      	add	r2, r3
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	440b      	add	r3, r1
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	601a      	str	r2, [r3, #0]
		for (int i = pos;i<len-1;++i)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	dbec      	blt.n	8005f00 <remove_value_position+0x26>
		(*len_dir)--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	1e5a      	subs	r2, r3, #1
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	601a      	str	r2, [r3, #0]
	}
}
 8005f30:	bf00      	nop
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	0000      	movs	r0, r0
	...

08005f40 <setdiff_int>:

int setdiff_int(int *len_dir,int *v,int value){
 8005f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f44:	b08d      	sub	sp, #52	; 0x34
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	466b      	mov	r3, sp
 8005f50:	461e      	mov	r6, r3
	int len =  *len_dir;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	61bb      	str	r3, [r7, #24]
	float aux[len-1];
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	1e59      	subs	r1, r3, #1
 8005f5c:	1e4b      	subs	r3, r1, #1
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	460a      	mov	r2, r1
 8005f62:	2300      	movs	r3, #0
 8005f64:	4690      	mov	r8, r2
 8005f66:	4699      	mov	r9, r3
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8005f74:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8005f78:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8005f7c:	460a      	mov	r2, r1
 8005f7e:	2300      	movs	r3, #0
 8005f80:	4614      	mov	r4, r2
 8005f82:	461d      	mov	r5, r3
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	016b      	lsls	r3, r5, #5
 8005f8e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8005f92:	0162      	lsls	r2, r4, #5
 8005f94:	460b      	mov	r3, r1
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	3307      	adds	r3, #7
 8005f9a:	08db      	lsrs	r3, r3, #3
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	ebad 0d03 	sub.w	sp, sp, r3
 8005fa2:	466b      	mov	r3, sp
 8005fa4:	3303      	adds	r3, #3
 8005fa6:	089b      	lsrs	r3, r3, #2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	613b      	str	r3, [r7, #16]
	int cont = 0 ,j = 0, pos_removed = -1;
 8005fac:	2300      	movs	r3, #0
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0 ;i<len;++i)
 8005fba:	2300      	movs	r3, #0
 8005fbc:	623b      	str	r3, [r7, #32]
 8005fbe:	e035      	b.n	800602c <setdiff_int+0xec>
	{
		if (fabsf(value-v[i])< 0.0000009 && cont == 0){
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fd6:	eef0 7ae7 	vabs.f32	s15, s15
 8005fda:	ee17 0a90 	vmov	r0, s15
 8005fde:	f7fa fadb 	bl	8000598 <__aeabi_f2d>
 8005fe2:	a329      	add	r3, pc, #164	; (adr r3, 8006088 <setdiff_int+0x148>)
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f7fa fda0 	bl	8000b2c <__aeabi_dcmplt>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <setdiff_int+0xc2>
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <setdiff_int+0xc2>
			cont = 1;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
			pos_removed = i;
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006000:	e011      	b.n	8006026 <setdiff_int+0xe6>
		}
		else{
			aux[j] = v[i];
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	4413      	add	r3, r2
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	edc3 7a00 	vstr	s15, [r3]
			j++;
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	3301      	adds	r3, #1
 8006024:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = 0 ;i<len;++i)
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	3301      	adds	r3, #1
 800602a:	623b      	str	r3, [r7, #32]
 800602c:	6a3a      	ldr	r2, [r7, #32]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	429a      	cmp	r2, r3
 8006032:	dbc5      	blt.n	8005fc0 <setdiff_int+0x80>
		}
	}
	if (cont == 1)
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	2b01      	cmp	r3, #1
 8006038:	d11e      	bne.n	8006078 <setdiff_int+0x138>
	{
		for(int i =0 ;i<len-1;++i)
 800603a:	2300      	movs	r3, #0
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	e011      	b.n	8006064 <setdiff_int+0x124>
		{
			v[i] = aux[i];
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	edd3 7a00 	vldr	s15, [r3]
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	4413      	add	r3, r2
 8006054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006058:	ee17 2a90 	vmov	r2, s15
 800605c:	601a      	str	r2, [r3, #0]
		for(int i =0 ;i<len-1;++i)
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	3301      	adds	r3, #1
 8006062:	61fb      	str	r3, [r7, #28]
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	3b01      	subs	r3, #1
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	429a      	cmp	r2, r3
 800606c:	dbe8      	blt.n	8006040 <setdiff_int+0x100>
		}
		(*len_dir)--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	1e5a      	subs	r2, r3, #1
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	601a      	str	r2, [r3, #0]
	}
	return pos_removed;
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	46b5      	mov	sp, r6
}
 800607c:	4618      	mov	r0, r3
 800607e:	3734      	adds	r7, #52	; 0x34
 8006080:	46bd      	mov	sp, r7
 8006082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006086:	bf00      	nop
 8006088:	ee144531 	.word	0xee144531
 800608c:	3eae32f0 	.word	0x3eae32f0

08006090 <ISE_calc>:
#include <stdio.h>
#include "performance_indices.h"


float ISE_calc(int muestras,float e[muestras], float dt)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	ed87 0a01 	vstr	s0, [r7, #4]
	float ISE = 0;
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	617b      	str	r3, [r7, #20]
	for (int i=1;i < muestras;++i){
 80060a4:	2301      	movs	r3, #1
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	e034      	b.n	8006114 <ISE_calc+0x84>
			ISE += ((e[i]*e[i]+e[i-1]*e[i-1])/2)*dt;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	4413      	add	r3, r2
 80060b2:	ed93 7a00 	vldr	s14, [r3]
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	4413      	add	r3, r2
 80060be:	edd3 7a00 	vldr	s15, [r3]
 80060c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060cc:	3b01      	subs	r3, #1
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	4413      	add	r3, r2
 80060d4:	edd3 6a00 	vldr	s13, [r3]
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060de:	3b01      	subs	r3, #1
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	4413      	add	r3, r2
 80060e6:	edd3 7a00 	vldr	s15, [r3]
 80060ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80060f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80060fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80060fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006102:	ed97 7a05 	vldr	s14, [r7, #20]
 8006106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800610a:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i=1;i < muestras;++i){
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	3301      	adds	r3, #1
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	429a      	cmp	r2, r3
 800611a:	dbc6      	blt.n	80060aa <ISE_calc+0x1a>
	}

	return ISE;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	ee07 3a90 	vmov	s15, r3
}
 8006122:	eeb0 0a67 	vmov.f32	s0, s15
 8006126:	371c      	adds	r7, #28
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <ITSE_calc>:

float ITSE_calc(int muestras,float e[muestras],float t[muestras], float dt)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	ed87 0a00 	vstr	s0, [r7]
	float ITSE = 0;
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
	for (int i=1;i<muestras;++i){
 8006146:	2301      	movs	r3, #1
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	e047      	b.n	80061dc <ITSE_calc+0xac>
			ITSE += ((t[i]*e[i]*e[i]+t[i-1]*e[i-1]*e[i-1])/2)*dt;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	4413      	add	r3, r2
 8006154:	ed93 7a00 	vldr	s14, [r3]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	4413      	add	r3, r2
 8006160:	edd3 7a00 	vldr	s15, [r3]
 8006164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	4413      	add	r3, r2
 8006170:	edd3 7a00 	vldr	s15, [r3]
 8006174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800617e:	3b01      	subs	r3, #1
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	4413      	add	r3, r2
 8006186:	edd3 6a00 	vldr	s13, [r3]
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006190:	3b01      	subs	r3, #1
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	4413      	add	r3, r2
 8006198:	edd3 7a00 	vldr	s15, [r3]
 800619c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061a6:	3b01      	subs	r3, #1
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	4413      	add	r3, r2
 80061ae:	edd3 7a00 	vldr	s15, [r3]
 80061b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80061be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061c2:	edd7 7a00 	vldr	s15, [r7]
 80061c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80061ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061d2:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i=1;i<muestras;++i){
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	3301      	adds	r3, #1
 80061da:	613b      	str	r3, [r7, #16]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	dbb3      	blt.n	800614c <ITSE_calc+0x1c>
	}

	return ITSE;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	ee07 3a90 	vmov	s15, r3
}
 80061ea:	eeb0 0a67 	vmov.f32	s0, s15
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <IAE_calc>:


float IAE_calc(int muestras,float e[muestras], float dt)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	ed87 0a01 	vstr	s0, [r7, #4]
	float IAE = 0;
 8006206:	f04f 0300 	mov.w	r3, #0
 800620a:	617b      	str	r3, [r7, #20]

	for (int i=1;i<muestras;++i){
 800620c:	2301      	movs	r3, #1
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	e025      	b.n	800625e <IAE_calc+0x66>
			IAE += ((fabsf(e[i])+fabsf(e[i-1]))/2)*dt;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	4413      	add	r3, r2
 800621a:	edd3 7a00 	vldr	s15, [r3]
 800621e:	eeb0 7ae7 	vabs.f32	s14, s15
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006228:	3b01      	subs	r3, #1
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	4413      	add	r3, r2
 8006230:	edd3 7a00 	vldr	s15, [r3]
 8006234:	eef0 7ae7 	vabs.f32	s15, s15
 8006238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800623c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006240:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006244:	edd7 7a01 	vldr	s15, [r7, #4]
 8006248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006254:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i=1;i<muestras;++i){
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	3301      	adds	r3, #1
 800625c:	613b      	str	r3, [r7, #16]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	429a      	cmp	r2, r3
 8006264:	dbd5      	blt.n	8006212 <IAE_calc+0x1a>
	}

	return IAE;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	ee07 3a90 	vmov	s15, r3
}
 800626c:	eeb0 0a67 	vmov.f32	s0, s15
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <ITAE_calc>:


float ITAE_calc(int muestras,float e[muestras],float t[muestras], float dt)
{
 800627a:	b480      	push	{r7}
 800627c:	b087      	sub	sp, #28
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	ed87 0a00 	vstr	s0, [r7]
	float ITAE = 0;
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	617b      	str	r3, [r7, #20]

	for (int i=1;i<muestras;++i){
 8006290:	2301      	movs	r3, #1
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	e038      	b.n	8006308 <ITAE_calc+0x8e>
			ITAE += ((t[i]*fabsf(e[i])+t[i-1]*fabsf(e[i-1]))/2)*dt;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	4413      	add	r3, r2
 800629e:	ed93 7a00 	vldr	s14, [r3]
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	4413      	add	r3, r2
 80062aa:	edd3 7a00 	vldr	s15, [r3]
 80062ae:	eef0 7ae7 	vabs.f32	s15, s15
 80062b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062bc:	3b01      	subs	r3, #1
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	4413      	add	r3, r2
 80062c4:	edd3 6a00 	vldr	s13, [r3]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062ce:	3b01      	subs	r3, #1
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	4413      	add	r3, r2
 80062d6:	edd3 7a00 	vldr	s15, [r3]
 80062da:	eef0 7ae7 	vabs.f32	s15, s15
 80062de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062e6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80062ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80062ee:	edd7 7a00 	vldr	s15, [r7]
 80062f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80062fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062fe:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i=1;i<muestras;++i){
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	3301      	adds	r3, #1
 8006306:	613b      	str	r3, [r7, #16]
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	429a      	cmp	r2, r3
 800630e:	dbc2      	blt.n	8006296 <ITAE_calc+0x1c>
	}

	return ITAE;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	ee07 3a90 	vmov	s15, r3
}
 8006316:	eeb0 0a67 	vmov.f32	s0, s15
 800631a:	371c      	adds	r7, #28
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <SettlingTime>:


float SettlingTime(int muestras,float *t, float *y,float yinit, float yfinal,float porcentaje){
 8006324:	b480      	push	{r7}
 8006326:	b08b      	sub	sp, #44	; 0x2c
 8006328:	af00      	add	r7, sp, #0
 800632a:	6178      	str	r0, [r7, #20]
 800632c:	6139      	str	r1, [r7, #16]
 800632e:	60fa      	str	r2, [r7, #12]
 8006330:	ed87 0a02 	vstr	s0, [r7, #8]
 8006334:	edc7 0a01 	vstr	s1, [r7, #4]
 8006338:	ed87 1a00 	vstr	s2, [r7]

	float tss = NAN, yaux = yfinal;
 800633c:	4b5e      	ldr	r3, [pc, #376]	; (80064b8 <SettlingTime+0x194>)
 800633e:	627b      	str	r3, [r7, #36]	; 0x24
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	623b      	str	r3, [r7, #32]
	float  ajuste=0;
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	61bb      	str	r3, [r7, #24]
	int i = muestras-1;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	3b01      	subs	r3, #1
 800634e:	61fb      	str	r3, [r7, #28]

	while (fabsf((y[i]-yfinal)/(yfinal-yinit))<=porcentaje && i>=0){
 8006350:	e002      	b.n	8006358 <SettlingTime+0x34>
		i--;
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	3b01      	subs	r3, #1
 8006356:	61fb      	str	r3, [r7, #28]
	while (fabsf((y[i]-yfinal)/(yfinal-yinit))<=porcentaje && i>=0){
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	ed93 7a00 	vldr	s14, [r3]
 8006364:	edd7 7a01 	vldr	s15, [r7, #4]
 8006368:	ee77 6a67 	vsub.f32	s13, s14, s15
 800636c:	ed97 7a01 	vldr	s14, [r7, #4]
 8006370:	edd7 7a02 	vldr	s15, [r7, #8]
 8006374:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800637c:	eef0 7ae7 	vabs.f32	s15, s15
 8006380:	ed97 7a00 	vldr	s14, [r7]
 8006384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800638c:	db02      	blt.n	8006394 <SettlingTime+0x70>
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	2b00      	cmp	r3, #0
 8006392:	dade      	bge.n	8006352 <SettlingTime+0x2e>
	}
	//ajuste lineal para un valor mas aproximado del tiempo;

	if (i != muestras-1){
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	3b01      	subs	r3, #1
 8006398:	69fa      	ldr	r2, [r7, #28]
 800639a:	429a      	cmp	r2, r3
 800639c:	f000 8081 	beq.w	80064a2 <SettlingTime+0x17e>
	if ((y[i]-yfinal)/(yfinal-yinit)>0)
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	ed93 7a00 	vldr	s14, [r3]
 80063ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80063b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80063b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80063b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80063bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063cc:	dd0c      	ble.n	80063e8 <SettlingTime+0xc4>
		yaux = yfinal*(1+porcentaje);
 80063ce:	edd7 7a00 	vldr	s15, [r7]
 80063d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063da:	ed97 7a01 	vldr	s14, [r7, #4]
 80063de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e2:	edc7 7a08 	vstr	s15, [r7, #32]
 80063e6:	e022      	b.n	800642e <SettlingTime+0x10a>
	else if ((y[i]-yfinal)/(yfinal-yinit)<0)
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	ed93 7a00 	vldr	s14, [r3]
 80063f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80063f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80063fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8006400:	edd7 7a02 	vldr	s15, [r7, #8]
 8006404:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800640c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006414:	d50b      	bpl.n	800642e <SettlingTime+0x10a>
		yaux = yfinal*(1-porcentaje);
 8006416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800641a:	edd7 7a00 	vldr	s15, [r7]
 800641e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006422:	ed97 7a01 	vldr	s14, [r7, #4]
 8006426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642a:	edc7 7a08 	vstr	s15, [r7, #32]

	ajuste = (t[i+1]-t[i])/(y[i+1]-y[i])*(yaux-y[i]);
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	3301      	adds	r3, #1
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4413      	add	r3, r2
 8006438:	ed93 7a00 	vldr	s14, [r3]
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4413      	add	r3, r2
 8006444:	edd3 7a00 	vldr	s15, [r3]
 8006448:	ee77 6a67 	vsub.f32	s13, s14, s15
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	3301      	adds	r3, #1
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	ed93 7a00 	vldr	s14, [r3]
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4413      	add	r3, r2
 8006462:	edd3 7a00 	vldr	s15, [r3]
 8006466:	ee77 7a67 	vsub.f32	s15, s14, s15
 800646a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4413      	add	r3, r2
 8006476:	edd3 7a00 	vldr	s15, [r3]
 800647a:	edd7 6a08 	vldr	s13, [r7, #32]
 800647e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006486:	edc7 7a06 	vstr	s15, [r7, #24]

	tss = t[i]+ajuste;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4413      	add	r3, r2
 8006492:	edd3 7a00 	vldr	s15, [r3]
 8006496:	ed97 7a06 	vldr	s14, [r7, #24]
 800649a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800649e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	return tss;
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	ee07 3a90 	vmov	s15, r3
}
 80064a8:	eeb0 0a67 	vmov.f32	s0, s15
 80064ac:	372c      	adds	r7, #44	; 0x2c
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	7fc00000 	.word	0x7fc00000

080064bc <Overshoot>:


float Overshoot(int muestras, float *y,float yinit, float yfinal){
 80064bc:	b480      	push	{r7}
 80064be:	b089      	sub	sp, #36	; 0x24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80064ca:	edc7 0a00 	vstr	s1, [r7]

	float OS = INFINITY;
 80064ce:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80064d2:	61fb      	str	r3, [r7, #28]
	float max_num = 0;
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	61bb      	str	r3, [r7, #24]
	for (int i=0 ; i<muestras;++i)
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	e037      	b.n	8006550 <Overshoot+0x94>
	{
		if ((y[i]-yinit)/(yfinal-yinit)-1 > max_num)
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	4413      	add	r3, r2
 80064e8:	ed93 7a00 	vldr	s14, [r3]
 80064ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80064f0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80064f4:	ed97 7a00 	vldr	s14, [r7]
 80064f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80064fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006508:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800650c:	ed97 7a06 	vldr	s14, [r7, #24]
 8006510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006518:	d517      	bpl.n	800654a <Overshoot+0x8e>
			max_num = ((y[i]-yinit)/(yfinal-yinit)-1);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4413      	add	r3, r2
 8006522:	ed93 7a00 	vldr	s14, [r3]
 8006526:	edd7 7a01 	vldr	s15, [r7, #4]
 800652a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800652e:	ed97 7a00 	vldr	s14, [r7]
 8006532:	edd7 7a01 	vldr	s15, [r7, #4]
 8006536:	ee37 7a67 	vsub.f32	s14, s14, s15
 800653a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800653e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006542:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006546:	edc7 7a06 	vstr	s15, [r7, #24]
	for (int i=0 ; i<muestras;++i)
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	3301      	adds	r3, #1
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	429a      	cmp	r2, r3
 8006556:	dbc3      	blt.n	80064e0 <Overshoot+0x24>
	}
	if (max_num>0)
 8006558:	edd7 7a06 	vldr	s15, [r7, #24]
 800655c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006564:	dd07      	ble.n	8006576 <Overshoot+0xba>
		OS = max_num*100;
 8006566:	edd7 7a06 	vldr	s15, [r7, #24]
 800656a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800658c <Overshoot+0xd0>
 800656e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006572:	edc7 7a07 	vstr	s15, [r7, #28]
	return OS;
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	ee07 3a90 	vmov	s15, r3
}
 800657c:	eeb0 0a67 	vmov.f32	s0, s15
 8006580:	3724      	adds	r7, #36	; 0x24
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	42c80000 	.word	0x42c80000

08006590 <RiseTime>:

float RiseTime(int muestras,float *t, float *y,float yinit,float yfinal){
 8006590:	b580      	push	{r7, lr}
 8006592:	b08a      	sub	sp, #40	; 0x28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6178      	str	r0, [r7, #20]
 8006598:	6139      	str	r1, [r7, #16]
 800659a:	60fa      	str	r2, [r7, #12]
 800659c:	ed87 0a02 	vstr	s0, [r7, #8]
 80065a0:	edc7 0a01 	vstr	s1, [r7, #4]
	float tr = 0;
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
	int i1 = 0,i2 = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	2300      	movs	r3, #0
 80065b0:	61bb      	str	r3, [r7, #24]
	int i = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	623b      	str	r3, [r7, #32]

	while((y[i]-yinit)/(yfinal-yinit) <= 0.1 && i<muestras){
 80065b6:	e002      	b.n	80065be <RiseTime+0x2e>
		i++;
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	3301      	adds	r3, #1
 80065bc:	623b      	str	r3, [r7, #32]
	while((y[i]-yinit)/(yfinal-yinit) <= 0.1 && i<muestras){
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4413      	add	r3, r2
 80065c6:	ed93 7a00 	vldr	s14, [r3]
 80065ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80065ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065d2:	edd7 6a01 	vldr	s13, [r7, #4]
 80065d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80065da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80065de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80065e2:	ee16 0a90 	vmov	r0, s13
 80065e6:	f7f9 ffd7 	bl	8000598 <__aeabi_f2d>
 80065ea:	a32f      	add	r3, pc, #188	; (adr r3, 80066a8 <RiseTime+0x118>)
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f7fa faa6 	bl	8000b40 <__aeabi_dcmple>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <RiseTime+0x72>
 80065fa:	6a3a      	ldr	r2, [r7, #32]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	429a      	cmp	r2, r3
 8006600:	dbda      	blt.n	80065b8 <RiseTime+0x28>
	}
	i1 = i;
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	61fb      	str	r3, [r7, #28]
	while((y[i]-yinit)/(yfinal-yinit) <= 0.9 && i<muestras){
 8006606:	e002      	b.n	800660e <RiseTime+0x7e>
		i++;
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	3301      	adds	r3, #1
 800660c:	623b      	str	r3, [r7, #32]
	while((y[i]-yinit)/(yfinal-yinit) <= 0.9 && i<muestras){
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4413      	add	r3, r2
 8006616:	ed93 7a00 	vldr	s14, [r3]
 800661a:	edd7 7a02 	vldr	s15, [r7, #8]
 800661e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006622:	edd7 6a01 	vldr	s13, [r7, #4]
 8006626:	edd7 7a02 	vldr	s15, [r7, #8]
 800662a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800662e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006632:	ee16 0a90 	vmov	r0, s13
 8006636:	f7f9 ffaf 	bl	8000598 <__aeabi_f2d>
 800663a:	a31d      	add	r3, pc, #116	; (adr r3, 80066b0 <RiseTime+0x120>)
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	f7fa fa7e 	bl	8000b40 <__aeabi_dcmple>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <RiseTime+0xc2>
 800664a:	6a3a      	ldr	r2, [r7, #32]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	429a      	cmp	r2, r3
 8006650:	dbda      	blt.n	8006608 <RiseTime+0x78>
	}
	i2 = i;
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	61bb      	str	r3, [r7, #24]

	if ((i1 !=0 || i1 != muestras )&& (i2!=0 ||i2!=muestras) )
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d103      	bne.n	8006664 <RiseTime+0xd4>
 800665c:	69fa      	ldr	r2, [r7, #28]
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	429a      	cmp	r2, r3
 8006662:	d016      	beq.n	8006692 <RiseTime+0x102>
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d103      	bne.n	8006672 <RiseTime+0xe2>
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	429a      	cmp	r2, r3
 8006670:	d00f      	beq.n	8006692 <RiseTime+0x102>
		tr = t[i2]-t[i1];
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4413      	add	r3, r2
 800667a:	ed93 7a00 	vldr	s14, [r3]
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4413      	add	r3, r2
 8006686:	edd3 7a00 	vldr	s15, [r3]
 800668a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800668e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	return tr;
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	ee07 3a90 	vmov	s15, r3
}
 8006698:	eeb0 0a67 	vmov.f32	s0, s15
 800669c:	3728      	adds	r7, #40	; 0x28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	f3af 8000 	nop.w
 80066a8:	9999999a 	.word	0x9999999a
 80066ac:	3fb99999 	.word	0x3fb99999
 80066b0:	cccccccd 	.word	0xcccccccd
 80066b4:	3feccccc 	.word	0x3feccccc

080066b8 <PID_Init>:
#include "stdio.h"



void PID_Init(pid_s *pid, int select)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]

   	(*pid).r = 1.0;		// referencia
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80066c8:	601a      	str	r2, [r3, #0]
   	(*pid).e[0]= 0.0; 	// error
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	605a      	str	r2, [r3, #4]
   	(*pid).e[1]= 0.0;		// error anterior e(k-1)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	609a      	str	r2, [r3, #8]
   	(*pid).e[2]= 0.0;		// error acumulado
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	60da      	str	r2, [r3, #12]
   	(*pid).y = 0;			// Salida de la Planta
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	61da      	str	r2, [r3, #28]
   	(*pid).u = 0;			// Se�al de control
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f04f 0200 	mov.w	r2, #0
 80066f0:	621a      	str	r2, [r3, #32]

	switch (select)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d01d      	beq.n	8006734 <PID_Init+0x7c>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	dc24      	bgt.n	8006748 <PID_Init+0x90>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d003      	beq.n	800670c <PID_Init+0x54>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d00a      	beq.n	8006720 <PID_Init+0x68>
 800670a:	e01d      	b.n	8006748 <PID_Init+0x90>
		(*pid).Kd = 0.016;
		(*pid).Ki = 0.001203;*/

	// SA ----- FALLAS T2

			(*pid).Kp = 0.2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a1d      	ldr	r2, [pc, #116]	; (8006784 <PID_Init+0xcc>)
 8006710:	611a      	str	r2, [r3, #16]
			(*pid).Kd = 0.010696;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a1c      	ldr	r2, [pc, #112]	; (8006788 <PID_Init+0xd0>)
 8006716:	619a      	str	r2, [r3, #24]
			(*pid).Ki = 0.000925;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a1c      	ldr	r2, [pc, #112]	; (800678c <PID_Init+0xd4>)
 800671c:	615a      	str	r2, [r3, #20]

		break;
 800671e:	e01f      	b.n	8006760 <PID_Init+0xa8>
		(*pid).Kd = 0.14166;
		(*pid).Ki = 0.0001476 ;
		*/
		// ****AS FALL T2

	   	(*pid).Kp = 0.2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a18      	ldr	r2, [pc, #96]	; (8006784 <PID_Init+0xcc>)
 8006724:	611a      	str	r2, [r3, #16]
		(*pid).Kd = 0.1067;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a19      	ldr	r2, [pc, #100]	; (8006790 <PID_Init+0xd8>)
 800672a:	619a      	str	r2, [r3, #24]
		(*pid).Ki = 0.00018499;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4a19      	ldr	r2, [pc, #100]	; (8006794 <PID_Init+0xdc>)
 8006730:	615a      	str	r2, [r3, #20]

		break;
 8006732:	e015      	b.n	8006760 <PID_Init+0xa8>
		(*pid).Kp = 0.6;
		(*pid).Kd = 0.1632;
		(*pid).Ki = 0.001;*/

		// ****AS FALL T2
	   	(*pid).Kp = 0.7;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a18      	ldr	r2, [pc, #96]	; (8006798 <PID_Init+0xe0>)
 8006738:	611a      	str	r2, [r3, #16]
		(*pid).Kd = 0.1067;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a14      	ldr	r2, [pc, #80]	; (8006790 <PID_Init+0xd8>)
 800673e:	619a      	str	r2, [r3, #24]
		(*pid).Ki = 0.00185;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a16      	ldr	r2, [pc, #88]	; (800679c <PID_Init+0xe4>)
 8006744:	615a      	str	r2, [r3, #20]

		break;
 8006746:	e00b      	b.n	8006760 <PID_Init+0xa8>
	default:
	   	(*pid).Kp = 1;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800674e:	611a      	str	r2, [r3, #16]
		(*pid).Kd = 0;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f04f 0200 	mov.w	r2, #0
 8006756:	619a      	str	r2, [r3, #24]
		(*pid).Ki = 0;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	615a      	str	r2, [r3, #20]
	}
	(*pid).Gains[0] = (*pid).Kp; (*pid).Gains[1] =(*pid).Ki; (*pid).Gains[2] =(*pid).Kd;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	625a      	str	r2, [r3, #36]	; 0x24
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	695a      	ldr	r2, [r3, #20]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	629a      	str	r2, [r3, #40]	; 0x28
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699a      	ldr	r2, [r3, #24]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	3e4ccccd 	.word	0x3e4ccccd
 8006788:	3c2f3e47 	.word	0x3c2f3e47
 800678c:	3a727bb3 	.word	0x3a727bb3
 8006790:	3dda8588 	.word	0x3dda8588
 8006794:	3941f9e0 	.word	0x3941f9e0
 8006798:	3f333333 	.word	0x3f333333
 800679c:	3af27bb3 	.word	0x3af27bb3

080067a0 <PID_control>:



float PID_control( float *e, float Gains[3],float Ts)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b08f      	sub	sp, #60	; 0x3c
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	ed87 0a01 	vstr	s0, [r7, #4]
	float u;
	float Kp = Gains[0],  Ki = Gains[1],  Kd = Gains[2];
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	637b      	str	r3, [r7, #52]	; 0x34
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	633b      	str	r3, [r7, #48]	; 0x30
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	62fb      	str	r3, [r7, #44]	; 0x2c

	float error = e[0];
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28
	float error_ant = e[1];
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
	float error_sum = e[2];
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	623b      	str	r3, [r7, #32]
	float delt_error = error - error_ant;
 80067d2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80067d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80067da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067de:	edc7 7a07 	vstr	s15, [r7, #28]
	float error_acum = error_sum+ error;
 80067e2:	ed97 7a08 	vldr	s14, [r7, #32]
 80067e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80067ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067ee:	edc7 7a06 	vstr	s15, [r7, #24]

	u = Kp * error  + Ki * (Ts * error_acum) + Kd * (delt_error / Ts);
 80067f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80067f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80067fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067fe:	edd7 6a01 	vldr	s13, [r7, #4]
 8006802:	edd7 7a06 	vldr	s15, [r7, #24]
 8006806:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800680a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800680e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006816:	ed97 6a07 	vldr	s12, [r7, #28]
 800681a:	edd7 7a01 	vldr	s15, [r7, #4]
 800681e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006822:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800682a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800682e:	edc7 7a05 	vstr	s15, [r7, #20]

	*(e+1) = error;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3304      	adds	r3, #4
 8006836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006838:	601a      	str	r2, [r3, #0]
	*(e+2) = error_acum;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3308      	adds	r3, #8
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	601a      	str	r2, [r3, #0]

    return u;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	ee07 3a90 	vmov	s15, r3
}
 8006848:	eeb0 0a67 	vmov.f32	s0, s15
 800684c:	373c      	adds	r7, #60	; 0x3c
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <saturation>:


#include "process_signal.h"
#include <math.h>

float saturation(float value,float interval[2]){
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	ed87 0a01 	vstr	s0, [r7, #4]
 8006860:	6038      	str	r0, [r7, #0]

	value = value > interval[1] ? interval[1]:value;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	3304      	adds	r3, #4
 8006866:	edd3 7a00 	vldr	s15, [r3]
 800686a:	ed97 7a01 	vldr	s14, [r7, #4]
 800686e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006876:	dd02      	ble.n	800687e <saturation+0x28>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	e000      	b.n	8006880 <saturation+0x2a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	607b      	str	r3, [r7, #4]
	value = value < interval[0] ? interval[0]:value;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	edd3 7a00 	vldr	s15, [r3]
 8006888:	ed97 7a01 	vldr	s14, [r7, #4]
 800688c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006894:	d502      	bpl.n	800689c <saturation+0x46>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	e000      	b.n	800689e <saturation+0x48>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	607b      	str	r3, [r7, #4]

	return value;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	ee07 3a90 	vmov	s15, r3
}
 80068a6:	eeb0 0a67 	vmov.f32	s0, s15
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	0000      	movs	r0, r0
	...

080068b8 <fround>:
	value  = (value-scaling[0]) * (interval[1]- interval[0])/(scaling[1]-scaling[0]) + interval[0];
	return value;
}

float fround(float X, int N)
{
 80068b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	ed87 0a01 	vstr	s0, [r7, #4]
 80068c4:	6038      	str	r0, [r7, #0]
	float num, aux;
	num =(float) (((int) (X*pow(10, N)))/pow(10, N));
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7f9 fe66 	bl	8000598 <__aeabi_f2d>
 80068cc:	4604      	mov	r4, r0
 80068ce:	460d      	mov	r5, r1
 80068d0:	6838      	ldr	r0, [r7, #0]
 80068d2:	f7f9 fe4f 	bl	8000574 <__aeabi_i2d>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	ec43 2b11 	vmov	d1, r2, r3
 80068de:	ed9f 0b64 	vldr	d0, [pc, #400]	; 8006a70 <fround+0x1b8>
 80068e2:	f008 fda9 	bl	800f438 <pow>
 80068e6:	ec53 2b10 	vmov	r2, r3, d0
 80068ea:	4620      	mov	r0, r4
 80068ec:	4629      	mov	r1, r5
 80068ee:	f7f9 feab 	bl	8000648 <__aeabi_dmul>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4610      	mov	r0, r2
 80068f8:	4619      	mov	r1, r3
 80068fa:	f7fa f955 	bl	8000ba8 <__aeabi_d2iz>
 80068fe:	4603      	mov	r3, r0
 8006900:	4618      	mov	r0, r3
 8006902:	f7f9 fe37 	bl	8000574 <__aeabi_i2d>
 8006906:	4604      	mov	r4, r0
 8006908:	460d      	mov	r5, r1
 800690a:	6838      	ldr	r0, [r7, #0]
 800690c:	f7f9 fe32 	bl	8000574 <__aeabi_i2d>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	ec43 2b11 	vmov	d1, r2, r3
 8006918:	ed9f 0b55 	vldr	d0, [pc, #340]	; 8006a70 <fround+0x1b8>
 800691c:	f008 fd8c 	bl	800f438 <pow>
 8006920:	ec53 2b10 	vmov	r2, r3, d0
 8006924:	4620      	mov	r0, r4
 8006926:	4629      	mov	r1, r5
 8006928:	f7f9 ffb8 	bl	800089c <__aeabi_ddiv>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	4610      	mov	r0, r2
 8006932:	4619      	mov	r1, r3
 8006934:	f7fa f960 	bl	8000bf8 <__aeabi_d2f>
 8006938:	4603      	mov	r3, r0
 800693a:	60fb      	str	r3, [r7, #12]

	aux = X - num;
 800693c:	ed97 7a01 	vldr	s14, [r7, #4]
 8006940:	edd7 7a03 	vldr	s15, [r7, #12]
 8006944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006948:	edc7 7a02 	vstr	s15, [r7, #8]
	if ((fabs(aux) + 5/pow(10, N+1)) + 0.000001 >= 1/pow(10, N))
 800694c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006950:	eef0 7ae7 	vabs.f32	s15, s15
 8006954:	ee17 0a90 	vmov	r0, s15
 8006958:	f7f9 fe1e 	bl	8000598 <__aeabi_f2d>
 800695c:	4604      	mov	r4, r0
 800695e:	460d      	mov	r5, r1
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	3301      	adds	r3, #1
 8006964:	4618      	mov	r0, r3
 8006966:	f7f9 fe05 	bl	8000574 <__aeabi_i2d>
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	ec43 2b11 	vmov	d1, r2, r3
 8006972:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 8006a70 <fround+0x1b8>
 8006976:	f008 fd5f 	bl	800f438 <pow>
 800697a:	ec53 2b10 	vmov	r2, r3, d0
 800697e:	f04f 0000 	mov.w	r0, #0
 8006982:	493f      	ldr	r1, [pc, #252]	; (8006a80 <fround+0x1c8>)
 8006984:	f7f9 ff8a 	bl	800089c <__aeabi_ddiv>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f7f9 fca4 	bl	80002dc <__adddf3>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4610      	mov	r0, r2
 800699a:	4619      	mov	r1, r3
 800699c:	a336      	add	r3, pc, #216	; (adr r3, 8006a78 <fround+0x1c0>)
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f7f9 fc9b 	bl	80002dc <__adddf3>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4614      	mov	r4, r2
 80069ac:	461d      	mov	r5, r3
 80069ae:	6838      	ldr	r0, [r7, #0]
 80069b0:	f7f9 fde0 	bl	8000574 <__aeabi_i2d>
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	ec43 2b11 	vmov	d1, r2, r3
 80069bc:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8006a70 <fround+0x1b8>
 80069c0:	f008 fd3a 	bl	800f438 <pow>
 80069c4:	ec53 2b10 	vmov	r2, r3, d0
 80069c8:	f04f 0000 	mov.w	r0, #0
 80069cc:	492d      	ldr	r1, [pc, #180]	; (8006a84 <fround+0x1cc>)
 80069ce:	f7f9 ff65 	bl	800089c <__aeabi_ddiv>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	4620      	mov	r0, r4
 80069d8:	4629      	mov	r1, r5
 80069da:	f7fa f8bb 	bl	8000b54 <__aeabi_dcmpge>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d03a      	beq.n	8006a5a <fround+0x1a2>
	{
		num = num + fabs(aux)/aux*1/pow(10, N);
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f7f9 fdd7 	bl	8000598 <__aeabi_f2d>
 80069ea:	4604      	mov	r4, r0
 80069ec:	460d      	mov	r5, r1
 80069ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80069f2:	eef0 7ae7 	vabs.f32	s15, s15
 80069f6:	ee17 0a90 	vmov	r0, s15
 80069fa:	f7f9 fdcd 	bl	8000598 <__aeabi_f2d>
 80069fe:	4680      	mov	r8, r0
 8006a00:	4689      	mov	r9, r1
 8006a02:	68b8      	ldr	r0, [r7, #8]
 8006a04:	f7f9 fdc8 	bl	8000598 <__aeabi_f2d>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	4649      	mov	r1, r9
 8006a10:	f7f9 ff44 	bl	800089c <__aeabi_ddiv>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4690      	mov	r8, r2
 8006a1a:	4699      	mov	r9, r3
 8006a1c:	6838      	ldr	r0, [r7, #0]
 8006a1e:	f7f9 fda9 	bl	8000574 <__aeabi_i2d>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	ec43 2b11 	vmov	d1, r2, r3
 8006a2a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8006a70 <fround+0x1b8>
 8006a2e:	f008 fd03 	bl	800f438 <pow>
 8006a32:	ec53 2b10 	vmov	r2, r3, d0
 8006a36:	4640      	mov	r0, r8
 8006a38:	4649      	mov	r1, r9
 8006a3a:	f7f9 ff2f 	bl	800089c <__aeabi_ddiv>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
 8006a42:	4620      	mov	r0, r4
 8006a44:	4629      	mov	r1, r5
 8006a46:	f7f9 fc49 	bl	80002dc <__adddf3>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4610      	mov	r0, r2
 8006a50:	4619      	mov	r1, r3
 8006a52:	f7fa f8d1 	bl	8000bf8 <__aeabi_d2f>
 8006a56:	4603      	mov	r3, r0
 8006a58:	60fb      	str	r3, [r7, #12]
	}
	return num;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	ee07 3a90 	vmov	s15, r3
}
 8006a60:	eeb0 0a67 	vmov.f32	s0, s15
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a6c:	f3af 8000 	nop.w
 8006a70:	00000000 	.word	0x00000000
 8006a74:	40240000 	.word	0x40240000
 8006a78:	a0b5ed8d 	.word	0xa0b5ed8d
 8006a7c:	3eb0c6f7 	.word	0x3eb0c6f7
 8006a80:	40140000 	.word	0x40140000
 8006a84:	3ff00000 	.word	0x3ff00000

08006a88 <limitar_altura>:

float limitar_altura(float h , int *M)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006a92:	6038      	str	r0, [r7, #0]
    if (h > 25 || h < 0)
 8006a94:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a98:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa4:	dc06      	bgt.n	8006ab4 <limitar_altura+0x2c>
 8006aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006aaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab2:	d507      	bpl.n	8006ac4 <limitar_altura+0x3c>
    {
    	h = 0;
 8006ab4:	f04f 0300 	mov.w	r3, #0
 8006ab8:	607b      	str	r3, [r7, #4]
    	(*M)--;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	1e5a      	subs	r2, r3, #1
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	601a      	str	r2, [r3, #0]
    }
    return h;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	ee07 3a90 	vmov	s15, r3
}
 8006aca:	eeb0 0a67 	vmov.f32	s0, s15
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <randf>:
#include <stdlib.h>
#include "random_numbers.h"


// numero aleatorio tipo float entre 0.0000 y 0.99999
float randf(void){
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
	float numrand = (float) (rand() % (10000+1))/10000;
 8006ade:	f006 fab5 	bl	800d04c <rand>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	4a0e      	ldr	r2, [pc, #56]	; (8006b20 <randf+0x48>)
 8006ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8006aea:	441a      	add	r2, r3
 8006aec:	1351      	asrs	r1, r2, #13
 8006aee:	17da      	asrs	r2, r3, #31
 8006af0:	1a8a      	subs	r2, r1, r2
 8006af2:	f242 7111 	movw	r1, #10001	; 0x2711
 8006af6:	fb01 f202 	mul.w	r2, r1, r2
 8006afa:	1a9a      	subs	r2, r3, r2
 8006afc:	ee07 2a90 	vmov	s15, r2
 8006b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b04:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006b24 <randf+0x4c>
 8006b08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b0c:	edc7 7a01 	vstr	s15, [r7, #4]
	return numrand;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	ee07 3a90 	vmov	s15, r3
}
 8006b16:	eeb0 0a67 	vmov.f32	s0, s15
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	d1b1b919 	.word	0xd1b1b919
 8006b24:	461c4000 	.word	0x461c4000

08006b28 <randi>:

// numero enetero aleatorio dado un inicio y final incluidos.
int randi(int inicio,int fin){
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
	int numrand = rand () % (fin-inicio+1) + inicio;
 8006b32:	f006 fa8b 	bl	800d04c <rand>
 8006b36:	4602      	mov	r2, r0
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	1acb      	subs	r3, r1, r3
 8006b3e:	3301      	adds	r3, #1
 8006b40:	fb92 f1f3 	sdiv	r1, r2, r3
 8006b44:	fb01 f303 	mul.w	r3, r1, r3
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
	return numrand;
 8006b50:	68fb      	ldr	r3, [r7, #12]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	0000      	movs	r0, r0
 8006b5c:	0000      	movs	r0, r0
	...

08006b60 <SA_Init>:

#include "simulated_annealing.h"
#include "random_numbers.h"
#include "cost_function.h"

void SA_Init(sa_s *SA, int select){
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08e      	sub	sp, #56	; 0x38
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
	SA-> iniciar = 0;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]
	SA-> enable = 0;	    // habilita el algoritmo SA
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	605a      	str	r2, [r3, #4]

	SA->iter[0] = 0;		// Inicio
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	609a      	str	r2, [r3, #8]
	SA->iter[1] = 3;		// Fin
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2203      	movs	r2, #3
 8006b80:	60da      	str	r2, [r3, #12]

	SA->subiter[0] =0;		// Inicio
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	611a      	str	r2, [r3, #16]
	SA->subiter[1] = 2;		// Fin
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	615a      	str	r2, [r3, #20]

	SA->muestra_i = 0;	    // Inicio
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	619a      	str	r2, [r3, #24]
	SA->muestras = 70;		// Fin
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2246      	movs	r2, #70	; 0x46
 8006b98:	61da      	str	r2, [r3, #28]
	SA->selectCostF = 2;      // Selecion de la funcion objetivo
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	621a      	str	r2, [r3, #32]
	SA->Temp = 0.025;  	    // Temperatura Inicial
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a3b      	ldr	r2, [pc, #236]	; (8006c90 <SA_Init+0x130>)
 8006ba4:	63da      	str	r2, [r3, #60]	; 0x3c
 	SA->alpha = 0.99;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a3a      	ldr	r2, [pc, #232]	; (8006c94 <SA_Init+0x134>)
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40
	SA->y = (float *)malloc((SA->muestras+1)*sizeof(float));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f005 fcab 	bl	800c510 <malloc>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	645a      	str	r2, [r3, #68]	; 0x44
	SA->BestCost = (float *)malloc((SA->iter[1])*sizeof(float));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f005 fca1 	bl	800c510 <malloc>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	64da      	str	r2, [r3, #76]	; 0x4c

	pid_s pid;
	PID_Init(&pid, select);
 8006bd6:	f107 0308 	add.w	r3, r7, #8
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff fd6b 	bl	80066b8 <PID_Init>
	SA->rangeGains[0] = 0.533 * pid.Kp;  // Kp minimo
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7f9 fcd7 	bl	8000598 <__aeabi_f2d>
 8006bea:	a325      	add	r3, pc, #148	; (adr r3, 8006c80 <SA_Init+0x120>)
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f7f9 fd2a 	bl	8000648 <__aeabi_dmul>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f7f9 fffc 	bl	8000bf8 <__aeabi_d2f>
 8006c00:	4602      	mov	r2, r0
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	625a      	str	r2, [r3, #36]	; 0x24
	SA->rangeGains[1] =    1  * pid.Kp;	 // Kp maximo
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	629a      	str	r2, [r3, #40]	; 0x28
	SA->rangeGains[2] = 1.067 * pid.Kd;	 // Kd minimo
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7f9 fcc2 	bl	8000598 <__aeabi_f2d>
 8006c14:	a31c      	add	r3, pc, #112	; (adr r3, 8006c88 <SA_Init+0x128>)
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f7f9 fd15 	bl	8000648 <__aeabi_dmul>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4610      	mov	r0, r2
 8006c24:	4619      	mov	r1, r3
 8006c26:	f7f9 ffe7 	bl	8000bf8 <__aeabi_d2f>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	62da      	str	r2, [r3, #44]	; 0x2c
	SA->rangeGains[3] =     2 * pid.Kd;  // Kd maximo
 8006c30:	edd7 7a08 	vldr	s15, [r7, #32]
 8006c34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	SA->rangeGains[4] =  1.2 * pid.Ki;  // Ki minimo
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7f9 fca9 	bl	8000598 <__aeabi_f2d>
 8006c46:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8006c4a:	4b13      	ldr	r3, [pc, #76]	; (8006c98 <SA_Init+0x138>)
 8006c4c:	f7f9 fcfc 	bl	8000648 <__aeabi_dmul>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4610      	mov	r0, r2
 8006c56:	4619      	mov	r1, r3
 8006c58:	f7f9 ffce 	bl	8000bf8 <__aeabi_d2f>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	635a      	str	r2, [r3, #52]	; 0x34
	SA->rangeGains[5] =  2.5 * pid.Ki;  // Kd maximo
 8006c62:	edd7 7a07 	vldr	s15, [r7, #28]
 8006c66:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8006c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	//srand(time(NULL)+18);
}
 8006c74:	bf00      	nop
 8006c76:	3738      	adds	r7, #56	; 0x38
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	f3af 8000 	nop.w
 8006c80:	04189375 	.word	0x04189375
 8006c84:	3fe10e56 	.word	0x3fe10e56
 8006c88:	978d4fdf 	.word	0x978d4fdf
 8006c8c:	3ff1126e 	.word	0x3ff1126e
 8006c90:	3ccccccd 	.word	0x3ccccccd
 8006c94:	3f7d70a4 	.word	0x3f7d70a4
 8006c98:	3ff33333 	.word	0x3ff33333

08006c9c <Simulated_Annealing>:

void Simulated_Annealing(sa_s *SA,pid_s *pid,float dt){
 8006c9c:	b590      	push	{r4, r7, lr}
 8006c9e:	b08f      	sub	sp, #60	; 0x3c
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	ed87 0a01 	vstr	s0, [r7, #4]
if (SA->iniciar == 1)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	f040 8157 	bne.w	8006f62 <Simulated_Annealing+0x2c6>
	{
		if (SA->enable == 1)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	f040 8146 	bne.w	8006f4a <Simulated_Annealing+0x2ae>
			{
				solSA_s newsol;
				if (SA->iter[0] == 0 && SA->subiter[0] == 0){
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d14b      	bne.n	8006d5e <Simulated_Annealing+0xc2>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d147      	bne.n	8006d5e <Simulated_Annealing+0xc2>
					for (int i =0;i<3;++i){
 8006cce:	2300      	movs	r3, #0
 8006cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd2:	e00f      	b.n	8006cf4 <Simulated_Annealing+0x58>
					SA->sol.Gain[i] = (*pid).Gains[i];}
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd8:	3308      	adds	r3, #8
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	3304      	adds	r3, #4
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68f9      	ldr	r1, [r7, #12]
 8006ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce6:	3314      	adds	r3, #20
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	440b      	add	r3, r1
 8006cec:	601a      	str	r2, [r3, #0]
					for (int i =0;i<3;++i){
 8006cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	ddec      	ble.n	8006cd4 <Simulated_Annealing+0x38>
					SA->sol.Cost = calcule_cost((SA->muestras)-1, SA->y, SA->r, dt, SA->selectCostF);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	1e58      	subs	r0, r3, #1
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	edd7 0a01 	vldr	s1, [r7, #4]
 8006d14:	eeb0 0a67 	vmov.f32	s0, s15
 8006d18:	f7fb fa86 	bl	8002228 <calcule_cost>
 8006d1c:	eef0 7a40 	vmov.f32	s15, s0
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
					SA->BestSol = SA->sol;
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f102 0460 	add.w	r4, r2, #96	; 0x60
 8006d2e:	3350      	adds	r3, #80	; 0x50
 8006d30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					// Creamos nuevos valores de Kp , Kd o Ki
					CreateNeighbor(pid->Gains,SA->rangeGains);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3324      	adds	r3, #36	; 0x24
 8006d40:	4619      	mov	r1, r3
 8006d42:	4610      	mov	r0, r2
 8006d44:	f000 f912 	bl	8006f6c <CreateNeighbor>
					(SA->iter[0])++;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	609a      	str	r2, [r3, #8]
					(SA->subiter[0])++;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	611a      	str	r2, [r3, #16]
 8006d5c:	e0ee      	b.n	8006f3c <Simulated_Annealing+0x2a0>
				}
				else
				{
					if (SA->iter[0] <= SA->iter[1])
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689a      	ldr	r2, [r3, #8]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	f300 80d2 	bgt.w	8006f10 <Simulated_Annealing+0x274>
					{
						if (SA->subiter[0]<=SA->subiter[1])
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	f300 8096 	bgt.w	8006ea6 <Simulated_Annealing+0x20a>
						{
							for (int i =0;i<3;++i) {
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d7e:	e00f      	b.n	8006da0 <Simulated_Annealing+0x104>
							newsol.Gain[i] = (*pid).Gains[i];}
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	3308      	adds	r3, #8
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	3338      	adds	r3, #56	; 0x38
 8006d94:	443b      	add	r3, r7
 8006d96:	3b28      	subs	r3, #40	; 0x28
 8006d98:	601a      	str	r2, [r3, #0]
							for (int i =0;i<3;++i) {
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	ddec      	ble.n	8006d80 <Simulated_Annealing+0xe4>
							newsol.Cost = calcule_cost((SA->muestras)-1, SA->y, SA->r, dt, SA->selectCostF);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	1e58      	subs	r0, r3, #1
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	edd7 0a01 	vldr	s1, [r7, #4]
 8006dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8006dc4:	f7fb fa30 	bl	8002228 <calcule_cost>
 8006dc8:	eef0 7a40 	vmov.f32	s15, s0
 8006dcc:	edc7 7a07 	vstr	s15, [r7, #28]
							if (newsol.Cost <=SA->sol.Cost){
 8006dd0:	ed97 7a07 	vldr	s14, [r7, #28]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8006dda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de2:	d808      	bhi.n	8006df6 <Simulated_Annealing+0x15a>
								SA->sol = newsol;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8006dea:	f107 0310 	add.w	r3, r7, #16
 8006dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006df0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006df4:	e03b      	b.n	8006e6e <Simulated_Annealing+0x1d2>
							}
							else {
								float DELTA = (newsol.Cost-SA->sol.Cost)/SA->sol.Cost;
 8006df6:	ed97 7a07 	vldr	s14, [r7, #28]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8006e00:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8006e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e0e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
								float  P = exp(-DELTA/SA->Temp);
 8006e12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006e16:	eeb1 7a67 	vneg.f32	s14, s15
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006e20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006e24:	ee16 0a90 	vmov	r0, s13
 8006e28:	f7f9 fbb6 	bl	8000598 <__aeabi_f2d>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	ec43 2b10 	vmov	d0, r2, r3
 8006e34:	f008 fab8 	bl	800f3a8 <exp>
 8006e38:	ec53 2b10 	vmov	r2, r3, d0
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	4619      	mov	r1, r3
 8006e40:	f7f9 feda 	bl	8000bf8 <__aeabi_d2f>
 8006e44:	4603      	mov	r3, r0
 8006e46:	623b      	str	r3, [r7, #32]
								if (randf() <= P){
 8006e48:	f7ff fe46 	bl	8006ad8 <randf>
 8006e4c:	eeb0 7a40 	vmov.f32	s14, s0
 8006e50:	edd7 7a08 	vldr	s15, [r7, #32]
 8006e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5c:	db07      	blt.n	8006e6e <Simulated_Annealing+0x1d2>
									SA->sol = newsol;}
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8006e64:	f107 0310 	add.w	r3, r7, #16
 8006e68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
							}
							// actualizamos la mejor solucion encontrada
							if (SA->sol.Cost <= SA->BestSol.Cost)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8006e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e82:	d807      	bhi.n	8006e94 <Simulated_Annealing+0x1f8>
							{
								SA->BestSol = SA->sol;
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f102 0460 	add.w	r4, r2, #96	; 0x60
 8006e8c:	3350      	adds	r3, #80	; 0x50
 8006e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
							}

							CreateNeighbor(pid->Gains,SA->rangeGains);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3324      	adds	r3, #36	; 0x24
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	f000 f863 	bl	8006f6c <CreateNeighbor>
						}

						int cont = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
						if (SA->subiter[0] == SA->subiter[1]){(SA->subiter[0])=1;cont = 1;}
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	691a      	ldr	r2, [r3, #16]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d105      	bne.n	8006ec2 <Simulated_Annealing+0x226>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	611a      	str	r2, [r3, #16]
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec0:	e004      	b.n	8006ecc <Simulated_Annealing+0x230>
						else {(SA->subiter[0])++;}
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	611a      	str	r2, [r3, #16]

						if (cont == 1){
 8006ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d134      	bne.n	8006f3c <Simulated_Annealing+0x2a0>
							SA->Temp = SA->alpha*SA->Temp;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
							SA->BestCost[(SA->iter[0])-1] = SA->BestSol.Cost;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006efe:	601a      	str	r2, [r3, #0]
							(SA->iter[0])++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	609a      	str	r2, [r3, #8]
							cont = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f0e:	e015      	b.n	8006f3c <Simulated_Annealing+0x2a0>
						}
					}
					else{
						for(int i = 0;i<3;i++)
 8006f10:	2300      	movs	r3, #0
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f14:	e00f      	b.n	8006f36 <Simulated_Annealing+0x29a>
						pid->Gains[i] = SA->BestSol.Gain[i];
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	3318      	adds	r3, #24
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68b9      	ldr	r1, [r7, #8]
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	3308      	adds	r3, #8
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	440b      	add	r3, r1
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	601a      	str	r2, [r3, #0]
						for(int i = 0;i<3;i++)
 8006f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f32:	3301      	adds	r3, #1
 8006f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	ddec      	ble.n	8006f16 <Simulated_Annealing+0x27a>
					}
				}
			SA->muestra_i = 0; SA->enable = 0;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	619a      	str	r2, [r3, #24]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	605a      	str	r2, [r3, #4]
		else{
			if (SA->muestra_i < SA->muestras-1)
				SA->muestra_i ++;
			}
		}
	}
 8006f48:	e00b      	b.n	8006f62 <Simulated_Annealing+0x2c6>
			if (SA->muestra_i < SA->muestras-1)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	699a      	ldr	r2, [r3, #24]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	429a      	cmp	r2, r3
 8006f56:	da04      	bge.n	8006f62 <Simulated_Annealing+0x2c6>
				SA->muestra_i ++;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	619a      	str	r2, [r3, #24]
	}
 8006f62:	bf00      	nop
 8006f64:	373c      	adds	r7, #60	; 0x3c
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd90      	pop	{r4, r7, pc}
	...

08006f6c <CreateNeighbor>:

void CreateNeighbor(float *Gains,float range_gains[6]){
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	ed2d 8b02 	vpush	{d8}
 8006f72:	b08e      	sub	sp, #56	; 0x38
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]

	float Kpmin = range_gains[0], 			Kpmax = range_gains[1];
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Kdmin = range_gains[2], 		    Kdmax = range_gains[3];
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
	float Kimin = range_gains[4], 		    Kimax = range_gains[5];
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	623b      	str	r3, [r7, #32]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	61fb      	str	r3, [r7, #28]

	float pKp = 0.2,  pKi = 0.5, pKd = 1-pKp-pKi;
 8006f9e:	4b56      	ldr	r3, [pc, #344]	; (80070f8 <CreateNeighbor+0x18c>)
 8006fa0:	61bb      	str	r3, [r7, #24]
 8006fa2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fac:	edd7 7a06 	vldr	s15, [r7, #24]
 8006fb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006fb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8006fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fbc:	edc7 7a04 	vstr	s15, [r7, #16]

	float r = randf();
 8006fc0:	f7ff fd8a 	bl	8006ad8 <randf>
 8006fc4:	ed87 0a03 	vstr	s0, [r7, #12]
	int variacion = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	637b      	str	r3, [r7, #52]	; 0x34
	if (r <=pKp)
 8006fcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8006fd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8006fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fdc:	d801      	bhi.n	8006fe2 <CreateNeighbor+0x76>
		variacion = 1;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	637b      	str	r3, [r7, #52]	; 0x34
	if (r>pKp && r<=pKp+pKi)
 8006fe2:	ed97 7a03 	vldr	s14, [r7, #12]
 8006fe6:	edd7 7a06 	vldr	s15, [r7, #24]
 8006fea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff2:	dd0e      	ble.n	8007012 <CreateNeighbor+0xa6>
 8006ff4:	ed97 7a06 	vldr	s14, [r7, #24]
 8006ff8:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007000:	ed97 7a03 	vldr	s14, [r7, #12]
 8007004:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700c:	d801      	bhi.n	8007012 <CreateNeighbor+0xa6>
		variacion = 2;
 800700e:	2302      	movs	r3, #2
 8007010:	637b      	str	r3, [r7, #52]	; 0x34
	if (r>pKp+pKi && r<=pKp+pKi+pKd)
 8007012:	ed97 7a06 	vldr	s14, [r7, #24]
 8007016:	edd7 7a05 	vldr	s15, [r7, #20]
 800701a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800701e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702a:	dd12      	ble.n	8007052 <CreateNeighbor+0xe6>
 800702c:	ed97 7a06 	vldr	s14, [r7, #24]
 8007030:	edd7 7a05 	vldr	s15, [r7, #20]
 8007034:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007038:	edd7 7a04 	vldr	s15, [r7, #16]
 800703c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007040:	ed97 7a03 	vldr	s14, [r7, #12]
 8007044:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800704c:	d801      	bhi.n	8007052 <CreateNeighbor+0xe6>
		variacion = 3;
 800704e:	2303      	movs	r3, #3
 8007050:	637b      	str	r3, [r7, #52]	; 0x34

	switch (variacion) {
 8007052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007054:	2b03      	cmp	r3, #3
 8007056:	d032      	beq.n	80070be <CreateNeighbor+0x152>
 8007058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705a:	2b03      	cmp	r3, #3
 800705c:	dc44      	bgt.n	80070e8 <CreateNeighbor+0x17c>
 800705e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007060:	2b01      	cmp	r3, #1
 8007062:	d003      	beq.n	800706c <CreateNeighbor+0x100>
 8007064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007066:	2b02      	cmp	r3, #2
 8007068:	d014      	beq.n	8007094 <CreateNeighbor+0x128>
			break;
		case 3:
			Gains[2] = Kdmin + (Kdmax-Kdmin)*randf();
			break;
		default:
			break;
 800706a:	e03d      	b.n	80070e8 <CreateNeighbor+0x17c>
            Gains[0] = Kpmin + (Kpmax-Kpmin)*randf();
 800706c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8007070:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007074:	ee37 8a67 	vsub.f32	s16, s14, s15
 8007078:	f7ff fd2e 	bl	8006ad8 <randf>
 800707c:	eef0 7a40 	vmov.f32	s15, s0
 8007080:	ee28 7a27 	vmul.f32	s14, s16, s15
 8007084:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8007092:	e02a      	b.n	80070ea <CreateNeighbor+0x17e>
			Gains[1] = Kimin + (Kimax-Kimin)*randf();
 8007094:	ed97 7a07 	vldr	s14, [r7, #28]
 8007098:	edd7 7a08 	vldr	s15, [r7, #32]
 800709c:	ee37 8a67 	vsub.f32	s16, s14, s15
 80070a0:	f7ff fd1a 	bl	8006ad8 <randf>
 80070a4:	eef0 7a40 	vmov.f32	s15, s0
 80070a8:	ee28 7a27 	vmul.f32	s14, s16, s15
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3304      	adds	r3, #4
 80070b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80070b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070b8:	edc3 7a00 	vstr	s15, [r3]
			break;
 80070bc:	e015      	b.n	80070ea <CreateNeighbor+0x17e>
			Gains[2] = Kdmin + (Kdmax-Kdmin)*randf();
 80070be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80070c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80070c6:	ee37 8a67 	vsub.f32	s16, s14, s15
 80070ca:	f7ff fd05 	bl	8006ad8 <randf>
 80070ce:	eef0 7a40 	vmov.f32	s15, s0
 80070d2:	ee28 7a27 	vmul.f32	s14, s16, s15
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3308      	adds	r3, #8
 80070da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80070de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070e2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80070e6:	e000      	b.n	80070ea <CreateNeighbor+0x17e>
			break;
 80070e8:	bf00      	nop
	}

}
 80070ea:	bf00      	nop
 80070ec:	3738      	adds	r7, #56	; 0x38
 80070ee:	46bd      	mov	sp, r7
 80070f0:	ecbd 8b02 	vpop	{d8}
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	3e4ccccd 	.word	0x3e4ccccd

080070fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007102:	2300      	movs	r3, #0
 8007104:	607b      	str	r3, [r7, #4]
 8007106:	4b10      	ldr	r3, [pc, #64]	; (8007148 <HAL_MspInit+0x4c>)
 8007108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710a:	4a0f      	ldr	r2, [pc, #60]	; (8007148 <HAL_MspInit+0x4c>)
 800710c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007110:	6453      	str	r3, [r2, #68]	; 0x44
 8007112:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <HAL_MspInit+0x4c>)
 8007114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800711a:	607b      	str	r3, [r7, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800711e:	2300      	movs	r3, #0
 8007120:	603b      	str	r3, [r7, #0]
 8007122:	4b09      	ldr	r3, [pc, #36]	; (8007148 <HAL_MspInit+0x4c>)
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	4a08      	ldr	r2, [pc, #32]	; (8007148 <HAL_MspInit+0x4c>)
 8007128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800712c:	6413      	str	r3, [r2, #64]	; 0x40
 800712e:	4b06      	ldr	r3, [pc, #24]	; (8007148 <HAL_MspInit+0x4c>)
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007136:	603b      	str	r3, [r7, #0]
 8007138:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800713a:	bf00      	nop
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40023800 	.word	0x40023800

0800714c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08a      	sub	sp, #40	; 0x28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007154:	f107 0314 	add.w	r3, r7, #20
 8007158:	2200      	movs	r2, #0
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	605a      	str	r2, [r3, #4]
 800715e:	609a      	str	r2, [r3, #8]
 8007160:	60da      	str	r2, [r3, #12]
 8007162:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716c:	d10e      	bne.n	800718c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800716e:	2300      	movs	r3, #0
 8007170:	613b      	str	r3, [r7, #16]
 8007172:	4b25      	ldr	r3, [pc, #148]	; (8007208 <HAL_TIM_Base_MspInit+0xbc>)
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	4a24      	ldr	r2, [pc, #144]	; (8007208 <HAL_TIM_Base_MspInit+0xbc>)
 8007178:	f043 0301 	orr.w	r3, r3, #1
 800717c:	6413      	str	r3, [r2, #64]	; 0x40
 800717e:	4b22      	ldr	r3, [pc, #136]	; (8007208 <HAL_TIM_Base_MspInit+0xbc>)
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800718a:	e038      	b.n	80071fe <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a1e      	ldr	r2, [pc, #120]	; (800720c <HAL_TIM_Base_MspInit+0xc0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d133      	bne.n	80071fe <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	4b1b      	ldr	r3, [pc, #108]	; (8007208 <HAL_TIM_Base_MspInit+0xbc>)
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	4a1a      	ldr	r2, [pc, #104]	; (8007208 <HAL_TIM_Base_MspInit+0xbc>)
 80071a0:	f043 0302 	orr.w	r3, r3, #2
 80071a4:	6413      	str	r3, [r2, #64]	; 0x40
 80071a6:	4b18      	ldr	r3, [pc, #96]	; (8007208 <HAL_TIM_Base_MspInit+0xbc>)
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071b2:	2300      	movs	r3, #0
 80071b4:	60bb      	str	r3, [r7, #8]
 80071b6:	4b14      	ldr	r3, [pc, #80]	; (8007208 <HAL_TIM_Base_MspInit+0xbc>)
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	4a13      	ldr	r2, [pc, #76]	; (8007208 <HAL_TIM_Base_MspInit+0xbc>)
 80071bc:	f043 0301 	orr.w	r3, r3, #1
 80071c0:	6313      	str	r3, [r2, #48]	; 0x30
 80071c2:	4b11      	ldr	r3, [pc, #68]	; (8007208 <HAL_TIM_Base_MspInit+0xbc>)
 80071c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	60bb      	str	r3, [r7, #8]
 80071cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80071ce:	23c0      	movs	r3, #192	; 0xc0
 80071d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d2:	2302      	movs	r3, #2
 80071d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071da:	2300      	movs	r3, #0
 80071dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80071de:	2302      	movs	r3, #2
 80071e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071e2:	f107 0314 	add.w	r3, r7, #20
 80071e6:	4619      	mov	r1, r3
 80071e8:	4809      	ldr	r0, [pc, #36]	; (8007210 <HAL_TIM_Base_MspInit+0xc4>)
 80071ea:	f001 f86d 	bl	80082c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80071ee:	2200      	movs	r2, #0
 80071f0:	2100      	movs	r1, #0
 80071f2:	201d      	movs	r0, #29
 80071f4:	f000 fc2f 	bl	8007a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80071f8:	201d      	movs	r0, #29
 80071fa:	f000 fc48 	bl	8007a8e <HAL_NVIC_EnableIRQ>
}
 80071fe:	bf00      	nop
 8007200:	3728      	adds	r7, #40	; 0x28
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	40023800 	.word	0x40023800
 800720c:	40000400 	.word	0x40000400
 8007210:	40020000 	.word	0x40020000

08007214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800721c:	f107 030c 	add.w	r3, r7, #12
 8007220:	2200      	movs	r2, #0
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	605a      	str	r2, [r3, #4]
 8007226:	609a      	str	r2, [r3, #8]
 8007228:	60da      	str	r2, [r3, #12]
 800722a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007234:	d11d      	bne.n	8007272 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007236:	2300      	movs	r3, #0
 8007238:	60bb      	str	r3, [r7, #8]
 800723a:	4b10      	ldr	r3, [pc, #64]	; (800727c <HAL_TIM_MspPostInit+0x68>)
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	4a0f      	ldr	r2, [pc, #60]	; (800727c <HAL_TIM_MspPostInit+0x68>)
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	6313      	str	r3, [r2, #48]	; 0x30
 8007246:	4b0d      	ldr	r3, [pc, #52]	; (800727c <HAL_TIM_MspPostInit+0x68>)
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	60bb      	str	r3, [r7, #8]
 8007250:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007252:	2301      	movs	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007256:	2302      	movs	r3, #2
 8007258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725a:	2300      	movs	r3, #0
 800725c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800725e:	2300      	movs	r3, #0
 8007260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007262:	2301      	movs	r3, #1
 8007264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007266:	f107 030c 	add.w	r3, r7, #12
 800726a:	4619      	mov	r1, r3
 800726c:	4804      	ldr	r0, [pc, #16]	; (8007280 <HAL_TIM_MspPostInit+0x6c>)
 800726e:	f001 f82b 	bl	80082c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8007272:	bf00      	nop
 8007274:	3720      	adds	r7, #32
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	40023800 	.word	0x40023800
 8007280:	40020000 	.word	0x40020000

08007284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08a      	sub	sp, #40	; 0x28
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800728c:	f107 0314 	add.w	r3, r7, #20
 8007290:	2200      	movs	r2, #0
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	605a      	str	r2, [r3, #4]
 8007296:	609a      	str	r2, [r3, #8]
 8007298:	60da      	str	r2, [r3, #12]
 800729a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a4c      	ldr	r2, [pc, #304]	; (80073d4 <HAL_UART_MspInit+0x150>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	f040 8091 	bne.w	80073ca <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80072a8:	2300      	movs	r3, #0
 80072aa:	613b      	str	r3, [r7, #16]
 80072ac:	4b4a      	ldr	r3, [pc, #296]	; (80073d8 <HAL_UART_MspInit+0x154>)
 80072ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b0:	4a49      	ldr	r2, [pc, #292]	; (80073d8 <HAL_UART_MspInit+0x154>)
 80072b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072b6:	6413      	str	r3, [r2, #64]	; 0x40
 80072b8:	4b47      	ldr	r3, [pc, #284]	; (80073d8 <HAL_UART_MspInit+0x154>)
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072c0:	613b      	str	r3, [r7, #16]
 80072c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	4b43      	ldr	r3, [pc, #268]	; (80073d8 <HAL_UART_MspInit+0x154>)
 80072ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072cc:	4a42      	ldr	r2, [pc, #264]	; (80073d8 <HAL_UART_MspInit+0x154>)
 80072ce:	f043 0308 	orr.w	r3, r3, #8
 80072d2:	6313      	str	r3, [r2, #48]	; 0x30
 80072d4:	4b40      	ldr	r3, [pc, #256]	; (80073d8 <HAL_UART_MspInit+0x154>)
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80072e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80072e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072e6:	2302      	movs	r3, #2
 80072e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ee:	2303      	movs	r3, #3
 80072f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80072f2:	2307      	movs	r3, #7
 80072f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072f6:	f107 0314 	add.w	r3, r7, #20
 80072fa:	4619      	mov	r1, r3
 80072fc:	4837      	ldr	r0, [pc, #220]	; (80073dc <HAL_UART_MspInit+0x158>)
 80072fe:	f000 ffe3 	bl	80082c8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8007302:	4b37      	ldr	r3, [pc, #220]	; (80073e0 <HAL_UART_MspInit+0x15c>)
 8007304:	4a37      	ldr	r2, [pc, #220]	; (80073e4 <HAL_UART_MspInit+0x160>)
 8007306:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8007308:	4b35      	ldr	r3, [pc, #212]	; (80073e0 <HAL_UART_MspInit+0x15c>)
 800730a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800730e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007310:	4b33      	ldr	r3, [pc, #204]	; (80073e0 <HAL_UART_MspInit+0x15c>)
 8007312:	2200      	movs	r2, #0
 8007314:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007316:	4b32      	ldr	r3, [pc, #200]	; (80073e0 <HAL_UART_MspInit+0x15c>)
 8007318:	2200      	movs	r2, #0
 800731a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800731c:	4b30      	ldr	r3, [pc, #192]	; (80073e0 <HAL_UART_MspInit+0x15c>)
 800731e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007322:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007324:	4b2e      	ldr	r3, [pc, #184]	; (80073e0 <HAL_UART_MspInit+0x15c>)
 8007326:	2200      	movs	r2, #0
 8007328:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800732a:	4b2d      	ldr	r3, [pc, #180]	; (80073e0 <HAL_UART_MspInit+0x15c>)
 800732c:	2200      	movs	r2, #0
 800732e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8007330:	4b2b      	ldr	r3, [pc, #172]	; (80073e0 <HAL_UART_MspInit+0x15c>)
 8007332:	2200      	movs	r2, #0
 8007334:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007336:	4b2a      	ldr	r3, [pc, #168]	; (80073e0 <HAL_UART_MspInit+0x15c>)
 8007338:	2200      	movs	r2, #0
 800733a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800733c:	4b28      	ldr	r3, [pc, #160]	; (80073e0 <HAL_UART_MspInit+0x15c>)
 800733e:	2200      	movs	r2, #0
 8007340:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8007342:	4827      	ldr	r0, [pc, #156]	; (80073e0 <HAL_UART_MspInit+0x15c>)
 8007344:	f000 fbbe 	bl	8007ac4 <HAL_DMA_Init>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800734e:	f7fe fa05 	bl	800575c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a22      	ldr	r2, [pc, #136]	; (80073e0 <HAL_UART_MspInit+0x15c>)
 8007356:	639a      	str	r2, [r3, #56]	; 0x38
 8007358:	4a21      	ldr	r2, [pc, #132]	; (80073e0 <HAL_UART_MspInit+0x15c>)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800735e:	4b22      	ldr	r3, [pc, #136]	; (80073e8 <HAL_UART_MspInit+0x164>)
 8007360:	4a22      	ldr	r2, [pc, #136]	; (80073ec <HAL_UART_MspInit+0x168>)
 8007362:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8007364:	4b20      	ldr	r3, [pc, #128]	; (80073e8 <HAL_UART_MspInit+0x164>)
 8007366:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800736a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800736c:	4b1e      	ldr	r3, [pc, #120]	; (80073e8 <HAL_UART_MspInit+0x164>)
 800736e:	2240      	movs	r2, #64	; 0x40
 8007370:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007372:	4b1d      	ldr	r3, [pc, #116]	; (80073e8 <HAL_UART_MspInit+0x164>)
 8007374:	2200      	movs	r2, #0
 8007376:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007378:	4b1b      	ldr	r3, [pc, #108]	; (80073e8 <HAL_UART_MspInit+0x164>)
 800737a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800737e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007380:	4b19      	ldr	r3, [pc, #100]	; (80073e8 <HAL_UART_MspInit+0x164>)
 8007382:	2200      	movs	r2, #0
 8007384:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007386:	4b18      	ldr	r3, [pc, #96]	; (80073e8 <HAL_UART_MspInit+0x164>)
 8007388:	2200      	movs	r2, #0
 800738a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800738c:	4b16      	ldr	r3, [pc, #88]	; (80073e8 <HAL_UART_MspInit+0x164>)
 800738e:	2200      	movs	r2, #0
 8007390:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007392:	4b15      	ldr	r3, [pc, #84]	; (80073e8 <HAL_UART_MspInit+0x164>)
 8007394:	2200      	movs	r2, #0
 8007396:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007398:	4b13      	ldr	r3, [pc, #76]	; (80073e8 <HAL_UART_MspInit+0x164>)
 800739a:	2200      	movs	r2, #0
 800739c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800739e:	4812      	ldr	r0, [pc, #72]	; (80073e8 <HAL_UART_MspInit+0x164>)
 80073a0:	f000 fb90 	bl	8007ac4 <HAL_DMA_Init>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80073aa:	f7fe f9d7 	bl	800575c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a0d      	ldr	r2, [pc, #52]	; (80073e8 <HAL_UART_MspInit+0x164>)
 80073b2:	635a      	str	r2, [r3, #52]	; 0x34
 80073b4:	4a0c      	ldr	r2, [pc, #48]	; (80073e8 <HAL_UART_MspInit+0x164>)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	2027      	movs	r0, #39	; 0x27
 80073c0:	f000 fb49 	bl	8007a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80073c4:	2027      	movs	r0, #39	; 0x27
 80073c6:	f000 fb62 	bl	8007a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80073ca:	bf00      	nop
 80073cc:	3728      	adds	r7, #40	; 0x28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	40004800 	.word	0x40004800
 80073d8:	40023800 	.word	0x40023800
 80073dc:	40020c00 	.word	0x40020c00
 80073e0:	200047e4 	.word	0x200047e4
 80073e4:	40026028 	.word	0x40026028
 80073e8:	20004844 	.word	0x20004844
 80073ec:	40026058 	.word	0x40026058

080073f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b0a0      	sub	sp, #128	; 0x80
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80073fc:	2200      	movs	r2, #0
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	605a      	str	r2, [r3, #4]
 8007402:	609a      	str	r2, [r3, #8]
 8007404:	60da      	str	r2, [r3, #12]
 8007406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007408:	f107 0314 	add.w	r3, r7, #20
 800740c:	2258      	movs	r2, #88	; 0x58
 800740e:	2100      	movs	r1, #0
 8007410:	4618      	mov	r0, r3
 8007412:	f005 f89b 	bl	800c54c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800741e:	d14d      	bne.n	80074bc <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007420:	2320      	movs	r3, #32
 8007422:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8007424:	2300      	movs	r3, #0
 8007426:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007428:	f107 0314 	add.w	r3, r7, #20
 800742c:	4618      	mov	r0, r3
 800742e:	f001 fc61 	bl	8008cf4 <HAL_RCCEx_PeriphCLKConfig>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8007438:	f7fe f990 	bl	800575c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800743c:	2300      	movs	r3, #0
 800743e:	613b      	str	r3, [r7, #16]
 8007440:	4b20      	ldr	r3, [pc, #128]	; (80074c4 <HAL_PCD_MspInit+0xd4>)
 8007442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007444:	4a1f      	ldr	r2, [pc, #124]	; (80074c4 <HAL_PCD_MspInit+0xd4>)
 8007446:	f043 0301 	orr.w	r3, r3, #1
 800744a:	6313      	str	r3, [r2, #48]	; 0x30
 800744c:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <HAL_PCD_MspInit+0xd4>)
 800744e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	613b      	str	r3, [r7, #16]
 8007456:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007458:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800745c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800745e:	2302      	movs	r3, #2
 8007460:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007462:	2300      	movs	r3, #0
 8007464:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007466:	2303      	movs	r3, #3
 8007468:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800746a:	230a      	movs	r3, #10
 800746c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800746e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007472:	4619      	mov	r1, r3
 8007474:	4814      	ldr	r0, [pc, #80]	; (80074c8 <HAL_PCD_MspInit+0xd8>)
 8007476:	f000 ff27 	bl	80082c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800747a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800747e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007480:	2300      	movs	r3, #0
 8007482:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007484:	2300      	movs	r3, #0
 8007486:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007488:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800748c:	4619      	mov	r1, r3
 800748e:	480e      	ldr	r0, [pc, #56]	; (80074c8 <HAL_PCD_MspInit+0xd8>)
 8007490:	f000 ff1a 	bl	80082c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007494:	4b0b      	ldr	r3, [pc, #44]	; (80074c4 <HAL_PCD_MspInit+0xd4>)
 8007496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007498:	4a0a      	ldr	r2, [pc, #40]	; (80074c4 <HAL_PCD_MspInit+0xd4>)
 800749a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749e:	6353      	str	r3, [r2, #52]	; 0x34
 80074a0:	2300      	movs	r3, #0
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	4b07      	ldr	r3, [pc, #28]	; (80074c4 <HAL_PCD_MspInit+0xd4>)
 80074a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a8:	4a06      	ldr	r2, [pc, #24]	; (80074c4 <HAL_PCD_MspInit+0xd4>)
 80074aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074ae:	6453      	str	r3, [r2, #68]	; 0x44
 80074b0:	4b04      	ldr	r3, [pc, #16]	; (80074c4 <HAL_PCD_MspInit+0xd4>)
 80074b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80074bc:	bf00      	nop
 80074be:	3780      	adds	r7, #128	; 0x80
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	40023800 	.word	0x40023800
 80074c8:	40020000 	.word	0x40020000

080074cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80074cc:	b480      	push	{r7}
 80074ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80074d0:	e7fe      	b.n	80074d0 <NMI_Handler+0x4>

080074d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80074d2:	b480      	push	{r7}
 80074d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074d6:	e7fe      	b.n	80074d6 <HardFault_Handler+0x4>

080074d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074dc:	e7fe      	b.n	80074dc <MemManage_Handler+0x4>

080074de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80074de:	b480      	push	{r7}
 80074e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074e2:	e7fe      	b.n	80074e2 <BusFault_Handler+0x4>

080074e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074e8:	e7fe      	b.n	80074e8 <UsageFault_Handler+0x4>

080074ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80074ea:	b480      	push	{r7}
 80074ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074ee:	bf00      	nop
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074fc:	bf00      	nop
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007506:	b480      	push	{r7}
 8007508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800750a:	bf00      	nop
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007518:	f000 f97e 	bl	8007818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800751c:	bf00      	nop
 800751e:	bd80      	pop	{r7, pc}

08007520 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8007524:	4802      	ldr	r0, [pc, #8]	; (8007530 <DMA1_Stream1_IRQHandler+0x10>)
 8007526:	f000 fc65 	bl	8007df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800752a:	bf00      	nop
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	200047e4 	.word	0x200047e4

08007534 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8007538:	4802      	ldr	r0, [pc, #8]	; (8007544 <DMA1_Stream3_IRQHandler+0x10>)
 800753a:	f000 fc5b 	bl	8007df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800753e:	bf00      	nop
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20004844 	.word	0x20004844

08007548 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800754c:	4802      	ldr	r0, [pc, #8]	; (8007558 <TIM3_IRQHandler+0x10>)
 800754e:	f002 fbd3 	bl	8009cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007552:	bf00      	nop
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20004758 	.word	0x20004758

0800755c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007560:	4802      	ldr	r0, [pc, #8]	; (800756c <USART3_IRQHandler+0x10>)
 8007562:	f003 fcf9 	bl	800af58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007566:	bf00      	nop
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200047a0 	.word	0x200047a0

08007570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
	return 1;
 8007574:	2301      	movs	r3, #1
}
 8007576:	4618      	mov	r0, r3
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <_kill>:

int _kill(int pid, int sig)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800758a:	f004 ff97 	bl	800c4bc <__errno>
 800758e:	4603      	mov	r3, r0
 8007590:	2216      	movs	r2, #22
 8007592:	601a      	str	r2, [r3, #0]
	return -1;
 8007594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <_exit>:

void _exit (int status)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80075a8:	f04f 31ff 	mov.w	r1, #4294967295
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f7ff ffe7 	bl	8007580 <_kill>
	while (1) {}		/* Make sure we hang here */
 80075b2:	e7fe      	b.n	80075b2 <_exit+0x12>

080075b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075c0:	2300      	movs	r3, #0
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	e00a      	b.n	80075dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80075c6:	f3af 8000 	nop.w
 80075ca:	4601      	mov	r1, r0
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	60ba      	str	r2, [r7, #8]
 80075d2:	b2ca      	uxtb	r2, r1
 80075d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	3301      	adds	r3, #1
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	dbf0      	blt.n	80075c6 <_read+0x12>
	}

return len;
 80075e4:	687b      	ldr	r3, [r7, #4]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b086      	sub	sp, #24
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80075fa:	2300      	movs	r3, #0
 80075fc:	617b      	str	r3, [r7, #20]
 80075fe:	e009      	b.n	8007614 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	60ba      	str	r2, [r7, #8]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	4618      	mov	r0, r3
 800760a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	3301      	adds	r3, #1
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	429a      	cmp	r2, r3
 800761a:	dbf1      	blt.n	8007600 <_write+0x12>
	}
	return len;
 800761c:	687b      	ldr	r3, [r7, #4]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <_close>:

int _close(int file)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
	return -1;
 800762e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007632:	4618      	mov	r0, r3
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800764e:	605a      	str	r2, [r3, #4]
	return 0;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <_isatty>:

int _isatty(int file)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
	return 1;
 8007666:	2301      	movs	r3, #1
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
	return 0;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
	...

08007690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007698:	4a14      	ldr	r2, [pc, #80]	; (80076ec <_sbrk+0x5c>)
 800769a:	4b15      	ldr	r3, [pc, #84]	; (80076f0 <_sbrk+0x60>)
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80076a4:	4b13      	ldr	r3, [pc, #76]	; (80076f4 <_sbrk+0x64>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80076ac:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <_sbrk+0x64>)
 80076ae:	4a12      	ldr	r2, [pc, #72]	; (80076f8 <_sbrk+0x68>)
 80076b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80076b2:	4b10      	ldr	r3, [pc, #64]	; (80076f4 <_sbrk+0x64>)
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4413      	add	r3, r2
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d207      	bcs.n	80076d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80076c0:	f004 fefc 	bl	800c4bc <__errno>
 80076c4:	4603      	mov	r3, r0
 80076c6:	220c      	movs	r2, #12
 80076c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80076ca:	f04f 33ff 	mov.w	r3, #4294967295
 80076ce:	e009      	b.n	80076e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80076d0:	4b08      	ldr	r3, [pc, #32]	; (80076f4 <_sbrk+0x64>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80076d6:	4b07      	ldr	r3, [pc, #28]	; (80076f4 <_sbrk+0x64>)
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4413      	add	r3, r2
 80076de:	4a05      	ldr	r2, [pc, #20]	; (80076f4 <_sbrk+0x64>)
 80076e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80076e2:	68fb      	ldr	r3, [r7, #12]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20050000 	.word	0x20050000
 80076f0:	00000400 	.word	0x00000400
 80076f4:	20005240 	.word	0x20005240
 80076f8:	20005258 	.word	0x20005258

080076fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007700:	4b06      	ldr	r3, [pc, #24]	; (800771c <SystemInit+0x20>)
 8007702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007706:	4a05      	ldr	r2, [pc, #20]	; (800771c <SystemInit+0x20>)
 8007708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800770c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007710:	bf00      	nop
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	e000ed00 	.word	0xe000ed00

08007720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8007720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007758 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007724:	480d      	ldr	r0, [pc, #52]	; (800775c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007726:	490e      	ldr	r1, [pc, #56]	; (8007760 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007728:	4a0e      	ldr	r2, [pc, #56]	; (8007764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800772a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800772c:	e002      	b.n	8007734 <LoopCopyDataInit>

0800772e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800772e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007732:	3304      	adds	r3, #4

08007734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007738:	d3f9      	bcc.n	800772e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800773a:	4a0b      	ldr	r2, [pc, #44]	; (8007768 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800773c:	4c0b      	ldr	r4, [pc, #44]	; (800776c <LoopFillZerobss+0x26>)
  movs r3, #0
 800773e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007740:	e001      	b.n	8007746 <LoopFillZerobss>

08007742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007744:	3204      	adds	r2, #4

08007746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007748:	d3fb      	bcc.n	8007742 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800774a:	f7ff ffd7 	bl	80076fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800774e:	f004 febb 	bl	800c4c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007752:	f7fc fcc5 	bl	80040e0 <main>
  bx  lr    
 8007756:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8007758:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800775c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007760:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8007764:	08011700 	.word	0x08011700
  ldr r2, =_sbss
 8007768:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800776c:	20005258 	.word	0x20005258

08007770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007770:	e7fe      	b.n	8007770 <ADC_IRQHandler>
	...

08007774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007778:	4b0e      	ldr	r3, [pc, #56]	; (80077b4 <HAL_Init+0x40>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a0d      	ldr	r2, [pc, #52]	; (80077b4 <HAL_Init+0x40>)
 800777e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007784:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <HAL_Init+0x40>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a0a      	ldr	r2, [pc, #40]	; (80077b4 <HAL_Init+0x40>)
 800778a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800778e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007790:	4b08      	ldr	r3, [pc, #32]	; (80077b4 <HAL_Init+0x40>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a07      	ldr	r2, [pc, #28]	; (80077b4 <HAL_Init+0x40>)
 8007796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800779a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800779c:	2003      	movs	r0, #3
 800779e:	f000 f94f 	bl	8007a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80077a2:	2000      	movs	r0, #0
 80077a4:	f000 f808 	bl	80077b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077a8:	f7ff fca8 	bl	80070fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	40023c00 	.word	0x40023c00

080077b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80077c0:	4b12      	ldr	r3, [pc, #72]	; (800780c <HAL_InitTick+0x54>)
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	4b12      	ldr	r3, [pc, #72]	; (8007810 <HAL_InitTick+0x58>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	4619      	mov	r1, r3
 80077ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80077d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 f967 	bl	8007aaa <HAL_SYSTICK_Config>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e00e      	b.n	8007804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b0f      	cmp	r3, #15
 80077ea:	d80a      	bhi.n	8007802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80077ec:	2200      	movs	r2, #0
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	f000 f92f 	bl	8007a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80077f8:	4a06      	ldr	r2, [pc, #24]	; (8007814 <HAL_InitTick+0x5c>)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	e000      	b.n	8007804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	20000000 	.word	0x20000000
 8007810:	20000008 	.word	0x20000008
 8007814:	20000004 	.word	0x20000004

08007818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007818:	b480      	push	{r7}
 800781a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800781c:	4b06      	ldr	r3, [pc, #24]	; (8007838 <HAL_IncTick+0x20>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	4b06      	ldr	r3, [pc, #24]	; (800783c <HAL_IncTick+0x24>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4413      	add	r3, r2
 8007828:	4a04      	ldr	r2, [pc, #16]	; (800783c <HAL_IncTick+0x24>)
 800782a:	6013      	str	r3, [r2, #0]
}
 800782c:	bf00      	nop
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	20000008 	.word	0x20000008
 800783c:	20005244 	.word	0x20005244

08007840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007840:	b480      	push	{r7}
 8007842:	af00      	add	r7, sp, #0
  return uwTick;
 8007844:	4b03      	ldr	r3, [pc, #12]	; (8007854 <HAL_GetTick+0x14>)
 8007846:	681b      	ldr	r3, [r3, #0]
}
 8007848:	4618      	mov	r0, r3
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20005244 	.word	0x20005244

08007858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007860:	f7ff ffee 	bl	8007840 <HAL_GetTick>
 8007864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007870:	d005      	beq.n	800787e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007872:	4b0a      	ldr	r3, [pc, #40]	; (800789c <HAL_Delay+0x44>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800787e:	bf00      	nop
 8007880:	f7ff ffde 	bl	8007840 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	429a      	cmp	r2, r3
 800788e:	d8f7      	bhi.n	8007880 <HAL_Delay+0x28>
  {
  }
}
 8007890:	bf00      	nop
 8007892:	bf00      	nop
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000008 	.word	0x20000008

080078a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078b0:	4b0c      	ldr	r3, [pc, #48]	; (80078e4 <__NVIC_SetPriorityGrouping+0x44>)
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80078bc:	4013      	ands	r3, r2
 80078be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80078cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078d2:	4a04      	ldr	r2, [pc, #16]	; (80078e4 <__NVIC_SetPriorityGrouping+0x44>)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	60d3      	str	r3, [r2, #12]
}
 80078d8:	bf00      	nop
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	e000ed00 	.word	0xe000ed00

080078e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80078e8:	b480      	push	{r7}
 80078ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078ec:	4b04      	ldr	r3, [pc, #16]	; (8007900 <__NVIC_GetPriorityGrouping+0x18>)
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	0a1b      	lsrs	r3, r3, #8
 80078f2:	f003 0307 	and.w	r3, r3, #7
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	e000ed00 	.word	0xe000ed00

08007904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	4603      	mov	r3, r0
 800790c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800790e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007912:	2b00      	cmp	r3, #0
 8007914:	db0b      	blt.n	800792e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	f003 021f 	and.w	r2, r3, #31
 800791c:	4907      	ldr	r1, [pc, #28]	; (800793c <__NVIC_EnableIRQ+0x38>)
 800791e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007922:	095b      	lsrs	r3, r3, #5
 8007924:	2001      	movs	r0, #1
 8007926:	fa00 f202 	lsl.w	r2, r0, r2
 800792a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800792e:	bf00      	nop
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	e000e100 	.word	0xe000e100

08007940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	6039      	str	r1, [r7, #0]
 800794a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800794c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007950:	2b00      	cmp	r3, #0
 8007952:	db0a      	blt.n	800796a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	b2da      	uxtb	r2, r3
 8007958:	490c      	ldr	r1, [pc, #48]	; (800798c <__NVIC_SetPriority+0x4c>)
 800795a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800795e:	0112      	lsls	r2, r2, #4
 8007960:	b2d2      	uxtb	r2, r2
 8007962:	440b      	add	r3, r1
 8007964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007968:	e00a      	b.n	8007980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	b2da      	uxtb	r2, r3
 800796e:	4908      	ldr	r1, [pc, #32]	; (8007990 <__NVIC_SetPriority+0x50>)
 8007970:	79fb      	ldrb	r3, [r7, #7]
 8007972:	f003 030f 	and.w	r3, r3, #15
 8007976:	3b04      	subs	r3, #4
 8007978:	0112      	lsls	r2, r2, #4
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	440b      	add	r3, r1
 800797e:	761a      	strb	r2, [r3, #24]
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	e000e100 	.word	0xe000e100
 8007990:	e000ed00 	.word	0xe000ed00

08007994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007994:	b480      	push	{r7}
 8007996:	b089      	sub	sp, #36	; 0x24
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f003 0307 	and.w	r3, r3, #7
 80079a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	f1c3 0307 	rsb	r3, r3, #7
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	bf28      	it	cs
 80079b2:	2304      	movcs	r3, #4
 80079b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	3304      	adds	r3, #4
 80079ba:	2b06      	cmp	r3, #6
 80079bc:	d902      	bls.n	80079c4 <NVIC_EncodePriority+0x30>
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	3b03      	subs	r3, #3
 80079c2:	e000      	b.n	80079c6 <NVIC_EncodePriority+0x32>
 80079c4:	2300      	movs	r3, #0
 80079c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079c8:	f04f 32ff 	mov.w	r2, #4294967295
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	fa02 f303 	lsl.w	r3, r2, r3
 80079d2:	43da      	mvns	r2, r3
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	401a      	ands	r2, r3
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079dc:	f04f 31ff 	mov.w	r1, #4294967295
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	fa01 f303 	lsl.w	r3, r1, r3
 80079e6:	43d9      	mvns	r1, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079ec:	4313      	orrs	r3, r2
         );
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3724      	adds	r7, #36	; 0x24
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
	...

080079fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a0c:	d301      	bcc.n	8007a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e00f      	b.n	8007a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a12:	4a0a      	ldr	r2, [pc, #40]	; (8007a3c <SysTick_Config+0x40>)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a1a:	210f      	movs	r1, #15
 8007a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a20:	f7ff ff8e 	bl	8007940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a24:	4b05      	ldr	r3, [pc, #20]	; (8007a3c <SysTick_Config+0x40>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a2a:	4b04      	ldr	r3, [pc, #16]	; (8007a3c <SysTick_Config+0x40>)
 8007a2c:	2207      	movs	r2, #7
 8007a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	e000e010 	.word	0xe000e010

08007a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff ff29 	bl	80078a0 <__NVIC_SetPriorityGrouping>
}
 8007a4e:	bf00      	nop
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b086      	sub	sp, #24
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	607a      	str	r2, [r7, #4]
 8007a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a68:	f7ff ff3e 	bl	80078e8 <__NVIC_GetPriorityGrouping>
 8007a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	68b9      	ldr	r1, [r7, #8]
 8007a72:	6978      	ldr	r0, [r7, #20]
 8007a74:	f7ff ff8e 	bl	8007994 <NVIC_EncodePriority>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a7e:	4611      	mov	r1, r2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f7ff ff5d 	bl	8007940 <__NVIC_SetPriority>
}
 8007a86:	bf00      	nop
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b082      	sub	sp, #8
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	4603      	mov	r3, r0
 8007a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7ff ff31 	bl	8007904 <__NVIC_EnableIRQ>
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff ffa2 	bl	80079fc <SysTick_Config>
 8007ab8:	4603      	mov	r3, r0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007ad0:	f7ff feb6 	bl	8007840 <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e099      	b.n	8007c14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0201 	bic.w	r2, r2, #1
 8007afe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b00:	e00f      	b.n	8007b22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b02:	f7ff fe9d 	bl	8007840 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b05      	cmp	r3, #5
 8007b0e:	d908      	bls.n	8007b22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2220      	movs	r2, #32
 8007b14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2203      	movs	r2, #3
 8007b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e078      	b.n	8007c14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e8      	bne.n	8007b02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	4b38      	ldr	r3, [pc, #224]	; (8007c1c <HAL_DMA_Init+0x158>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	2b04      	cmp	r3, #4
 8007b7a:	d107      	bne.n	8007b8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b84:	4313      	orrs	r3, r2
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f023 0307 	bic.w	r3, r3, #7
 8007ba2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d117      	bne.n	8007be6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00e      	beq.n	8007be6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fb01 	bl	80081d0 <DMA_CheckFifoParam>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d008      	beq.n	8007be6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2240      	movs	r2, #64	; 0x40
 8007bd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007be2:	2301      	movs	r3, #1
 8007be4:	e016      	b.n	8007c14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fab8 	bl	8008164 <DMA_CalcBaseAndBitshift>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bfc:	223f      	movs	r2, #63	; 0x3f
 8007bfe:	409a      	lsls	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	e010803f 	.word	0xe010803f

08007c20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d101      	bne.n	8007c46 <HAL_DMA_Start_IT+0x26>
 8007c42:	2302      	movs	r3, #2
 8007c44:	e040      	b.n	8007cc8 <HAL_DMA_Start_IT+0xa8>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d12f      	bne.n	8007cba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	68b9      	ldr	r1, [r7, #8]
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 fa4a 	bl	8008108 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c78:	223f      	movs	r2, #63	; 0x3f
 8007c7a:	409a      	lsls	r2, r3
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0216 	orr.w	r2, r2, #22
 8007c8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d007      	beq.n	8007ca8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f042 0208 	orr.w	r2, r2, #8
 8007ca6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f042 0201 	orr.w	r2, r2, #1
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	e005      	b.n	8007cc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cdc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007cde:	f7ff fdaf 	bl	8007840 <HAL_GetTick>
 8007ce2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d008      	beq.n	8007d02 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2280      	movs	r2, #128	; 0x80
 8007cf4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e052      	b.n	8007da8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0216 	bic.w	r2, r2, #22
 8007d10:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	695a      	ldr	r2, [r3, #20]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d20:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d103      	bne.n	8007d32 <HAL_DMA_Abort+0x62>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d007      	beq.n	8007d42 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0208 	bic.w	r2, r2, #8
 8007d40:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f022 0201 	bic.w	r2, r2, #1
 8007d50:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d52:	e013      	b.n	8007d7c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d54:	f7ff fd74 	bl	8007840 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b05      	cmp	r3, #5
 8007d60:	d90c      	bls.n	8007d7c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2220      	movs	r2, #32
 8007d66:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2203      	movs	r2, #3
 8007d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e015      	b.n	8007da8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1e4      	bne.n	8007d54 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8e:	223f      	movs	r2, #63	; 0x3f
 8007d90:	409a      	lsls	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d004      	beq.n	8007dce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2280      	movs	r2, #128	; 0x80
 8007dc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e00c      	b.n	8007de8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2205      	movs	r2, #5
 8007dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 0201 	bic.w	r2, r2, #1
 8007de4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e00:	4b8e      	ldr	r3, [pc, #568]	; (800803c <HAL_DMA_IRQHandler+0x248>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a8e      	ldr	r2, [pc, #568]	; (8008040 <HAL_DMA_IRQHandler+0x24c>)
 8007e06:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0a:	0a9b      	lsrs	r3, r3, #10
 8007e0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e1e:	2208      	movs	r2, #8
 8007e20:	409a      	lsls	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4013      	ands	r3, r2
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d01a      	beq.n	8007e60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d013      	beq.n	8007e60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0204 	bic.w	r2, r2, #4
 8007e46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4c:	2208      	movs	r2, #8
 8007e4e:	409a      	lsls	r2, r3
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e58:	f043 0201 	orr.w	r2, r3, #1
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e64:	2201      	movs	r2, #1
 8007e66:	409a      	lsls	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d012      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00b      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e82:	2201      	movs	r2, #1
 8007e84:	409a      	lsls	r2, r3
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8e:	f043 0202 	orr.w	r2, r3, #2
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	409a      	lsls	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d012      	beq.n	8007ecc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00b      	beq.n	8007ecc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb8:	2204      	movs	r2, #4
 8007eba:	409a      	lsls	r2, r3
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec4:	f043 0204 	orr.w	r2, r3, #4
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed0:	2210      	movs	r2, #16
 8007ed2:	409a      	lsls	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d043      	beq.n	8007f64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0308 	and.w	r3, r3, #8
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d03c      	beq.n	8007f64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eee:	2210      	movs	r2, #16
 8007ef0:	409a      	lsls	r2, r3
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d018      	beq.n	8007f36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d108      	bne.n	8007f24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d024      	beq.n	8007f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
 8007f22:	e01f      	b.n	8007f64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d01b      	beq.n	8007f64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	4798      	blx	r3
 8007f34:	e016      	b.n	8007f64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d107      	bne.n	8007f54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0208 	bic.w	r2, r2, #8
 8007f52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f68:	2220      	movs	r2, #32
 8007f6a:	409a      	lsls	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 808f 	beq.w	8008094 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0310 	and.w	r3, r3, #16
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 8087 	beq.w	8008094 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	409a      	lsls	r2, r3
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b05      	cmp	r3, #5
 8007f9c:	d136      	bne.n	800800c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0216 	bic.w	r2, r2, #22
 8007fac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	695a      	ldr	r2, [r3, #20]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d103      	bne.n	8007fce <HAL_DMA_IRQHandler+0x1da>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d007      	beq.n	8007fde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0208 	bic.w	r2, r2, #8
 8007fdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fe2:	223f      	movs	r2, #63	; 0x3f
 8007fe4:	409a      	lsls	r2, r3
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d07e      	beq.n	8008100 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
        }
        return;
 800800a:	e079      	b.n	8008100 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d01d      	beq.n	8008056 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10d      	bne.n	8008044 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802c:	2b00      	cmp	r3, #0
 800802e:	d031      	beq.n	8008094 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	4798      	blx	r3
 8008038:	e02c      	b.n	8008094 <HAL_DMA_IRQHandler+0x2a0>
 800803a:	bf00      	nop
 800803c:	20000000 	.word	0x20000000
 8008040:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d023      	beq.n	8008094 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	4798      	blx	r3
 8008054:	e01e      	b.n	8008094 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10f      	bne.n	8008084 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 0210 	bic.w	r2, r2, #16
 8008072:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008098:	2b00      	cmp	r3, #0
 800809a:	d032      	beq.n	8008102 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d022      	beq.n	80080ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2205      	movs	r2, #5
 80080ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 0201 	bic.w	r2, r2, #1
 80080be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	3301      	adds	r3, #1
 80080c4:	60bb      	str	r3, [r7, #8]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d307      	bcc.n	80080dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1f2      	bne.n	80080c0 <HAL_DMA_IRQHandler+0x2cc>
 80080da:	e000      	b.n	80080de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80080dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d005      	beq.n	8008102 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
 80080fe:	e000      	b.n	8008102 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008100:	bf00      	nop
    }
  }
}
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008124:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	2b40      	cmp	r3, #64	; 0x40
 8008134:	d108      	bne.n	8008148 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008146:	e007      	b.n	8008158 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	60da      	str	r2, [r3, #12]
}
 8008158:	bf00      	nop
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	b2db      	uxtb	r3, r3
 8008172:	3b10      	subs	r3, #16
 8008174:	4a14      	ldr	r2, [pc, #80]	; (80081c8 <DMA_CalcBaseAndBitshift+0x64>)
 8008176:	fba2 2303 	umull	r2, r3, r2, r3
 800817a:	091b      	lsrs	r3, r3, #4
 800817c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800817e:	4a13      	ldr	r2, [pc, #76]	; (80081cc <DMA_CalcBaseAndBitshift+0x68>)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4413      	add	r3, r2
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b03      	cmp	r3, #3
 8008190:	d909      	bls.n	80081a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800819a:	f023 0303 	bic.w	r3, r3, #3
 800819e:	1d1a      	adds	r2, r3, #4
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	659a      	str	r2, [r3, #88]	; 0x58
 80081a4:	e007      	b.n	80081b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80081ae:	f023 0303 	bic.w	r3, r3, #3
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	aaaaaaab 	.word	0xaaaaaaab
 80081cc:	0801123c 	.word	0x0801123c

080081d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d11f      	bne.n	800822a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d856      	bhi.n	800829e <DMA_CheckFifoParam+0xce>
 80081f0:	a201      	add	r2, pc, #4	; (adr r2, 80081f8 <DMA_CheckFifoParam+0x28>)
 80081f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f6:	bf00      	nop
 80081f8:	08008209 	.word	0x08008209
 80081fc:	0800821b 	.word	0x0800821b
 8008200:	08008209 	.word	0x08008209
 8008204:	0800829f 	.word	0x0800829f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d046      	beq.n	80082a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008218:	e043      	b.n	80082a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008222:	d140      	bne.n	80082a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008228:	e03d      	b.n	80082a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008232:	d121      	bne.n	8008278 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2b03      	cmp	r3, #3
 8008238:	d837      	bhi.n	80082aa <DMA_CheckFifoParam+0xda>
 800823a:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <DMA_CheckFifoParam+0x70>)
 800823c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008240:	08008251 	.word	0x08008251
 8008244:	08008257 	.word	0x08008257
 8008248:	08008251 	.word	0x08008251
 800824c:	08008269 	.word	0x08008269
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	73fb      	strb	r3, [r7, #15]
      break;
 8008254:	e030      	b.n	80082b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d025      	beq.n	80082ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008266:	e022      	b.n	80082ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008270:	d11f      	bne.n	80082b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008276:	e01c      	b.n	80082b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2b02      	cmp	r3, #2
 800827c:	d903      	bls.n	8008286 <DMA_CheckFifoParam+0xb6>
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2b03      	cmp	r3, #3
 8008282:	d003      	beq.n	800828c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008284:	e018      	b.n	80082b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	73fb      	strb	r3, [r7, #15]
      break;
 800828a:	e015      	b.n	80082b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00e      	beq.n	80082b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	73fb      	strb	r3, [r7, #15]
      break;
 800829c:	e00b      	b.n	80082b6 <DMA_CheckFifoParam+0xe6>
      break;
 800829e:	bf00      	nop
 80082a0:	e00a      	b.n	80082b8 <DMA_CheckFifoParam+0xe8>
      break;
 80082a2:	bf00      	nop
 80082a4:	e008      	b.n	80082b8 <DMA_CheckFifoParam+0xe8>
      break;
 80082a6:	bf00      	nop
 80082a8:	e006      	b.n	80082b8 <DMA_CheckFifoParam+0xe8>
      break;
 80082aa:	bf00      	nop
 80082ac:	e004      	b.n	80082b8 <DMA_CheckFifoParam+0xe8>
      break;
 80082ae:	bf00      	nop
 80082b0:	e002      	b.n	80082b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80082b2:	bf00      	nop
 80082b4:	e000      	b.n	80082b8 <DMA_CheckFifoParam+0xe8>
      break;
 80082b6:	bf00      	nop
    }
  } 
  
  return status; 
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop

080082c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b089      	sub	sp, #36	; 0x24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80082da:	2300      	movs	r3, #0
 80082dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80082de:	2300      	movs	r3, #0
 80082e0:	61fb      	str	r3, [r7, #28]
 80082e2:	e165      	b.n	80085b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80082e4:	2201      	movs	r2, #1
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	4013      	ands	r3, r2
 80082f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	f040 8154 	bne.w	80085aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f003 0303 	and.w	r3, r3, #3
 800830a:	2b01      	cmp	r3, #1
 800830c:	d005      	beq.n	800831a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008316:	2b02      	cmp	r3, #2
 8008318:	d130      	bne.n	800837c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	2203      	movs	r2, #3
 8008326:	fa02 f303 	lsl.w	r3, r2, r3
 800832a:	43db      	mvns	r3, r3
 800832c:	69ba      	ldr	r2, [r7, #24]
 800832e:	4013      	ands	r3, r2
 8008330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	68da      	ldr	r2, [r3, #12]
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	005b      	lsls	r3, r3, #1
 800833a:	fa02 f303 	lsl.w	r3, r2, r3
 800833e:	69ba      	ldr	r2, [r7, #24]
 8008340:	4313      	orrs	r3, r2
 8008342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008350:	2201      	movs	r2, #1
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	fa02 f303 	lsl.w	r3, r2, r3
 8008358:	43db      	mvns	r3, r3
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	4013      	ands	r3, r2
 800835e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	091b      	lsrs	r3, r3, #4
 8008366:	f003 0201 	and.w	r2, r3, #1
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	fa02 f303 	lsl.w	r3, r2, r3
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	4313      	orrs	r3, r2
 8008374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f003 0303 	and.w	r3, r3, #3
 8008384:	2b03      	cmp	r3, #3
 8008386:	d017      	beq.n	80083b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	2203      	movs	r2, #3
 8008394:	fa02 f303 	lsl.w	r3, r2, r3
 8008398:	43db      	mvns	r3, r3
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	4013      	ands	r3, r2
 800839e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	fa02 f303 	lsl.w	r3, r2, r3
 80083ac:	69ba      	ldr	r2, [r7, #24]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f003 0303 	and.w	r3, r3, #3
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d123      	bne.n	800840c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	08da      	lsrs	r2, r3, #3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	3208      	adds	r2, #8
 80083cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	f003 0307 	and.w	r3, r3, #7
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	220f      	movs	r2, #15
 80083dc:	fa02 f303 	lsl.w	r3, r2, r3
 80083e0:	43db      	mvns	r3, r3
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	4013      	ands	r3, r2
 80083e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	691a      	ldr	r2, [r3, #16]
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	f003 0307 	and.w	r3, r3, #7
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	fa02 f303 	lsl.w	r3, r2, r3
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	08da      	lsrs	r2, r3, #3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	3208      	adds	r2, #8
 8008406:	69b9      	ldr	r1, [r7, #24]
 8008408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	005b      	lsls	r3, r3, #1
 8008416:	2203      	movs	r2, #3
 8008418:	fa02 f303 	lsl.w	r3, r2, r3
 800841c:	43db      	mvns	r3, r3
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	4013      	ands	r3, r2
 8008422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f003 0203 	and.w	r2, r3, #3
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	fa02 f303 	lsl.w	r3, r2, r3
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	4313      	orrs	r3, r2
 8008438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 80ae 	beq.w	80085aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800844e:	2300      	movs	r3, #0
 8008450:	60fb      	str	r3, [r7, #12]
 8008452:	4b5d      	ldr	r3, [pc, #372]	; (80085c8 <HAL_GPIO_Init+0x300>)
 8008454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008456:	4a5c      	ldr	r2, [pc, #368]	; (80085c8 <HAL_GPIO_Init+0x300>)
 8008458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800845c:	6453      	str	r3, [r2, #68]	; 0x44
 800845e:	4b5a      	ldr	r3, [pc, #360]	; (80085c8 <HAL_GPIO_Init+0x300>)
 8008460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008466:	60fb      	str	r3, [r7, #12]
 8008468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800846a:	4a58      	ldr	r2, [pc, #352]	; (80085cc <HAL_GPIO_Init+0x304>)
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	089b      	lsrs	r3, r3, #2
 8008470:	3302      	adds	r3, #2
 8008472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	220f      	movs	r2, #15
 8008482:	fa02 f303 	lsl.w	r3, r2, r3
 8008486:	43db      	mvns	r3, r3
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	4013      	ands	r3, r2
 800848c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a4f      	ldr	r2, [pc, #316]	; (80085d0 <HAL_GPIO_Init+0x308>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d025      	beq.n	80084e2 <HAL_GPIO_Init+0x21a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a4e      	ldr	r2, [pc, #312]	; (80085d4 <HAL_GPIO_Init+0x30c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d01f      	beq.n	80084de <HAL_GPIO_Init+0x216>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a4d      	ldr	r2, [pc, #308]	; (80085d8 <HAL_GPIO_Init+0x310>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d019      	beq.n	80084da <HAL_GPIO_Init+0x212>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a4c      	ldr	r2, [pc, #304]	; (80085dc <HAL_GPIO_Init+0x314>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d013      	beq.n	80084d6 <HAL_GPIO_Init+0x20e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a4b      	ldr	r2, [pc, #300]	; (80085e0 <HAL_GPIO_Init+0x318>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d00d      	beq.n	80084d2 <HAL_GPIO_Init+0x20a>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a4a      	ldr	r2, [pc, #296]	; (80085e4 <HAL_GPIO_Init+0x31c>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d007      	beq.n	80084ce <HAL_GPIO_Init+0x206>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a49      	ldr	r2, [pc, #292]	; (80085e8 <HAL_GPIO_Init+0x320>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d101      	bne.n	80084ca <HAL_GPIO_Init+0x202>
 80084c6:	2306      	movs	r3, #6
 80084c8:	e00c      	b.n	80084e4 <HAL_GPIO_Init+0x21c>
 80084ca:	2307      	movs	r3, #7
 80084cc:	e00a      	b.n	80084e4 <HAL_GPIO_Init+0x21c>
 80084ce:	2305      	movs	r3, #5
 80084d0:	e008      	b.n	80084e4 <HAL_GPIO_Init+0x21c>
 80084d2:	2304      	movs	r3, #4
 80084d4:	e006      	b.n	80084e4 <HAL_GPIO_Init+0x21c>
 80084d6:	2303      	movs	r3, #3
 80084d8:	e004      	b.n	80084e4 <HAL_GPIO_Init+0x21c>
 80084da:	2302      	movs	r3, #2
 80084dc:	e002      	b.n	80084e4 <HAL_GPIO_Init+0x21c>
 80084de:	2301      	movs	r3, #1
 80084e0:	e000      	b.n	80084e4 <HAL_GPIO_Init+0x21c>
 80084e2:	2300      	movs	r3, #0
 80084e4:	69fa      	ldr	r2, [r7, #28]
 80084e6:	f002 0203 	and.w	r2, r2, #3
 80084ea:	0092      	lsls	r2, r2, #2
 80084ec:	4093      	lsls	r3, r2
 80084ee:	69ba      	ldr	r2, [r7, #24]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80084f4:	4935      	ldr	r1, [pc, #212]	; (80085cc <HAL_GPIO_Init+0x304>)
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	089b      	lsrs	r3, r3, #2
 80084fa:	3302      	adds	r3, #2
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008502:	4b3a      	ldr	r3, [pc, #232]	; (80085ec <HAL_GPIO_Init+0x324>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	43db      	mvns	r3, r3
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	4013      	ands	r3, r2
 8008510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	4313      	orrs	r3, r2
 8008524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008526:	4a31      	ldr	r2, [pc, #196]	; (80085ec <HAL_GPIO_Init+0x324>)
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800852c:	4b2f      	ldr	r3, [pc, #188]	; (80085ec <HAL_GPIO_Init+0x324>)
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	43db      	mvns	r3, r3
 8008536:	69ba      	ldr	r2, [r7, #24]
 8008538:	4013      	ands	r3, r2
 800853a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d003      	beq.n	8008550 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	4313      	orrs	r3, r2
 800854e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008550:	4a26      	ldr	r2, [pc, #152]	; (80085ec <HAL_GPIO_Init+0x324>)
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008556:	4b25      	ldr	r3, [pc, #148]	; (80085ec <HAL_GPIO_Init+0x324>)
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	43db      	mvns	r3, r3
 8008560:	69ba      	ldr	r2, [r7, #24]
 8008562:	4013      	ands	r3, r2
 8008564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	4313      	orrs	r3, r2
 8008578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800857a:	4a1c      	ldr	r2, [pc, #112]	; (80085ec <HAL_GPIO_Init+0x324>)
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008580:	4b1a      	ldr	r3, [pc, #104]	; (80085ec <HAL_GPIO_Init+0x324>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	43db      	mvns	r3, r3
 800858a:	69ba      	ldr	r2, [r7, #24]
 800858c:	4013      	ands	r3, r2
 800858e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800859c:	69ba      	ldr	r2, [r7, #24]
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80085a4:	4a11      	ldr	r2, [pc, #68]	; (80085ec <HAL_GPIO_Init+0x324>)
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	3301      	adds	r3, #1
 80085ae:	61fb      	str	r3, [r7, #28]
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	2b0f      	cmp	r3, #15
 80085b4:	f67f ae96 	bls.w	80082e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80085b8:	bf00      	nop
 80085ba:	bf00      	nop
 80085bc:	3724      	adds	r7, #36	; 0x24
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	40023800 	.word	0x40023800
 80085cc:	40013800 	.word	0x40013800
 80085d0:	40020000 	.word	0x40020000
 80085d4:	40020400 	.word	0x40020400
 80085d8:	40020800 	.word	0x40020800
 80085dc:	40020c00 	.word	0x40020c00
 80085e0:	40021000 	.word	0x40021000
 80085e4:	40021400 	.word	0x40021400
 80085e8:	40021800 	.word	0x40021800
 80085ec:	40013c00 	.word	0x40013c00

080085f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	807b      	strh	r3, [r7, #2]
 80085fc:	4613      	mov	r3, r2
 80085fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008600:	787b      	ldrb	r3, [r7, #1]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008606:	887a      	ldrh	r2, [r7, #2]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800860c:	e003      	b.n	8008616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800860e:	887b      	ldrh	r3, [r7, #2]
 8008610:	041a      	lsls	r2, r3, #16
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	619a      	str	r2, [r3, #24]
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008622:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008624:	b08f      	sub	sp, #60	; 0x3c
 8008626:	af0a      	add	r7, sp, #40	; 0x28
 8008628:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d101      	bne.n	8008634 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e116      	b.n	8008862 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008640:	b2db      	uxtb	r3, r3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d106      	bne.n	8008654 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7fe fece 	bl	80073f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2203      	movs	r2, #3
 8008658:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008664:	2b00      	cmp	r3, #0
 8008666:	d102      	bne.n	800866e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f003 fc7f 	bl	800bf76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	603b      	str	r3, [r7, #0]
 800867e:	687e      	ldr	r6, [r7, #4]
 8008680:	466d      	mov	r5, sp
 8008682:	f106 0410 	add.w	r4, r6, #16
 8008686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800868a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800868c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800868e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008692:	e885 0003 	stmia.w	r5, {r0, r1}
 8008696:	1d33      	adds	r3, r6, #4
 8008698:	cb0e      	ldmia	r3, {r1, r2, r3}
 800869a:	6838      	ldr	r0, [r7, #0]
 800869c:	f003 fc0a 	bl	800beb4 <USB_CoreInit>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d005      	beq.n	80086b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2202      	movs	r2, #2
 80086aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e0d7      	b.n	8008862 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2100      	movs	r1, #0
 80086b8:	4618      	mov	r0, r3
 80086ba:	f003 fc6d 	bl	800bf98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086be:	2300      	movs	r3, #0
 80086c0:	73fb      	strb	r3, [r7, #15]
 80086c2:	e04a      	b.n	800875a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80086c4:	7bfa      	ldrb	r2, [r7, #15]
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	4613      	mov	r3, r2
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	440b      	add	r3, r1
 80086d2:	333d      	adds	r3, #61	; 0x3d
 80086d4:	2201      	movs	r2, #1
 80086d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80086d8:	7bfa      	ldrb	r2, [r7, #15]
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	4613      	mov	r3, r2
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	440b      	add	r3, r1
 80086e6:	333c      	adds	r3, #60	; 0x3c
 80086e8:	7bfa      	ldrb	r2, [r7, #15]
 80086ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80086ec:	7bfa      	ldrb	r2, [r7, #15]
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	b298      	uxth	r0, r3
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	4613      	mov	r3, r2
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	3344      	adds	r3, #68	; 0x44
 8008700:	4602      	mov	r2, r0
 8008702:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008704:	7bfa      	ldrb	r2, [r7, #15]
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	4613      	mov	r3, r2
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	3340      	adds	r3, #64	; 0x40
 8008714:	2200      	movs	r2, #0
 8008716:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008718:	7bfa      	ldrb	r2, [r7, #15]
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	4613      	mov	r3, r2
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	440b      	add	r3, r1
 8008726:	3348      	adds	r3, #72	; 0x48
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800872c:	7bfa      	ldrb	r2, [r7, #15]
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	4613      	mov	r3, r2
 8008732:	00db      	lsls	r3, r3, #3
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	440b      	add	r3, r1
 800873a:	334c      	adds	r3, #76	; 0x4c
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008740:	7bfa      	ldrb	r2, [r7, #15]
 8008742:	6879      	ldr	r1, [r7, #4]
 8008744:	4613      	mov	r3, r2
 8008746:	00db      	lsls	r3, r3, #3
 8008748:	4413      	add	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	440b      	add	r3, r1
 800874e:	3354      	adds	r3, #84	; 0x54
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008754:	7bfb      	ldrb	r3, [r7, #15]
 8008756:	3301      	adds	r3, #1
 8008758:	73fb      	strb	r3, [r7, #15]
 800875a:	7bfa      	ldrb	r2, [r7, #15]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	429a      	cmp	r2, r3
 8008762:	d3af      	bcc.n	80086c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]
 8008768:	e044      	b.n	80087f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800876a:	7bfa      	ldrb	r2, [r7, #15]
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	00db      	lsls	r3, r3, #3
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	440b      	add	r3, r1
 8008778:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800877c:	2200      	movs	r2, #0
 800877e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008780:	7bfa      	ldrb	r2, [r7, #15]
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	4613      	mov	r3, r2
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008792:	7bfa      	ldrb	r2, [r7, #15]
 8008794:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008796:	7bfa      	ldrb	r2, [r7, #15]
 8008798:	6879      	ldr	r1, [r7, #4]
 800879a:	4613      	mov	r3, r2
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	440b      	add	r3, r1
 80087a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80087a8:	2200      	movs	r2, #0
 80087aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80087ac:	7bfa      	ldrb	r2, [r7, #15]
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4613      	mov	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	440b      	add	r3, r1
 80087ba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80087be:	2200      	movs	r2, #0
 80087c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80087c2:	7bfa      	ldrb	r2, [r7, #15]
 80087c4:	6879      	ldr	r1, [r7, #4]
 80087c6:	4613      	mov	r3, r2
 80087c8:	00db      	lsls	r3, r3, #3
 80087ca:	4413      	add	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	440b      	add	r3, r1
 80087d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80087d8:	7bfa      	ldrb	r2, [r7, #15]
 80087da:	6879      	ldr	r1, [r7, #4]
 80087dc:	4613      	mov	r3, r2
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	440b      	add	r3, r1
 80087e6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80087ea:	2200      	movs	r2, #0
 80087ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	3301      	adds	r3, #1
 80087f2:	73fb      	strb	r3, [r7, #15]
 80087f4:	7bfa      	ldrb	r2, [r7, #15]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d3b5      	bcc.n	800876a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	687e      	ldr	r6, [r7, #4]
 8008806:	466d      	mov	r5, sp
 8008808:	f106 0410 	add.w	r4, r6, #16
 800880c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800880e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008814:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008818:	e885 0003 	stmia.w	r5, {r0, r1}
 800881c:	1d33      	adds	r3, r6, #4
 800881e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008820:	6838      	ldr	r0, [r7, #0]
 8008822:	f003 fc05 	bl	800c030 <USB_DevInit>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d005      	beq.n	8008838 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2202      	movs	r2, #2
 8008830:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e014      	b.n	8008862 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	2b01      	cmp	r3, #1
 800884e:	d102      	bne.n	8008856 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f80a 	bl	800886a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4618      	mov	r0, r3
 800885c:	f003 fdc3 	bl	800c3e6 <USB_DevDisconnect>

  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800886a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800889c:	f043 0303 	orr.w	r3, r3, #3
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
	...

080088b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e0cc      	b.n	8008a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088c8:	4b68      	ldr	r3, [pc, #416]	; (8008a6c <HAL_RCC_ClockConfig+0x1b8>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0307 	and.w	r3, r3, #7
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d90c      	bls.n	80088f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088d6:	4b65      	ldr	r3, [pc, #404]	; (8008a6c <HAL_RCC_ClockConfig+0x1b8>)
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088de:	4b63      	ldr	r3, [pc, #396]	; (8008a6c <HAL_RCC_ClockConfig+0x1b8>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d001      	beq.n	80088f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e0b8      	b.n	8008a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0302 	and.w	r3, r3, #2
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d020      	beq.n	800893e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0304 	and.w	r3, r3, #4
 8008904:	2b00      	cmp	r3, #0
 8008906:	d005      	beq.n	8008914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008908:	4b59      	ldr	r3, [pc, #356]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	4a58      	ldr	r2, [pc, #352]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 800890e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0308 	and.w	r3, r3, #8
 800891c:	2b00      	cmp	r3, #0
 800891e:	d005      	beq.n	800892c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008920:	4b53      	ldr	r3, [pc, #332]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	4a52      	ldr	r2, [pc, #328]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 8008926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800892a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800892c:	4b50      	ldr	r3, [pc, #320]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	494d      	ldr	r1, [pc, #308]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 800893a:	4313      	orrs	r3, r2
 800893c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	2b00      	cmp	r3, #0
 8008948:	d044      	beq.n	80089d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d107      	bne.n	8008962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008952:	4b47      	ldr	r3, [pc, #284]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d119      	bne.n	8008992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e07f      	b.n	8008a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2b02      	cmp	r3, #2
 8008968:	d003      	beq.n	8008972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800896e:	2b03      	cmp	r3, #3
 8008970:	d107      	bne.n	8008982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008972:	4b3f      	ldr	r3, [pc, #252]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d109      	bne.n	8008992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e06f      	b.n	8008a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008982:	4b3b      	ldr	r3, [pc, #236]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0302 	and.w	r3, r3, #2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e067      	b.n	8008a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008992:	4b37      	ldr	r3, [pc, #220]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	f023 0203 	bic.w	r2, r3, #3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	4934      	ldr	r1, [pc, #208]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089a4:	f7fe ff4c 	bl	8007840 <HAL_GetTick>
 80089a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089aa:	e00a      	b.n	80089c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089ac:	f7fe ff48 	bl	8007840 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d901      	bls.n	80089c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e04f      	b.n	8008a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089c2:	4b2b      	ldr	r3, [pc, #172]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f003 020c 	and.w	r2, r3, #12
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d1eb      	bne.n	80089ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089d4:	4b25      	ldr	r3, [pc, #148]	; (8008a6c <HAL_RCC_ClockConfig+0x1b8>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d20c      	bcs.n	80089fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089e2:	4b22      	ldr	r3, [pc, #136]	; (8008a6c <HAL_RCC_ClockConfig+0x1b8>)
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	b2d2      	uxtb	r2, r2
 80089e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ea:	4b20      	ldr	r3, [pc, #128]	; (8008a6c <HAL_RCC_ClockConfig+0x1b8>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0307 	and.w	r3, r3, #7
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d001      	beq.n	80089fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e032      	b.n	8008a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d008      	beq.n	8008a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a08:	4b19      	ldr	r3, [pc, #100]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	4916      	ldr	r1, [pc, #88]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0308 	and.w	r3, r3, #8
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d009      	beq.n	8008a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a26:	4b12      	ldr	r3, [pc, #72]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	00db      	lsls	r3, r3, #3
 8008a34:	490e      	ldr	r1, [pc, #56]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a3a:	f000 f821 	bl	8008a80 <HAL_RCC_GetSysClockFreq>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	4b0b      	ldr	r3, [pc, #44]	; (8008a70 <HAL_RCC_ClockConfig+0x1bc>)
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	091b      	lsrs	r3, r3, #4
 8008a46:	f003 030f 	and.w	r3, r3, #15
 8008a4a:	490a      	ldr	r1, [pc, #40]	; (8008a74 <HAL_RCC_ClockConfig+0x1c0>)
 8008a4c:	5ccb      	ldrb	r3, [r1, r3]
 8008a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a52:	4a09      	ldr	r2, [pc, #36]	; (8008a78 <HAL_RCC_ClockConfig+0x1c4>)
 8008a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a56:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <HAL_RCC_ClockConfig+0x1c8>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe feac 	bl	80077b8 <HAL_InitTick>

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	40023c00 	.word	0x40023c00
 8008a70:	40023800 	.word	0x40023800
 8008a74:	08011224 	.word	0x08011224
 8008a78:	20000000 	.word	0x20000000
 8008a7c:	20000004 	.word	0x20000004

08008a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a84:	b094      	sub	sp, #80	; 0x50
 8008a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a90:	2300      	movs	r3, #0
 8008a92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a98:	4b79      	ldr	r3, [pc, #484]	; (8008c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	f003 030c 	and.w	r3, r3, #12
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	d00d      	beq.n	8008ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8008aa4:	2b08      	cmp	r3, #8
 8008aa6:	f200 80e1 	bhi.w	8008c6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d002      	beq.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d003      	beq.n	8008aba <HAL_RCC_GetSysClockFreq+0x3a>
 8008ab2:	e0db      	b.n	8008c6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ab4:	4b73      	ldr	r3, [pc, #460]	; (8008c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8008ab6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008ab8:	e0db      	b.n	8008c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008aba:	4b73      	ldr	r3, [pc, #460]	; (8008c88 <HAL_RCC_GetSysClockFreq+0x208>)
 8008abc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008abe:	e0d8      	b.n	8008c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ac0:	4b6f      	ldr	r3, [pc, #444]	; (8008c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ac8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008aca:	4b6d      	ldr	r3, [pc, #436]	; (8008c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d063      	beq.n	8008b9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ad6:	4b6a      	ldr	r3, [pc, #424]	; (8008c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	099b      	lsrs	r3, r3, #6
 8008adc:	2200      	movs	r2, #0
 8008ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ae0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8008aea:	2300      	movs	r3, #0
 8008aec:	637b      	str	r3, [r7, #52]	; 0x34
 8008aee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008af2:	4622      	mov	r2, r4
 8008af4:	462b      	mov	r3, r5
 8008af6:	f04f 0000 	mov.w	r0, #0
 8008afa:	f04f 0100 	mov.w	r1, #0
 8008afe:	0159      	lsls	r1, r3, #5
 8008b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b04:	0150      	lsls	r0, r2, #5
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	1a51      	subs	r1, r2, r1
 8008b0e:	6139      	str	r1, [r7, #16]
 8008b10:	4629      	mov	r1, r5
 8008b12:	eb63 0301 	sbc.w	r3, r3, r1
 8008b16:	617b      	str	r3, [r7, #20]
 8008b18:	f04f 0200 	mov.w	r2, #0
 8008b1c:	f04f 0300 	mov.w	r3, #0
 8008b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b24:	4659      	mov	r1, fp
 8008b26:	018b      	lsls	r3, r1, #6
 8008b28:	4651      	mov	r1, sl
 8008b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008b2e:	4651      	mov	r1, sl
 8008b30:	018a      	lsls	r2, r1, #6
 8008b32:	4651      	mov	r1, sl
 8008b34:	ebb2 0801 	subs.w	r8, r2, r1
 8008b38:	4659      	mov	r1, fp
 8008b3a:	eb63 0901 	sbc.w	r9, r3, r1
 8008b3e:	f04f 0200 	mov.w	r2, #0
 8008b42:	f04f 0300 	mov.w	r3, #0
 8008b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b52:	4690      	mov	r8, r2
 8008b54:	4699      	mov	r9, r3
 8008b56:	4623      	mov	r3, r4
 8008b58:	eb18 0303 	adds.w	r3, r8, r3
 8008b5c:	60bb      	str	r3, [r7, #8]
 8008b5e:	462b      	mov	r3, r5
 8008b60:	eb49 0303 	adc.w	r3, r9, r3
 8008b64:	60fb      	str	r3, [r7, #12]
 8008b66:	f04f 0200 	mov.w	r2, #0
 8008b6a:	f04f 0300 	mov.w	r3, #0
 8008b6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008b72:	4629      	mov	r1, r5
 8008b74:	024b      	lsls	r3, r1, #9
 8008b76:	4621      	mov	r1, r4
 8008b78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	024a      	lsls	r2, r1, #9
 8008b80:	4610      	mov	r0, r2
 8008b82:	4619      	mov	r1, r3
 8008b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b86:	2200      	movs	r2, #0
 8008b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b90:	f7f8 f882 	bl	8000c98 <__aeabi_uldivmod>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4613      	mov	r3, r2
 8008b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b9c:	e058      	b.n	8008c50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b9e:	4b38      	ldr	r3, [pc, #224]	; (8008c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	099b      	lsrs	r3, r3, #6
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	4611      	mov	r1, r2
 8008baa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008bae:	623b      	str	r3, [r7, #32]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8008bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008bb8:	4642      	mov	r2, r8
 8008bba:	464b      	mov	r3, r9
 8008bbc:	f04f 0000 	mov.w	r0, #0
 8008bc0:	f04f 0100 	mov.w	r1, #0
 8008bc4:	0159      	lsls	r1, r3, #5
 8008bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bca:	0150      	lsls	r0, r2, #5
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4641      	mov	r1, r8
 8008bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8008bd6:	4649      	mov	r1, r9
 8008bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8008bdc:	f04f 0200 	mov.w	r2, #0
 8008be0:	f04f 0300 	mov.w	r3, #0
 8008be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8008bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8008bf8:	f04f 0200 	mov.w	r2, #0
 8008bfc:	f04f 0300 	mov.w	r3, #0
 8008c00:	00eb      	lsls	r3, r5, #3
 8008c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c06:	00e2      	lsls	r2, r4, #3
 8008c08:	4614      	mov	r4, r2
 8008c0a:	461d      	mov	r5, r3
 8008c0c:	4643      	mov	r3, r8
 8008c0e:	18e3      	adds	r3, r4, r3
 8008c10:	603b      	str	r3, [r7, #0]
 8008c12:	464b      	mov	r3, r9
 8008c14:	eb45 0303 	adc.w	r3, r5, r3
 8008c18:	607b      	str	r3, [r7, #4]
 8008c1a:	f04f 0200 	mov.w	r2, #0
 8008c1e:	f04f 0300 	mov.w	r3, #0
 8008c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c26:	4629      	mov	r1, r5
 8008c28:	028b      	lsls	r3, r1, #10
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008c30:	4621      	mov	r1, r4
 8008c32:	028a      	lsls	r2, r1, #10
 8008c34:	4610      	mov	r0, r2
 8008c36:	4619      	mov	r1, r3
 8008c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	61bb      	str	r3, [r7, #24]
 8008c3e:	61fa      	str	r2, [r7, #28]
 8008c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c44:	f7f8 f828 	bl	8000c98 <__aeabi_uldivmod>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008c50:	4b0b      	ldr	r3, [pc, #44]	; (8008c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	0c1b      	lsrs	r3, r3, #16
 8008c56:	f003 0303 	and.w	r3, r3, #3
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008c60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c6a:	e002      	b.n	8008c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c6c:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8008c6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3750      	adds	r7, #80	; 0x50
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c7e:	bf00      	nop
 8008c80:	40023800 	.word	0x40023800
 8008c84:	00f42400 	.word	0x00f42400
 8008c88:	007a1200 	.word	0x007a1200

08008c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c90:	4b03      	ldr	r3, [pc, #12]	; (8008ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c92:	681b      	ldr	r3, [r3, #0]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	20000000 	.word	0x20000000

08008ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ca8:	f7ff fff0 	bl	8008c8c <HAL_RCC_GetHCLKFreq>
 8008cac:	4602      	mov	r2, r0
 8008cae:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	0a9b      	lsrs	r3, r3, #10
 8008cb4:	f003 0307 	and.w	r3, r3, #7
 8008cb8:	4903      	ldr	r1, [pc, #12]	; (8008cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cba:	5ccb      	ldrb	r3, [r1, r3]
 8008cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	40023800 	.word	0x40023800
 8008cc8:	08011234 	.word	0x08011234

08008ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008cd0:	f7ff ffdc 	bl	8008c8c <HAL_RCC_GetHCLKFreq>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	4b05      	ldr	r3, [pc, #20]	; (8008cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	0b5b      	lsrs	r3, r3, #13
 8008cdc:	f003 0307 	and.w	r3, r3, #7
 8008ce0:	4903      	ldr	r1, [pc, #12]	; (8008cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ce2:	5ccb      	ldrb	r3, [r1, r3]
 8008ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	40023800 	.word	0x40023800
 8008cf0:	08011234 	.word	0x08011234

08008cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8008d00:	2300      	movs	r3, #0
 8008d02:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8008d04:	2300      	movs	r3, #0
 8008d06:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d010      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008d18:	4b7a      	ldr	r3, [pc, #488]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d1e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	4977      	ldr	r1, [pc, #476]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	69db      	ldr	r3, [r3, #28]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8008d36:	2301      	movs	r3, #1
 8008d38:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d010      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008d46:	4b6f      	ldr	r3, [pc, #444]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d4c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	496b      	ldr	r1, [pc, #428]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a1b      	ldr	r3, [r3, #32]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8008d64:	2301      	movs	r3, #1
 8008d66:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d022      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8008d74:	4b63      	ldr	r3, [pc, #396]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d82:	4960      	ldr	r1, [pc, #384]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8008d92:	2301      	movs	r3, #1
 8008d94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d9e:	d10c      	bne.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8008da0:	4b58      	ldr	r3, [pc, #352]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008da6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	3b01      	subs	r3, #1
 8008db0:	021b      	lsls	r3, r3, #8
 8008db2:	4954      	ldr	r1, [pc, #336]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d022      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8008dc6:	4b4f      	ldr	r3, [pc, #316]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dcc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd4:	494b      	ldr	r1, [pc, #300]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008de4:	2301      	movs	r3, #1
 8008de6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008df0:	d10c      	bne.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8008df2:	4b44      	ldr	r3, [pc, #272]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008df8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	3b01      	subs	r3, #1
 8008e02:	021b      	lsls	r3, r3, #8
 8008e04:	493f      	ldr	r1, [pc, #252]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e06:	4313      	orrs	r3, r2
 8008e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0308 	and.w	r3, r3, #8
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 808a 	beq.w	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60fb      	str	r3, [r7, #12]
 8008e1e:	4b39      	ldr	r3, [pc, #228]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e22:	4a38      	ldr	r2, [pc, #224]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e28:	6413      	str	r3, [r2, #64]	; 0x40
 8008e2a:	4b36      	ldr	r3, [pc, #216]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008e36:	4b34      	ldr	r3, [pc, #208]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a33      	ldr	r2, [pc, #204]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8008e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e40:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e42:	f7fe fcfd 	bl	8007840 <HAL_GetTick>
 8008e46:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e48:	e008      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008e4a:	f7fe fcf9 	bl	8007840 <HAL_GetTick>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d901      	bls.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e1d1      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008e5c:	4b2a      	ldr	r3, [pc, #168]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0f0      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e68:	4b26      	ldr	r3, [pc, #152]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e70:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d02f      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d028      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e86:	4b1f      	ldr	r3, [pc, #124]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e8e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008e90:	4b1e      	ldr	r3, [pc, #120]	; (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8008e92:	2201      	movs	r2, #1
 8008e94:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e96:	4b1d      	ldr	r3, [pc, #116]	; (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008e9c:	4a19      	ldr	r2, [pc, #100]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008ea2:	4b18      	ldr	r3, [pc, #96]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d114      	bne.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008eae:	f7fe fcc7 	bl	8007840 <HAL_GetTick>
 8008eb2:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eb4:	e00a      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008eb6:	f7fe fcc3 	bl	8007840 <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d901      	bls.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e199      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ecc:	4b0d      	ldr	r3, [pc, #52]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed0:	f003 0302 	and.w	r3, r3, #2
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d0ee      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ee4:	d114      	bne.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8008ee6:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008efa:	4902      	ldr	r1, [pc, #8]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008efc:	4313      	orrs	r3, r2
 8008efe:	608b      	str	r3, [r1, #8]
 8008f00:	e00c      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8008f02:	bf00      	nop
 8008f04:	40023800 	.word	0x40023800
 8008f08:	40007000 	.word	0x40007000
 8008f0c:	42470e40 	.word	0x42470e40
 8008f10:	4b89      	ldr	r3, [pc, #548]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	4a88      	ldr	r2, [pc, #544]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008f16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008f1a:	6093      	str	r3, [r2, #8]
 8008f1c:	4b86      	ldr	r3, [pc, #536]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008f1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f28:	4983      	ldr	r1, [pc, #524]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0304 	and.w	r3, r3, #4
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d004      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8008f40:	4b7e      	ldr	r3, [pc, #504]	; (800913c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8008f42:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0310 	and.w	r3, r3, #16
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00a      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8008f50:	4b79      	ldr	r3, [pc, #484]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5e:	4976      	ldr	r1, [pc, #472]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0320 	and.w	r3, r3, #32
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d011      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008f72:	4b71      	ldr	r3, [pc, #452]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f78:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f80:	496d      	ldr	r1, [pc, #436]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f90:	d101      	bne.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8008f92:	2301      	movs	r3, #1
 8008f94:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00a      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008fa2:	4b65      	ldr	r3, [pc, #404]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fa8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb0:	4961      	ldr	r1, [pc, #388]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d004      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b80      	cmp	r3, #128	; 0x80
 8008fc4:	f040 80c6 	bne.w	8009154 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008fc8:	4b5d      	ldr	r3, [pc, #372]	; (8009140 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008fce:	f7fe fc37 	bl	8007840 <HAL_GetTick>
 8008fd2:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008fd4:	e008      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008fd6:	f7fe fc33 	bl	8007840 <HAL_GetTick>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d901      	bls.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e10b      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008fe8:	4b53      	ldr	r3, [pc, #332]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1f0      	bne.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8008ff4:	4a53      	ldr	r2, [pc, #332]	; (8009144 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ffa:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d003      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d023      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d019      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800902c:	2b00      	cmp	r3, #0
 800902e:	d004      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009038:	d00e      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8009042:	2b00      	cmp	r3, #0
 8009044:	d019      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904a:	2b00      	cmp	r3, #0
 800904c:	d115      	bne.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x386>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009056:	d110      	bne.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	019b      	lsls	r3, r3, #6
 8009062:	431a      	orrs	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	061b      	lsls	r3, r3, #24
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	071b      	lsls	r3, r3, #28
 8009072:	4931      	ldr	r1, [pc, #196]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009074:	4313      	orrs	r3, r2
 8009076:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800908a:	2b00      	cmp	r3, #0
 800908c:	d009      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8009096:	2b00      	cmp	r3, #0
 8009098:	d026      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d122      	bne.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80090a2:	4b25      	ldr	r3, [pc, #148]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80090a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090a8:	0e1b      	lsrs	r3, r3, #24
 80090aa:	f003 030f 	and.w	r3, r3, #15
 80090ae:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	019b      	lsls	r3, r3, #6
 80090ba:	431a      	orrs	r2, r3
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	061b      	lsls	r3, r3, #24
 80090c0:	431a      	orrs	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	071b      	lsls	r3, r3, #28
 80090c8:	491b      	ldr	r1, [pc, #108]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80090ca:	4313      	orrs	r3, r2
 80090cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80090d0:	4b19      	ldr	r3, [pc, #100]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80090d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090d6:	f023 021f 	bic.w	r2, r3, #31
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	3b01      	subs	r3, #1
 80090e0:	4915      	ldr	r1, [pc, #84]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80090e2:	4313      	orrs	r3, r2
 80090e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d010      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	019b      	lsls	r3, r3, #6
 80090fe:	431a      	orrs	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	061b      	lsls	r3, r3, #24
 8009106:	431a      	orrs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	071b      	lsls	r3, r3, #28
 800910e:	490a      	ldr	r1, [pc, #40]	; (8009138 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009110:	4313      	orrs	r3, r2
 8009112:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009116:	4b0a      	ldr	r3, [pc, #40]	; (8009140 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8009118:	2201      	movs	r2, #1
 800911a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800911c:	f7fe fb90 	bl	8007840 <HAL_GetTick>
 8009120:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009122:	e011      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009124:	f7fe fb8c 	bl	8007840 <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	2b02      	cmp	r3, #2
 8009130:	d90a      	bls.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	e064      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8009136:	bf00      	nop
 8009138:	40023800 	.word	0x40023800
 800913c:	424711e0 	.word	0x424711e0
 8009140:	42470068 	.word	0x42470068
 8009144:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009148:	4b2f      	ldr	r3, [pc, #188]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0e7      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00a      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009160:	4b29      	ldr	r3, [pc, #164]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009166:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800916e:	4926      	ldr	r1, [pc, #152]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009170:	4313      	orrs	r3, r2
 8009172:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00a      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009182:	4b21      	ldr	r3, [pc, #132]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009188:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009190:	491d      	ldr	r1, [pc, #116]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009192:	4313      	orrs	r3, r2
 8009194:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00a      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80091a4:	4b18      	ldr	r3, [pc, #96]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80091a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b2:	4915      	ldr	r1, [pc, #84]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80091b4:	4313      	orrs	r3, r2
 80091b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00a      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80091c6:	4b10      	ldr	r3, [pc, #64]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80091c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091cc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d4:	490c      	ldr	r1, [pc, #48]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00a      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80091e8:	4b07      	ldr	r3, [pc, #28]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80091ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091ee:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f6:	4904      	ldr	r1, [pc, #16]	; (8009208 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3720      	adds	r7, #32
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	40023800 	.word	0x40023800

0800920c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e273      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	d075      	beq.n	8009316 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800922a:	4b88      	ldr	r3, [pc, #544]	; (800944c <HAL_RCC_OscConfig+0x240>)
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f003 030c 	and.w	r3, r3, #12
 8009232:	2b04      	cmp	r3, #4
 8009234:	d00c      	beq.n	8009250 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009236:	4b85      	ldr	r3, [pc, #532]	; (800944c <HAL_RCC_OscConfig+0x240>)
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800923e:	2b08      	cmp	r3, #8
 8009240:	d112      	bne.n	8009268 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009242:	4b82      	ldr	r3, [pc, #520]	; (800944c <HAL_RCC_OscConfig+0x240>)
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800924a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800924e:	d10b      	bne.n	8009268 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009250:	4b7e      	ldr	r3, [pc, #504]	; (800944c <HAL_RCC_OscConfig+0x240>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d05b      	beq.n	8009314 <HAL_RCC_OscConfig+0x108>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d157      	bne.n	8009314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e24e      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009270:	d106      	bne.n	8009280 <HAL_RCC_OscConfig+0x74>
 8009272:	4b76      	ldr	r3, [pc, #472]	; (800944c <HAL_RCC_OscConfig+0x240>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a75      	ldr	r2, [pc, #468]	; (800944c <HAL_RCC_OscConfig+0x240>)
 8009278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	e01d      	b.n	80092bc <HAL_RCC_OscConfig+0xb0>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009288:	d10c      	bne.n	80092a4 <HAL_RCC_OscConfig+0x98>
 800928a:	4b70      	ldr	r3, [pc, #448]	; (800944c <HAL_RCC_OscConfig+0x240>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a6f      	ldr	r2, [pc, #444]	; (800944c <HAL_RCC_OscConfig+0x240>)
 8009290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	4b6d      	ldr	r3, [pc, #436]	; (800944c <HAL_RCC_OscConfig+0x240>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a6c      	ldr	r2, [pc, #432]	; (800944c <HAL_RCC_OscConfig+0x240>)
 800929c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	e00b      	b.n	80092bc <HAL_RCC_OscConfig+0xb0>
 80092a4:	4b69      	ldr	r3, [pc, #420]	; (800944c <HAL_RCC_OscConfig+0x240>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a68      	ldr	r2, [pc, #416]	; (800944c <HAL_RCC_OscConfig+0x240>)
 80092aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	4b66      	ldr	r3, [pc, #408]	; (800944c <HAL_RCC_OscConfig+0x240>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a65      	ldr	r2, [pc, #404]	; (800944c <HAL_RCC_OscConfig+0x240>)
 80092b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d013      	beq.n	80092ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c4:	f7fe fabc 	bl	8007840 <HAL_GetTick>
 80092c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092ca:	e008      	b.n	80092de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092cc:	f7fe fab8 	bl	8007840 <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	2b64      	cmp	r3, #100	; 0x64
 80092d8:	d901      	bls.n	80092de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e213      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092de:	4b5b      	ldr	r3, [pc, #364]	; (800944c <HAL_RCC_OscConfig+0x240>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0f0      	beq.n	80092cc <HAL_RCC_OscConfig+0xc0>
 80092ea:	e014      	b.n	8009316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092ec:	f7fe faa8 	bl	8007840 <HAL_GetTick>
 80092f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092f2:	e008      	b.n	8009306 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092f4:	f7fe faa4 	bl	8007840 <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	2b64      	cmp	r3, #100	; 0x64
 8009300:	d901      	bls.n	8009306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e1ff      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009306:	4b51      	ldr	r3, [pc, #324]	; (800944c <HAL_RCC_OscConfig+0x240>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1f0      	bne.n	80092f4 <HAL_RCC_OscConfig+0xe8>
 8009312:	e000      	b.n	8009316 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0302 	and.w	r3, r3, #2
 800931e:	2b00      	cmp	r3, #0
 8009320:	d063      	beq.n	80093ea <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009322:	4b4a      	ldr	r3, [pc, #296]	; (800944c <HAL_RCC_OscConfig+0x240>)
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f003 030c 	and.w	r3, r3, #12
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00b      	beq.n	8009346 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800932e:	4b47      	ldr	r3, [pc, #284]	; (800944c <HAL_RCC_OscConfig+0x240>)
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009336:	2b08      	cmp	r3, #8
 8009338:	d11c      	bne.n	8009374 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800933a:	4b44      	ldr	r3, [pc, #272]	; (800944c <HAL_RCC_OscConfig+0x240>)
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d116      	bne.n	8009374 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009346:	4b41      	ldr	r3, [pc, #260]	; (800944c <HAL_RCC_OscConfig+0x240>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 0302 	and.w	r3, r3, #2
 800934e:	2b00      	cmp	r3, #0
 8009350:	d005      	beq.n	800935e <HAL_RCC_OscConfig+0x152>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d001      	beq.n	800935e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e1d3      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800935e:	4b3b      	ldr	r3, [pc, #236]	; (800944c <HAL_RCC_OscConfig+0x240>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	4937      	ldr	r1, [pc, #220]	; (800944c <HAL_RCC_OscConfig+0x240>)
 800936e:	4313      	orrs	r3, r2
 8009370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009372:	e03a      	b.n	80093ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d020      	beq.n	80093be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800937c:	4b34      	ldr	r3, [pc, #208]	; (8009450 <HAL_RCC_OscConfig+0x244>)
 800937e:	2201      	movs	r2, #1
 8009380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009382:	f7fe fa5d 	bl	8007840 <HAL_GetTick>
 8009386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009388:	e008      	b.n	800939c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800938a:	f7fe fa59 	bl	8007840 <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	2b02      	cmp	r3, #2
 8009396:	d901      	bls.n	800939c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e1b4      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800939c:	4b2b      	ldr	r3, [pc, #172]	; (800944c <HAL_RCC_OscConfig+0x240>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 0302 	and.w	r3, r3, #2
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d0f0      	beq.n	800938a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093a8:	4b28      	ldr	r3, [pc, #160]	; (800944c <HAL_RCC_OscConfig+0x240>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	00db      	lsls	r3, r3, #3
 80093b6:	4925      	ldr	r1, [pc, #148]	; (800944c <HAL_RCC_OscConfig+0x240>)
 80093b8:	4313      	orrs	r3, r2
 80093ba:	600b      	str	r3, [r1, #0]
 80093bc:	e015      	b.n	80093ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093be:	4b24      	ldr	r3, [pc, #144]	; (8009450 <HAL_RCC_OscConfig+0x244>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c4:	f7fe fa3c 	bl	8007840 <HAL_GetTick>
 80093c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093ca:	e008      	b.n	80093de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093cc:	f7fe fa38 	bl	8007840 <HAL_GetTick>
 80093d0:	4602      	mov	r2, r0
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d901      	bls.n	80093de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e193      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093de:	4b1b      	ldr	r3, [pc, #108]	; (800944c <HAL_RCC_OscConfig+0x240>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0302 	and.w	r3, r3, #2
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1f0      	bne.n	80093cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0308 	and.w	r3, r3, #8
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d036      	beq.n	8009464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d016      	beq.n	800942c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093fe:	4b15      	ldr	r3, [pc, #84]	; (8009454 <HAL_RCC_OscConfig+0x248>)
 8009400:	2201      	movs	r2, #1
 8009402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009404:	f7fe fa1c 	bl	8007840 <HAL_GetTick>
 8009408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800940a:	e008      	b.n	800941e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800940c:	f7fe fa18 	bl	8007840 <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	2b02      	cmp	r3, #2
 8009418:	d901      	bls.n	800941e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e173      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800941e:	4b0b      	ldr	r3, [pc, #44]	; (800944c <HAL_RCC_OscConfig+0x240>)
 8009420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009422:	f003 0302 	and.w	r3, r3, #2
 8009426:	2b00      	cmp	r3, #0
 8009428:	d0f0      	beq.n	800940c <HAL_RCC_OscConfig+0x200>
 800942a:	e01b      	b.n	8009464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800942c:	4b09      	ldr	r3, [pc, #36]	; (8009454 <HAL_RCC_OscConfig+0x248>)
 800942e:	2200      	movs	r2, #0
 8009430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009432:	f7fe fa05 	bl	8007840 <HAL_GetTick>
 8009436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009438:	e00e      	b.n	8009458 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800943a:	f7fe fa01 	bl	8007840 <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	2b02      	cmp	r3, #2
 8009446:	d907      	bls.n	8009458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e15c      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
 800944c:	40023800 	.word	0x40023800
 8009450:	42470000 	.word	0x42470000
 8009454:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009458:	4b8a      	ldr	r3, [pc, #552]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 800945a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1ea      	bne.n	800943a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0304 	and.w	r3, r3, #4
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 8097 	beq.w	80095a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009472:	2300      	movs	r3, #0
 8009474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009476:	4b83      	ldr	r3, [pc, #524]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 8009478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10f      	bne.n	80094a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009482:	2300      	movs	r3, #0
 8009484:	60bb      	str	r3, [r7, #8]
 8009486:	4b7f      	ldr	r3, [pc, #508]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 8009488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948a:	4a7e      	ldr	r2, [pc, #504]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 800948c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009490:	6413      	str	r3, [r2, #64]	; 0x40
 8009492:	4b7c      	ldr	r3, [pc, #496]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 8009494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800949a:	60bb      	str	r3, [r7, #8]
 800949c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800949e:	2301      	movs	r3, #1
 80094a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094a2:	4b79      	ldr	r3, [pc, #484]	; (8009688 <HAL_RCC_OscConfig+0x47c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d118      	bne.n	80094e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094ae:	4b76      	ldr	r3, [pc, #472]	; (8009688 <HAL_RCC_OscConfig+0x47c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a75      	ldr	r2, [pc, #468]	; (8009688 <HAL_RCC_OscConfig+0x47c>)
 80094b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094ba:	f7fe f9c1 	bl	8007840 <HAL_GetTick>
 80094be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094c0:	e008      	b.n	80094d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094c2:	f7fe f9bd 	bl	8007840 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d901      	bls.n	80094d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e118      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094d4:	4b6c      	ldr	r3, [pc, #432]	; (8009688 <HAL_RCC_OscConfig+0x47c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d0f0      	beq.n	80094c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d106      	bne.n	80094f6 <HAL_RCC_OscConfig+0x2ea>
 80094e8:	4b66      	ldr	r3, [pc, #408]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 80094ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ec:	4a65      	ldr	r2, [pc, #404]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 80094ee:	f043 0301 	orr.w	r3, r3, #1
 80094f2:	6713      	str	r3, [r2, #112]	; 0x70
 80094f4:	e01c      	b.n	8009530 <HAL_RCC_OscConfig+0x324>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	2b05      	cmp	r3, #5
 80094fc:	d10c      	bne.n	8009518 <HAL_RCC_OscConfig+0x30c>
 80094fe:	4b61      	ldr	r3, [pc, #388]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 8009500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009502:	4a60      	ldr	r2, [pc, #384]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 8009504:	f043 0304 	orr.w	r3, r3, #4
 8009508:	6713      	str	r3, [r2, #112]	; 0x70
 800950a:	4b5e      	ldr	r3, [pc, #376]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 800950c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950e:	4a5d      	ldr	r2, [pc, #372]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 8009510:	f043 0301 	orr.w	r3, r3, #1
 8009514:	6713      	str	r3, [r2, #112]	; 0x70
 8009516:	e00b      	b.n	8009530 <HAL_RCC_OscConfig+0x324>
 8009518:	4b5a      	ldr	r3, [pc, #360]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 800951a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951c:	4a59      	ldr	r2, [pc, #356]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 800951e:	f023 0301 	bic.w	r3, r3, #1
 8009522:	6713      	str	r3, [r2, #112]	; 0x70
 8009524:	4b57      	ldr	r3, [pc, #348]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 8009526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009528:	4a56      	ldr	r2, [pc, #344]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 800952a:	f023 0304 	bic.w	r3, r3, #4
 800952e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d015      	beq.n	8009564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009538:	f7fe f982 	bl	8007840 <HAL_GetTick>
 800953c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800953e:	e00a      	b.n	8009556 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009540:	f7fe f97e 	bl	8007840 <HAL_GetTick>
 8009544:	4602      	mov	r2, r0
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	f241 3288 	movw	r2, #5000	; 0x1388
 800954e:	4293      	cmp	r3, r2
 8009550:	d901      	bls.n	8009556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e0d7      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009556:	4b4b      	ldr	r3, [pc, #300]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 8009558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955a:	f003 0302 	and.w	r3, r3, #2
 800955e:	2b00      	cmp	r3, #0
 8009560:	d0ee      	beq.n	8009540 <HAL_RCC_OscConfig+0x334>
 8009562:	e014      	b.n	800958e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009564:	f7fe f96c 	bl	8007840 <HAL_GetTick>
 8009568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800956a:	e00a      	b.n	8009582 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800956c:	f7fe f968 	bl	8007840 <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	f241 3288 	movw	r2, #5000	; 0x1388
 800957a:	4293      	cmp	r3, r2
 800957c:	d901      	bls.n	8009582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e0c1      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009582:	4b40      	ldr	r3, [pc, #256]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 8009584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009586:	f003 0302 	and.w	r3, r3, #2
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1ee      	bne.n	800956c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800958e:	7dfb      	ldrb	r3, [r7, #23]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d105      	bne.n	80095a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009594:	4b3b      	ldr	r3, [pc, #236]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 8009596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009598:	4a3a      	ldr	r2, [pc, #232]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 800959a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800959e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 80ad 	beq.w	8009704 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80095aa:	4b36      	ldr	r3, [pc, #216]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f003 030c 	and.w	r3, r3, #12
 80095b2:	2b08      	cmp	r3, #8
 80095b4:	d060      	beq.n	8009678 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d145      	bne.n	800964a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095be:	4b33      	ldr	r3, [pc, #204]	; (800968c <HAL_RCC_OscConfig+0x480>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095c4:	f7fe f93c 	bl	8007840 <HAL_GetTick>
 80095c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095ca:	e008      	b.n	80095de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095cc:	f7fe f938 	bl	8007840 <HAL_GetTick>
 80095d0:	4602      	mov	r2, r0
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d901      	bls.n	80095de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80095da:	2303      	movs	r3, #3
 80095dc:	e093      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095de:	4b29      	ldr	r3, [pc, #164]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1f0      	bne.n	80095cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	69da      	ldr	r2, [r3, #28]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	431a      	orrs	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	019b      	lsls	r3, r3, #6
 80095fa:	431a      	orrs	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009600:	085b      	lsrs	r3, r3, #1
 8009602:	3b01      	subs	r3, #1
 8009604:	041b      	lsls	r3, r3, #16
 8009606:	431a      	orrs	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960c:	061b      	lsls	r3, r3, #24
 800960e:	431a      	orrs	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009614:	071b      	lsls	r3, r3, #28
 8009616:	491b      	ldr	r1, [pc, #108]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 8009618:	4313      	orrs	r3, r2
 800961a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800961c:	4b1b      	ldr	r3, [pc, #108]	; (800968c <HAL_RCC_OscConfig+0x480>)
 800961e:	2201      	movs	r2, #1
 8009620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009622:	f7fe f90d 	bl	8007840 <HAL_GetTick>
 8009626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009628:	e008      	b.n	800963c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800962a:	f7fe f909 	bl	8007840 <HAL_GetTick>
 800962e:	4602      	mov	r2, r0
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	2b02      	cmp	r3, #2
 8009636:	d901      	bls.n	800963c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8009638:	2303      	movs	r3, #3
 800963a:	e064      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800963c:	4b11      	ldr	r3, [pc, #68]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d0f0      	beq.n	800962a <HAL_RCC_OscConfig+0x41e>
 8009648:	e05c      	b.n	8009704 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800964a:	4b10      	ldr	r3, [pc, #64]	; (800968c <HAL_RCC_OscConfig+0x480>)
 800964c:	2200      	movs	r2, #0
 800964e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009650:	f7fe f8f6 	bl	8007840 <HAL_GetTick>
 8009654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009656:	e008      	b.n	800966a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009658:	f7fe f8f2 	bl	8007840 <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	2b02      	cmp	r3, #2
 8009664:	d901      	bls.n	800966a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e04d      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800966a:	4b06      	ldr	r3, [pc, #24]	; (8009684 <HAL_RCC_OscConfig+0x478>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1f0      	bne.n	8009658 <HAL_RCC_OscConfig+0x44c>
 8009676:	e045      	b.n	8009704 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d107      	bne.n	8009690 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e040      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
 8009684:	40023800 	.word	0x40023800
 8009688:	40007000 	.word	0x40007000
 800968c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009690:	4b1f      	ldr	r3, [pc, #124]	; (8009710 <HAL_RCC_OscConfig+0x504>)
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d030      	beq.n	8009700 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d129      	bne.n	8009700 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d122      	bne.n	8009700 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80096c0:	4013      	ands	r3, r2
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80096c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d119      	bne.n	8009700 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d6:	085b      	lsrs	r3, r3, #1
 80096d8:	3b01      	subs	r3, #1
 80096da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80096dc:	429a      	cmp	r2, r3
 80096de:	d10f      	bne.n	8009700 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d107      	bne.n	8009700 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d001      	beq.n	8009704 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e000      	b.n	8009706 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3718      	adds	r7, #24
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	40023800 	.word	0x40023800

08009714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e041      	b.n	80097aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	d106      	bne.n	8009740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7fd fd06 	bl	800714c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2202      	movs	r2, #2
 8009744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3304      	adds	r3, #4
 8009750:	4619      	mov	r1, r3
 8009752:	4610      	mov	r0, r2
 8009754:	f000 fe6a 	bl	800a42c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e041      	b.n	8009848 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d106      	bne.n	80097de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f839 	bl	8009850 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2202      	movs	r2, #2
 80097e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	3304      	adds	r3, #4
 80097ee:	4619      	mov	r1, r3
 80097f0:	4610      	mov	r0, r2
 80097f2:	f000 fe1b 	bl	800a42c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d109      	bne.n	8009888 <HAL_TIM_PWM_Start+0x24>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b01      	cmp	r3, #1
 800987e:	bf14      	ite	ne
 8009880:	2301      	movne	r3, #1
 8009882:	2300      	moveq	r3, #0
 8009884:	b2db      	uxtb	r3, r3
 8009886:	e022      	b.n	80098ce <HAL_TIM_PWM_Start+0x6a>
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	2b04      	cmp	r3, #4
 800988c:	d109      	bne.n	80098a2 <HAL_TIM_PWM_Start+0x3e>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b01      	cmp	r3, #1
 8009898:	bf14      	ite	ne
 800989a:	2301      	movne	r3, #1
 800989c:	2300      	moveq	r3, #0
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	e015      	b.n	80098ce <HAL_TIM_PWM_Start+0x6a>
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b08      	cmp	r3, #8
 80098a6:	d109      	bne.n	80098bc <HAL_TIM_PWM_Start+0x58>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	bf14      	ite	ne
 80098b4:	2301      	movne	r3, #1
 80098b6:	2300      	moveq	r3, #0
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	e008      	b.n	80098ce <HAL_TIM_PWM_Start+0x6a>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	bf14      	ite	ne
 80098c8:	2301      	movne	r3, #1
 80098ca:	2300      	moveq	r3, #0
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e07c      	b.n	80099d0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d104      	bne.n	80098e6 <HAL_TIM_PWM_Start+0x82>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2202      	movs	r2, #2
 80098e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098e4:	e013      	b.n	800990e <HAL_TIM_PWM_Start+0xaa>
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b04      	cmp	r3, #4
 80098ea:	d104      	bne.n	80098f6 <HAL_TIM_PWM_Start+0x92>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2202      	movs	r2, #2
 80098f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098f4:	e00b      	b.n	800990e <HAL_TIM_PWM_Start+0xaa>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b08      	cmp	r3, #8
 80098fa:	d104      	bne.n	8009906 <HAL_TIM_PWM_Start+0xa2>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009904:	e003      	b.n	800990e <HAL_TIM_PWM_Start+0xaa>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2202      	movs	r2, #2
 800990a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2201      	movs	r2, #1
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	4618      	mov	r0, r3
 8009918:	f001 f99c 	bl	800ac54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a2d      	ldr	r2, [pc, #180]	; (80099d8 <HAL_TIM_PWM_Start+0x174>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d004      	beq.n	8009930 <HAL_TIM_PWM_Start+0xcc>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a2c      	ldr	r2, [pc, #176]	; (80099dc <HAL_TIM_PWM_Start+0x178>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d101      	bne.n	8009934 <HAL_TIM_PWM_Start+0xd0>
 8009930:	2301      	movs	r3, #1
 8009932:	e000      	b.n	8009936 <HAL_TIM_PWM_Start+0xd2>
 8009934:	2300      	movs	r3, #0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d007      	beq.n	800994a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009948:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a22      	ldr	r2, [pc, #136]	; (80099d8 <HAL_TIM_PWM_Start+0x174>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d022      	beq.n	800999a <HAL_TIM_PWM_Start+0x136>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800995c:	d01d      	beq.n	800999a <HAL_TIM_PWM_Start+0x136>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a1f      	ldr	r2, [pc, #124]	; (80099e0 <HAL_TIM_PWM_Start+0x17c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d018      	beq.n	800999a <HAL_TIM_PWM_Start+0x136>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a1d      	ldr	r2, [pc, #116]	; (80099e4 <HAL_TIM_PWM_Start+0x180>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d013      	beq.n	800999a <HAL_TIM_PWM_Start+0x136>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a1c      	ldr	r2, [pc, #112]	; (80099e8 <HAL_TIM_PWM_Start+0x184>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d00e      	beq.n	800999a <HAL_TIM_PWM_Start+0x136>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a16      	ldr	r2, [pc, #88]	; (80099dc <HAL_TIM_PWM_Start+0x178>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d009      	beq.n	800999a <HAL_TIM_PWM_Start+0x136>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a18      	ldr	r2, [pc, #96]	; (80099ec <HAL_TIM_PWM_Start+0x188>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d004      	beq.n	800999a <HAL_TIM_PWM_Start+0x136>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a16      	ldr	r2, [pc, #88]	; (80099f0 <HAL_TIM_PWM_Start+0x18c>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d111      	bne.n	80099be <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	f003 0307 	and.w	r3, r3, #7
 80099a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2b06      	cmp	r3, #6
 80099aa:	d010      	beq.n	80099ce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f042 0201 	orr.w	r2, r2, #1
 80099ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099bc:	e007      	b.n	80099ce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f042 0201 	orr.w	r2, r2, #1
 80099cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	40010000 	.word	0x40010000
 80099dc:	40010400 	.word	0x40010400
 80099e0:	40000400 	.word	0x40000400
 80099e4:	40000800 	.word	0x40000800
 80099e8:	40000c00 	.word	0x40000c00
 80099ec:	40014000 	.word	0x40014000
 80099f0:	40001800 	.word	0x40001800

080099f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d101      	bne.n	8009a06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e041      	b.n	8009a8a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d106      	bne.n	8009a20 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f839 	bl	8009a92 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2202      	movs	r2, #2
 8009a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	3304      	adds	r3, #4
 8009a30:	4619      	mov	r1, r3
 8009a32:	4610      	mov	r0, r2
 8009a34:	f000 fcfa 	bl	800a42c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b083      	sub	sp, #12
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009a9a:	bf00      	nop
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr
	...

08009aa8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d104      	bne.n	8009ac6 <HAL_TIM_IC_Start_IT+0x1e>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	e013      	b.n	8009aee <HAL_TIM_IC_Start_IT+0x46>
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	2b04      	cmp	r3, #4
 8009aca:	d104      	bne.n	8009ad6 <HAL_TIM_IC_Start_IT+0x2e>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	e00b      	b.n	8009aee <HAL_TIM_IC_Start_IT+0x46>
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2b08      	cmp	r3, #8
 8009ada:	d104      	bne.n	8009ae6 <HAL_TIM_IC_Start_IT+0x3e>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	e003      	b.n	8009aee <HAL_TIM_IC_Start_IT+0x46>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d104      	bne.n	8009b00 <HAL_TIM_IC_Start_IT+0x58>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	e013      	b.n	8009b28 <HAL_TIM_IC_Start_IT+0x80>
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	d104      	bne.n	8009b10 <HAL_TIM_IC_Start_IT+0x68>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	e00b      	b.n	8009b28 <HAL_TIM_IC_Start_IT+0x80>
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	2b08      	cmp	r3, #8
 8009b14:	d104      	bne.n	8009b20 <HAL_TIM_IC_Start_IT+0x78>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	e003      	b.n	8009b28 <HAL_TIM_IC_Start_IT+0x80>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d102      	bne.n	8009b36 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b30:	7b7b      	ldrb	r3, [r7, #13]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d001      	beq.n	8009b3a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e0cc      	b.n	8009cd4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d104      	bne.n	8009b4a <HAL_TIM_IC_Start_IT+0xa2>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2202      	movs	r2, #2
 8009b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b48:	e013      	b.n	8009b72 <HAL_TIM_IC_Start_IT+0xca>
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b04      	cmp	r3, #4
 8009b4e:	d104      	bne.n	8009b5a <HAL_TIM_IC_Start_IT+0xb2>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2202      	movs	r2, #2
 8009b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b58:	e00b      	b.n	8009b72 <HAL_TIM_IC_Start_IT+0xca>
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	2b08      	cmp	r3, #8
 8009b5e:	d104      	bne.n	8009b6a <HAL_TIM_IC_Start_IT+0xc2>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2202      	movs	r2, #2
 8009b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b68:	e003      	b.n	8009b72 <HAL_TIM_IC_Start_IT+0xca>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d104      	bne.n	8009b82 <HAL_TIM_IC_Start_IT+0xda>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b80:	e013      	b.n	8009baa <HAL_TIM_IC_Start_IT+0x102>
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b04      	cmp	r3, #4
 8009b86:	d104      	bne.n	8009b92 <HAL_TIM_IC_Start_IT+0xea>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b90:	e00b      	b.n	8009baa <HAL_TIM_IC_Start_IT+0x102>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	2b08      	cmp	r3, #8
 8009b96:	d104      	bne.n	8009ba2 <HAL_TIM_IC_Start_IT+0xfa>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ba0:	e003      	b.n	8009baa <HAL_TIM_IC_Start_IT+0x102>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2202      	movs	r2, #2
 8009ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2b0c      	cmp	r3, #12
 8009bae:	d841      	bhi.n	8009c34 <HAL_TIM_IC_Start_IT+0x18c>
 8009bb0:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <HAL_TIM_IC_Start_IT+0x110>)
 8009bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb6:	bf00      	nop
 8009bb8:	08009bed 	.word	0x08009bed
 8009bbc:	08009c35 	.word	0x08009c35
 8009bc0:	08009c35 	.word	0x08009c35
 8009bc4:	08009c35 	.word	0x08009c35
 8009bc8:	08009bff 	.word	0x08009bff
 8009bcc:	08009c35 	.word	0x08009c35
 8009bd0:	08009c35 	.word	0x08009c35
 8009bd4:	08009c35 	.word	0x08009c35
 8009bd8:	08009c11 	.word	0x08009c11
 8009bdc:	08009c35 	.word	0x08009c35
 8009be0:	08009c35 	.word	0x08009c35
 8009be4:	08009c35 	.word	0x08009c35
 8009be8:	08009c23 	.word	0x08009c23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68da      	ldr	r2, [r3, #12]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f042 0202 	orr.w	r2, r2, #2
 8009bfa:	60da      	str	r2, [r3, #12]
      break;
 8009bfc:	e01d      	b.n	8009c3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68da      	ldr	r2, [r3, #12]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f042 0204 	orr.w	r2, r2, #4
 8009c0c:	60da      	str	r2, [r3, #12]
      break;
 8009c0e:	e014      	b.n	8009c3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68da      	ldr	r2, [r3, #12]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f042 0208 	orr.w	r2, r2, #8
 8009c1e:	60da      	str	r2, [r3, #12]
      break;
 8009c20:	e00b      	b.n	8009c3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68da      	ldr	r2, [r3, #12]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f042 0210 	orr.w	r2, r2, #16
 8009c30:	60da      	str	r2, [r3, #12]
      break;
 8009c32:	e002      	b.n	8009c3a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	73fb      	strb	r3, [r7, #15]
      break;
 8009c38:	bf00      	nop
  }

  if (status == HAL_OK)
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d148      	bne.n	8009cd2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2201      	movs	r2, #1
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f001 f803 	bl	800ac54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a22      	ldr	r2, [pc, #136]	; (8009cdc <HAL_TIM_IC_Start_IT+0x234>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d022      	beq.n	8009c9e <HAL_TIM_IC_Start_IT+0x1f6>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c60:	d01d      	beq.n	8009c9e <HAL_TIM_IC_Start_IT+0x1f6>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a1e      	ldr	r2, [pc, #120]	; (8009ce0 <HAL_TIM_IC_Start_IT+0x238>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d018      	beq.n	8009c9e <HAL_TIM_IC_Start_IT+0x1f6>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a1c      	ldr	r2, [pc, #112]	; (8009ce4 <HAL_TIM_IC_Start_IT+0x23c>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d013      	beq.n	8009c9e <HAL_TIM_IC_Start_IT+0x1f6>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a1b      	ldr	r2, [pc, #108]	; (8009ce8 <HAL_TIM_IC_Start_IT+0x240>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d00e      	beq.n	8009c9e <HAL_TIM_IC_Start_IT+0x1f6>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a19      	ldr	r2, [pc, #100]	; (8009cec <HAL_TIM_IC_Start_IT+0x244>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d009      	beq.n	8009c9e <HAL_TIM_IC_Start_IT+0x1f6>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a18      	ldr	r2, [pc, #96]	; (8009cf0 <HAL_TIM_IC_Start_IT+0x248>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d004      	beq.n	8009c9e <HAL_TIM_IC_Start_IT+0x1f6>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a16      	ldr	r2, [pc, #88]	; (8009cf4 <HAL_TIM_IC_Start_IT+0x24c>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d111      	bne.n	8009cc2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	f003 0307 	and.w	r3, r3, #7
 8009ca8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2b06      	cmp	r3, #6
 8009cae:	d010      	beq.n	8009cd2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f042 0201 	orr.w	r2, r2, #1
 8009cbe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cc0:	e007      	b.n	8009cd2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f042 0201 	orr.w	r2, r2, #1
 8009cd0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	40010000 	.word	0x40010000
 8009ce0:	40000400 	.word	0x40000400
 8009ce4:	40000800 	.word	0x40000800
 8009ce8:	40000c00 	.word	0x40000c00
 8009cec:	40010400 	.word	0x40010400
 8009cf0:	40014000 	.word	0x40014000
 8009cf4:	40001800 	.word	0x40001800

08009cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	f003 0302 	and.w	r3, r3, #2
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d122      	bne.n	8009d54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	f003 0302 	and.w	r3, r3, #2
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d11b      	bne.n	8009d54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f06f 0202 	mvn.w	r2, #2
 8009d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	f003 0303 	and.w	r3, r3, #3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7fb fb74 	bl	8005428 <HAL_TIM_IC_CaptureCallback>
 8009d40:	e005      	b.n	8009d4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fb54 	bl	800a3f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fb5b 	bl	800a404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	f003 0304 	and.w	r3, r3, #4
 8009d5e:	2b04      	cmp	r3, #4
 8009d60:	d122      	bne.n	8009da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	f003 0304 	and.w	r3, r3, #4
 8009d6c:	2b04      	cmp	r3, #4
 8009d6e:	d11b      	bne.n	8009da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f06f 0204 	mvn.w	r2, #4
 8009d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	699b      	ldr	r3, [r3, #24]
 8009d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7fb fb4a 	bl	8005428 <HAL_TIM_IC_CaptureCallback>
 8009d94:	e005      	b.n	8009da2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fb2a 	bl	800a3f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fb31 	bl	800a404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	f003 0308 	and.w	r3, r3, #8
 8009db2:	2b08      	cmp	r3, #8
 8009db4:	d122      	bne.n	8009dfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	f003 0308 	and.w	r3, r3, #8
 8009dc0:	2b08      	cmp	r3, #8
 8009dc2:	d11b      	bne.n	8009dfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f06f 0208 	mvn.w	r2, #8
 8009dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2204      	movs	r2, #4
 8009dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	f003 0303 	and.w	r3, r3, #3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d003      	beq.n	8009dea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7fb fb20 	bl	8005428 <HAL_TIM_IC_CaptureCallback>
 8009de8:	e005      	b.n	8009df6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fb00 	bl	800a3f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 fb07 	bl	800a404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	f003 0310 	and.w	r3, r3, #16
 8009e06:	2b10      	cmp	r3, #16
 8009e08:	d122      	bne.n	8009e50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	f003 0310 	and.w	r3, r3, #16
 8009e14:	2b10      	cmp	r3, #16
 8009e16:	d11b      	bne.n	8009e50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f06f 0210 	mvn.w	r2, #16
 8009e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2208      	movs	r2, #8
 8009e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	69db      	ldr	r3, [r3, #28]
 8009e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d003      	beq.n	8009e3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7fb faf6 	bl	8005428 <HAL_TIM_IC_CaptureCallback>
 8009e3c:	e005      	b.n	8009e4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fad6 	bl	800a3f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fadd 	bl	800a404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	f003 0301 	and.w	r3, r3, #1
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d10e      	bne.n	8009e7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	f003 0301 	and.w	r3, r3, #1
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d107      	bne.n	8009e7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f06f 0201 	mvn.w	r2, #1
 8009e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fab0 	bl	800a3dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e86:	2b80      	cmp	r3, #128	; 0x80
 8009e88:	d10e      	bne.n	8009ea8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e94:	2b80      	cmp	r3, #128	; 0x80
 8009e96:	d107      	bne.n	8009ea8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 ff82 	bl	800adac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb2:	2b40      	cmp	r3, #64	; 0x40
 8009eb4:	d10e      	bne.n	8009ed4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec0:	2b40      	cmp	r3, #64	; 0x40
 8009ec2:	d107      	bne.n	8009ed4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 faa2 	bl	800a418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	f003 0320 	and.w	r3, r3, #32
 8009ede:	2b20      	cmp	r3, #32
 8009ee0:	d10e      	bne.n	8009f00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	f003 0320 	and.w	r3, r3, #32
 8009eec:	2b20      	cmp	r3, #32
 8009eee:	d107      	bne.n	8009f00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f06f 0220 	mvn.w	r2, #32
 8009ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 ff4c 	bl	800ad98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f00:	bf00      	nop
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d101      	bne.n	8009f26 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009f22:	2302      	movs	r3, #2
 8009f24:	e088      	b.n	800a038 <HAL_TIM_IC_ConfigChannel+0x130>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d11b      	bne.n	8009f6c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6818      	ldr	r0, [r3, #0]
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	6819      	ldr	r1, [r3, #0]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	f000 fcc2 	bl	800a8cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	699a      	ldr	r2, [r3, #24]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f022 020c 	bic.w	r2, r2, #12
 8009f56:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6999      	ldr	r1, [r3, #24]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	689a      	ldr	r2, [r3, #8]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	619a      	str	r2, [r3, #24]
 8009f6a:	e060      	b.n	800a02e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	d11c      	bne.n	8009fac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6818      	ldr	r0, [r3, #0]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	6819      	ldr	r1, [r3, #0]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	685a      	ldr	r2, [r3, #4]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f000 fd46 	bl	800aa12 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	699a      	ldr	r2, [r3, #24]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009f94:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	6999      	ldr	r1, [r3, #24]
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	021a      	lsls	r2, r3, #8
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	619a      	str	r2, [r3, #24]
 8009faa:	e040      	b.n	800a02e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b08      	cmp	r3, #8
 8009fb0:	d11b      	bne.n	8009fea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	6819      	ldr	r1, [r3, #0]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	685a      	ldr	r2, [r3, #4]
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	f000 fd93 	bl	800aaec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	69da      	ldr	r2, [r3, #28]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f022 020c 	bic.w	r2, r2, #12
 8009fd4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69d9      	ldr	r1, [r3, #28]
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	689a      	ldr	r2, [r3, #8]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	61da      	str	r2, [r3, #28]
 8009fe8:	e021      	b.n	800a02e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b0c      	cmp	r3, #12
 8009fee:	d11c      	bne.n	800a02a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6818      	ldr	r0, [r3, #0]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	6819      	ldr	r1, [r3, #0]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	f000 fdb0 	bl	800ab64 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	69da      	ldr	r2, [r3, #28]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a012:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	69d9      	ldr	r1, [r3, #28]
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	021a      	lsls	r2, r3, #8
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	430a      	orrs	r2, r1
 800a026:	61da      	str	r2, [r3, #28]
 800a028:	e001      	b.n	800a02e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a036:	7dfb      	ldrb	r3, [r7, #23]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3718      	adds	r7, #24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a056:	2b01      	cmp	r3, #1
 800a058:	d101      	bne.n	800a05e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a05a:	2302      	movs	r3, #2
 800a05c:	e0ae      	b.n	800a1bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b0c      	cmp	r3, #12
 800a06a:	f200 809f 	bhi.w	800a1ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a06e:	a201      	add	r2, pc, #4	; (adr r2, 800a074 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a074:	0800a0a9 	.word	0x0800a0a9
 800a078:	0800a1ad 	.word	0x0800a1ad
 800a07c:	0800a1ad 	.word	0x0800a1ad
 800a080:	0800a1ad 	.word	0x0800a1ad
 800a084:	0800a0e9 	.word	0x0800a0e9
 800a088:	0800a1ad 	.word	0x0800a1ad
 800a08c:	0800a1ad 	.word	0x0800a1ad
 800a090:	0800a1ad 	.word	0x0800a1ad
 800a094:	0800a12b 	.word	0x0800a12b
 800a098:	0800a1ad 	.word	0x0800a1ad
 800a09c:	0800a1ad 	.word	0x0800a1ad
 800a0a0:	0800a1ad 	.word	0x0800a1ad
 800a0a4:	0800a16b 	.word	0x0800a16b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68b9      	ldr	r1, [r7, #8]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 fa5c 	bl	800a56c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699a      	ldr	r2, [r3, #24]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f042 0208 	orr.w	r2, r2, #8
 800a0c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699a      	ldr	r2, [r3, #24]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f022 0204 	bic.w	r2, r2, #4
 800a0d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6999      	ldr	r1, [r3, #24]
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	691a      	ldr	r2, [r3, #16]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	430a      	orrs	r2, r1
 800a0e4:	619a      	str	r2, [r3, #24]
      break;
 800a0e6:	e064      	b.n	800a1b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68b9      	ldr	r1, [r7, #8]
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f000 faac 	bl	800a64c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	699a      	ldr	r2, [r3, #24]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	699a      	ldr	r2, [r3, #24]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	6999      	ldr	r1, [r3, #24]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	021a      	lsls	r2, r3, #8
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	430a      	orrs	r2, r1
 800a126:	619a      	str	r2, [r3, #24]
      break;
 800a128:	e043      	b.n	800a1b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68b9      	ldr	r1, [r7, #8]
 800a130:	4618      	mov	r0, r3
 800a132:	f000 fb01 	bl	800a738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69da      	ldr	r2, [r3, #28]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f042 0208 	orr.w	r2, r2, #8
 800a144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	69da      	ldr	r2, [r3, #28]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f022 0204 	bic.w	r2, r2, #4
 800a154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	69d9      	ldr	r1, [r3, #28]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	691a      	ldr	r2, [r3, #16]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	430a      	orrs	r2, r1
 800a166:	61da      	str	r2, [r3, #28]
      break;
 800a168:	e023      	b.n	800a1b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	68b9      	ldr	r1, [r7, #8]
 800a170:	4618      	mov	r0, r3
 800a172:	f000 fb55 	bl	800a820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	69da      	ldr	r2, [r3, #28]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	69da      	ldr	r2, [r3, #28]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	69d9      	ldr	r1, [r3, #28]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	021a      	lsls	r2, r3, #8
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	430a      	orrs	r2, r1
 800a1a8:	61da      	str	r2, [r3, #28]
      break;
 800a1aa:	e002      	b.n	800a1b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a1b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d101      	bne.n	800a1e0 <HAL_TIM_ConfigClockSource+0x1c>
 800a1dc:	2302      	movs	r3, #2
 800a1de:	e0b4      	b.n	800a34a <HAL_TIM_ConfigClockSource+0x186>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a1fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a218:	d03e      	beq.n	800a298 <HAL_TIM_ConfigClockSource+0xd4>
 800a21a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a21e:	f200 8087 	bhi.w	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a226:	f000 8086 	beq.w	800a336 <HAL_TIM_ConfigClockSource+0x172>
 800a22a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a22e:	d87f      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a230:	2b70      	cmp	r3, #112	; 0x70
 800a232:	d01a      	beq.n	800a26a <HAL_TIM_ConfigClockSource+0xa6>
 800a234:	2b70      	cmp	r3, #112	; 0x70
 800a236:	d87b      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a238:	2b60      	cmp	r3, #96	; 0x60
 800a23a:	d050      	beq.n	800a2de <HAL_TIM_ConfigClockSource+0x11a>
 800a23c:	2b60      	cmp	r3, #96	; 0x60
 800a23e:	d877      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a240:	2b50      	cmp	r3, #80	; 0x50
 800a242:	d03c      	beq.n	800a2be <HAL_TIM_ConfigClockSource+0xfa>
 800a244:	2b50      	cmp	r3, #80	; 0x50
 800a246:	d873      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a248:	2b40      	cmp	r3, #64	; 0x40
 800a24a:	d058      	beq.n	800a2fe <HAL_TIM_ConfigClockSource+0x13a>
 800a24c:	2b40      	cmp	r3, #64	; 0x40
 800a24e:	d86f      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a250:	2b30      	cmp	r3, #48	; 0x30
 800a252:	d064      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0x15a>
 800a254:	2b30      	cmp	r3, #48	; 0x30
 800a256:	d86b      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a258:	2b20      	cmp	r3, #32
 800a25a:	d060      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0x15a>
 800a25c:	2b20      	cmp	r3, #32
 800a25e:	d867      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a260:	2b00      	cmp	r3, #0
 800a262:	d05c      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0x15a>
 800a264:	2b10      	cmp	r3, #16
 800a266:	d05a      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0x15a>
 800a268:	e062      	b.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	6899      	ldr	r1, [r3, #8]
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	f000 fccb 	bl	800ac14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a28c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	609a      	str	r2, [r3, #8]
      break;
 800a296:	e04f      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6818      	ldr	r0, [r3, #0]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	6899      	ldr	r1, [r3, #8]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	685a      	ldr	r2, [r3, #4]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f000 fcb4 	bl	800ac14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689a      	ldr	r2, [r3, #8]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2ba:	609a      	str	r2, [r3, #8]
      break;
 800a2bc:	e03c      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6818      	ldr	r0, [r3, #0]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	6859      	ldr	r1, [r3, #4]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f000 fb72 	bl	800a9b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2150      	movs	r1, #80	; 0x50
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 fc81 	bl	800abde <TIM_ITRx_SetConfig>
      break;
 800a2dc:	e02c      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	6859      	ldr	r1, [r3, #4]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	f000 fbce 	bl	800aa8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2160      	movs	r1, #96	; 0x60
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 fc71 	bl	800abde <TIM_ITRx_SetConfig>
      break;
 800a2fc:	e01c      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6818      	ldr	r0, [r3, #0]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	6859      	ldr	r1, [r3, #4]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	461a      	mov	r2, r3
 800a30c:	f000 fb52 	bl	800a9b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2140      	movs	r1, #64	; 0x40
 800a316:	4618      	mov	r0, r3
 800a318:	f000 fc61 	bl	800abde <TIM_ITRx_SetConfig>
      break;
 800a31c:	e00c      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4619      	mov	r1, r3
 800a328:	4610      	mov	r0, r2
 800a32a:	f000 fc58 	bl	800abde <TIM_ITRx_SetConfig>
      break;
 800a32e:	e003      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	73fb      	strb	r3, [r7, #15]
      break;
 800a334:	e000      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a348:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a35e:	2300      	movs	r3, #0
 800a360:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	2b0c      	cmp	r3, #12
 800a366:	d831      	bhi.n	800a3cc <HAL_TIM_ReadCapturedValue+0x78>
 800a368:	a201      	add	r2, pc, #4	; (adr r2, 800a370 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36e:	bf00      	nop
 800a370:	0800a3a5 	.word	0x0800a3a5
 800a374:	0800a3cd 	.word	0x0800a3cd
 800a378:	0800a3cd 	.word	0x0800a3cd
 800a37c:	0800a3cd 	.word	0x0800a3cd
 800a380:	0800a3af 	.word	0x0800a3af
 800a384:	0800a3cd 	.word	0x0800a3cd
 800a388:	0800a3cd 	.word	0x0800a3cd
 800a38c:	0800a3cd 	.word	0x0800a3cd
 800a390:	0800a3b9 	.word	0x0800a3b9
 800a394:	0800a3cd 	.word	0x0800a3cd
 800a398:	0800a3cd 	.word	0x0800a3cd
 800a39c:	0800a3cd 	.word	0x0800a3cd
 800a3a0:	0800a3c3 	.word	0x0800a3c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3aa:	60fb      	str	r3, [r7, #12]

      break;
 800a3ac:	e00f      	b.n	800a3ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b4:	60fb      	str	r3, [r7, #12]

      break;
 800a3b6:	e00a      	b.n	800a3ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3be:	60fb      	str	r3, [r7, #12]

      break;
 800a3c0:	e005      	b.n	800a3ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c8:	60fb      	str	r3, [r7, #12]

      break;
 800a3ca:	e000      	b.n	800a3ce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a3cc:	bf00      	nop
  }

  return tmpreg;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a40c:	bf00      	nop
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a40      	ldr	r2, [pc, #256]	; (800a540 <TIM_Base_SetConfig+0x114>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d013      	beq.n	800a46c <TIM_Base_SetConfig+0x40>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a44a:	d00f      	beq.n	800a46c <TIM_Base_SetConfig+0x40>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a3d      	ldr	r2, [pc, #244]	; (800a544 <TIM_Base_SetConfig+0x118>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d00b      	beq.n	800a46c <TIM_Base_SetConfig+0x40>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a3c      	ldr	r2, [pc, #240]	; (800a548 <TIM_Base_SetConfig+0x11c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d007      	beq.n	800a46c <TIM_Base_SetConfig+0x40>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a3b      	ldr	r2, [pc, #236]	; (800a54c <TIM_Base_SetConfig+0x120>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d003      	beq.n	800a46c <TIM_Base_SetConfig+0x40>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a3a      	ldr	r2, [pc, #232]	; (800a550 <TIM_Base_SetConfig+0x124>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d108      	bne.n	800a47e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a2f      	ldr	r2, [pc, #188]	; (800a540 <TIM_Base_SetConfig+0x114>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d02b      	beq.n	800a4de <TIM_Base_SetConfig+0xb2>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a48c:	d027      	beq.n	800a4de <TIM_Base_SetConfig+0xb2>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a2c      	ldr	r2, [pc, #176]	; (800a544 <TIM_Base_SetConfig+0x118>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d023      	beq.n	800a4de <TIM_Base_SetConfig+0xb2>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a2b      	ldr	r2, [pc, #172]	; (800a548 <TIM_Base_SetConfig+0x11c>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d01f      	beq.n	800a4de <TIM_Base_SetConfig+0xb2>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a2a      	ldr	r2, [pc, #168]	; (800a54c <TIM_Base_SetConfig+0x120>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d01b      	beq.n	800a4de <TIM_Base_SetConfig+0xb2>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a29      	ldr	r2, [pc, #164]	; (800a550 <TIM_Base_SetConfig+0x124>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d017      	beq.n	800a4de <TIM_Base_SetConfig+0xb2>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a28      	ldr	r2, [pc, #160]	; (800a554 <TIM_Base_SetConfig+0x128>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d013      	beq.n	800a4de <TIM_Base_SetConfig+0xb2>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a27      	ldr	r2, [pc, #156]	; (800a558 <TIM_Base_SetConfig+0x12c>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d00f      	beq.n	800a4de <TIM_Base_SetConfig+0xb2>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a26      	ldr	r2, [pc, #152]	; (800a55c <TIM_Base_SetConfig+0x130>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d00b      	beq.n	800a4de <TIM_Base_SetConfig+0xb2>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4a25      	ldr	r2, [pc, #148]	; (800a560 <TIM_Base_SetConfig+0x134>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d007      	beq.n	800a4de <TIM_Base_SetConfig+0xb2>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a24      	ldr	r2, [pc, #144]	; (800a564 <TIM_Base_SetConfig+0x138>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d003      	beq.n	800a4de <TIM_Base_SetConfig+0xb2>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a23      	ldr	r2, [pc, #140]	; (800a568 <TIM_Base_SetConfig+0x13c>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d108      	bne.n	800a4f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	695b      	ldr	r3, [r3, #20]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	689a      	ldr	r2, [r3, #8]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a0a      	ldr	r2, [pc, #40]	; (800a540 <TIM_Base_SetConfig+0x114>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d003      	beq.n	800a524 <TIM_Base_SetConfig+0xf8>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a0c      	ldr	r2, [pc, #48]	; (800a550 <TIM_Base_SetConfig+0x124>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d103      	bne.n	800a52c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	691a      	ldr	r2, [r3, #16]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	615a      	str	r2, [r3, #20]
}
 800a532:	bf00      	nop
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	40010000 	.word	0x40010000
 800a544:	40000400 	.word	0x40000400
 800a548:	40000800 	.word	0x40000800
 800a54c:	40000c00 	.word	0x40000c00
 800a550:	40010400 	.word	0x40010400
 800a554:	40014000 	.word	0x40014000
 800a558:	40014400 	.word	0x40014400
 800a55c:	40014800 	.word	0x40014800
 800a560:	40001800 	.word	0x40001800
 800a564:	40001c00 	.word	0x40001c00
 800a568:	40002000 	.word	0x40002000

0800a56c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b087      	sub	sp, #28
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	f023 0201 	bic.w	r2, r3, #1
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a59a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f023 0303 	bic.w	r3, r3, #3
 800a5a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	f023 0302 	bic.w	r3, r3, #2
 800a5b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a20      	ldr	r2, [pc, #128]	; (800a644 <TIM_OC1_SetConfig+0xd8>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d003      	beq.n	800a5d0 <TIM_OC1_SetConfig+0x64>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a1f      	ldr	r2, [pc, #124]	; (800a648 <TIM_OC1_SetConfig+0xdc>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d10c      	bne.n	800a5ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	f023 0308 	bic.w	r3, r3, #8
 800a5d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	697a      	ldr	r2, [r7, #20]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f023 0304 	bic.w	r3, r3, #4
 800a5e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	4a15      	ldr	r2, [pc, #84]	; (800a644 <TIM_OC1_SetConfig+0xd8>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d003      	beq.n	800a5fa <TIM_OC1_SetConfig+0x8e>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a14      	ldr	r2, [pc, #80]	; (800a648 <TIM_OC1_SetConfig+0xdc>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d111      	bne.n	800a61e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	693a      	ldr	r2, [r7, #16]
 800a610:	4313      	orrs	r3, r2
 800a612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	699b      	ldr	r3, [r3, #24]
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	697a      	ldr	r2, [r7, #20]
 800a636:	621a      	str	r2, [r3, #32]
}
 800a638:	bf00      	nop
 800a63a:	371c      	adds	r7, #28
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	40010000 	.word	0x40010000
 800a648:	40010400 	.word	0x40010400

0800a64c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b087      	sub	sp, #28
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6a1b      	ldr	r3, [r3, #32]
 800a65a:	f023 0210 	bic.w	r2, r3, #16
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a67a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	021b      	lsls	r3, r3, #8
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	f023 0320 	bic.w	r3, r3, #32
 800a696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	011b      	lsls	r3, r3, #4
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a22      	ldr	r2, [pc, #136]	; (800a730 <TIM_OC2_SetConfig+0xe4>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d003      	beq.n	800a6b4 <TIM_OC2_SetConfig+0x68>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a21      	ldr	r2, [pc, #132]	; (800a734 <TIM_OC2_SetConfig+0xe8>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d10d      	bne.n	800a6d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	011b      	lsls	r3, r3, #4
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a17      	ldr	r2, [pc, #92]	; (800a730 <TIM_OC2_SetConfig+0xe4>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d003      	beq.n	800a6e0 <TIM_OC2_SetConfig+0x94>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a16      	ldr	r2, [pc, #88]	; (800a734 <TIM_OC2_SetConfig+0xe8>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d113      	bne.n	800a708 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	695b      	ldr	r3, [r3, #20]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	4313      	orrs	r3, r2
 800a706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	621a      	str	r2, [r3, #32]
}
 800a722:	bf00      	nop
 800a724:	371c      	adds	r7, #28
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	40010000 	.word	0x40010000
 800a734:	40010400 	.word	0x40010400

0800a738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a738:	b480      	push	{r7}
 800a73a:	b087      	sub	sp, #28
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a1b      	ldr	r3, [r3, #32]
 800a746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a1b      	ldr	r3, [r3, #32]
 800a752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	69db      	ldr	r3, [r3, #28]
 800a75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f023 0303 	bic.w	r3, r3, #3
 800a76e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	4313      	orrs	r3, r2
 800a778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	021b      	lsls	r3, r3, #8
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	4a21      	ldr	r2, [pc, #132]	; (800a818 <TIM_OC3_SetConfig+0xe0>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d003      	beq.n	800a79e <TIM_OC3_SetConfig+0x66>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4a20      	ldr	r2, [pc, #128]	; (800a81c <TIM_OC3_SetConfig+0xe4>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d10d      	bne.n	800a7ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	021b      	lsls	r3, r3, #8
 800a7ac:	697a      	ldr	r2, [r7, #20]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a16      	ldr	r2, [pc, #88]	; (800a818 <TIM_OC3_SetConfig+0xe0>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d003      	beq.n	800a7ca <TIM_OC3_SetConfig+0x92>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a15      	ldr	r2, [pc, #84]	; (800a81c <TIM_OC3_SetConfig+0xe4>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d113      	bne.n	800a7f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a7d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	011b      	lsls	r3, r3, #4
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	011b      	lsls	r3, r3, #4
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	621a      	str	r2, [r3, #32]
}
 800a80c:	bf00      	nop
 800a80e:	371c      	adds	r7, #28
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr
 800a818:	40010000 	.word	0x40010000
 800a81c:	40010400 	.word	0x40010400

0800a820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a820:	b480      	push	{r7}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a1b      	ldr	r3, [r3, #32]
 800a83a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	69db      	ldr	r3, [r3, #28]
 800a846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a84e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	021b      	lsls	r3, r3, #8
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	4313      	orrs	r3, r2
 800a862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a86a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	031b      	lsls	r3, r3, #12
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	4313      	orrs	r3, r2
 800a876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a12      	ldr	r2, [pc, #72]	; (800a8c4 <TIM_OC4_SetConfig+0xa4>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d003      	beq.n	800a888 <TIM_OC4_SetConfig+0x68>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a11      	ldr	r2, [pc, #68]	; (800a8c8 <TIM_OC4_SetConfig+0xa8>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d109      	bne.n	800a89c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a88e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	695b      	ldr	r3, [r3, #20]
 800a894:	019b      	lsls	r3, r3, #6
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	4313      	orrs	r3, r2
 800a89a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	697a      	ldr	r2, [r7, #20]
 800a8a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	685a      	ldr	r2, [r3, #4]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	621a      	str	r2, [r3, #32]
}
 800a8b6:	bf00      	nop
 800a8b8:	371c      	adds	r7, #28
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	40010000 	.word	0x40010000
 800a8c8:	40010400 	.word	0x40010400

0800a8cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
 800a8d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	f023 0201 	bic.w	r2, r3, #1
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6a1b      	ldr	r3, [r3, #32]
 800a8f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	4a28      	ldr	r2, [pc, #160]	; (800a998 <TIM_TI1_SetConfig+0xcc>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d01b      	beq.n	800a932 <TIM_TI1_SetConfig+0x66>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a900:	d017      	beq.n	800a932 <TIM_TI1_SetConfig+0x66>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	4a25      	ldr	r2, [pc, #148]	; (800a99c <TIM_TI1_SetConfig+0xd0>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d013      	beq.n	800a932 <TIM_TI1_SetConfig+0x66>
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	4a24      	ldr	r2, [pc, #144]	; (800a9a0 <TIM_TI1_SetConfig+0xd4>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d00f      	beq.n	800a932 <TIM_TI1_SetConfig+0x66>
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	4a23      	ldr	r2, [pc, #140]	; (800a9a4 <TIM_TI1_SetConfig+0xd8>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d00b      	beq.n	800a932 <TIM_TI1_SetConfig+0x66>
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	4a22      	ldr	r2, [pc, #136]	; (800a9a8 <TIM_TI1_SetConfig+0xdc>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d007      	beq.n	800a932 <TIM_TI1_SetConfig+0x66>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4a21      	ldr	r2, [pc, #132]	; (800a9ac <TIM_TI1_SetConfig+0xe0>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d003      	beq.n	800a932 <TIM_TI1_SetConfig+0x66>
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	4a20      	ldr	r2, [pc, #128]	; (800a9b0 <TIM_TI1_SetConfig+0xe4>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d101      	bne.n	800a936 <TIM_TI1_SetConfig+0x6a>
 800a932:	2301      	movs	r3, #1
 800a934:	e000      	b.n	800a938 <TIM_TI1_SetConfig+0x6c>
 800a936:	2300      	movs	r3, #0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d008      	beq.n	800a94e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	f023 0303 	bic.w	r3, r3, #3
 800a942:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a944:	697a      	ldr	r2, [r7, #20]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4313      	orrs	r3, r2
 800a94a:	617b      	str	r3, [r7, #20]
 800a94c:	e003      	b.n	800a956 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f043 0301 	orr.w	r3, r3, #1
 800a954:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a95c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	011b      	lsls	r3, r3, #4
 800a962:	b2db      	uxtb	r3, r3
 800a964:	697a      	ldr	r2, [r7, #20]
 800a966:	4313      	orrs	r3, r2
 800a968:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	f023 030a 	bic.w	r3, r3, #10
 800a970:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	f003 030a 	and.w	r3, r3, #10
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	693a      	ldr	r2, [r7, #16]
 800a988:	621a      	str	r2, [r3, #32]
}
 800a98a:	bf00      	nop
 800a98c:	371c      	adds	r7, #28
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	40010000 	.word	0x40010000
 800a99c:	40000400 	.word	0x40000400
 800a9a0:	40000800 	.word	0x40000800
 800a9a4:	40000c00 	.word	0x40000c00
 800a9a8:	40010400 	.word	0x40010400
 800a9ac:	40014000 	.word	0x40014000
 800a9b0:	40001800 	.word	0x40001800

0800a9b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6a1b      	ldr	r3, [r3, #32]
 800a9ca:	f023 0201 	bic.w	r2, r3, #1
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	699b      	ldr	r3, [r3, #24]
 800a9d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	011b      	lsls	r3, r3, #4
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	f023 030a 	bic.w	r3, r3, #10
 800a9f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9f2:	697a      	ldr	r2, [r7, #20]
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	693a      	ldr	r2, [r7, #16]
 800a9fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	621a      	str	r2, [r3, #32]
}
 800aa06:	bf00      	nop
 800aa08:	371c      	adds	r7, #28
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b087      	sub	sp, #28
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	60f8      	str	r0, [r7, #12]
 800aa1a:	60b9      	str	r1, [r7, #8]
 800aa1c:	607a      	str	r2, [r7, #4]
 800aa1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6a1b      	ldr	r3, [r3, #32]
 800aa24:	f023 0210 	bic.w	r2, r3, #16
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	021b      	lsls	r3, r3, #8
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	031b      	lsls	r3, r3, #12
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	011b      	lsls	r3, r3, #4
 800aa6a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	621a      	str	r2, [r3, #32]
}
 800aa80:	bf00      	nop
 800aa82:	371c      	adds	r7, #28
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b087      	sub	sp, #28
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6a1b      	ldr	r3, [r3, #32]
 800aa9c:	f023 0210 	bic.w	r2, r3, #16
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aab6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	031b      	lsls	r3, r3, #12
 800aabc:	697a      	ldr	r2, [r7, #20]
 800aabe:	4313      	orrs	r3, r2
 800aac0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aac8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	011b      	lsls	r3, r3, #4
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	4313      	orrs	r3, r2
 800aad2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	621a      	str	r2, [r3, #32]
}
 800aae0:	bf00      	nop
 800aae2:	371c      	adds	r7, #28
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
 800aaf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	69db      	ldr	r3, [r3, #28]
 800ab0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6a1b      	ldr	r3, [r3, #32]
 800ab10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f023 0303 	bic.w	r3, r3, #3
 800ab18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ab1a:	697a      	ldr	r2, [r7, #20]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	011b      	lsls	r3, r3, #4
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ab3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	021b      	lsls	r3, r3, #8
 800ab42:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	693a      	ldr	r2, [r7, #16]
 800ab56:	621a      	str	r2, [r3, #32]
}
 800ab58:	bf00      	nop
 800ab5a:	371c      	adds	r7, #28
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b087      	sub	sp, #28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
 800ab70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	69db      	ldr	r3, [r3, #28]
 800ab82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6a1b      	ldr	r3, [r3, #32]
 800ab88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	021b      	lsls	r3, r3, #8
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aba2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	031b      	lsls	r3, r3, #12
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	4313      	orrs	r3, r2
 800abae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800abb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	031b      	lsls	r3, r3, #12
 800abbc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	621a      	str	r2, [r3, #32]
}
 800abd2:	bf00      	nop
 800abd4:	371c      	adds	r7, #28
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800abde:	b480      	push	{r7}
 800abe0:	b085      	sub	sp, #20
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	f043 0307 	orr.w	r3, r3, #7
 800ac00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	609a      	str	r2, [r3, #8]
}
 800ac08:	bf00      	nop
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b087      	sub	sp, #28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
 800ac20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	021a      	lsls	r2, r3, #8
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	431a      	orrs	r2, r3
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	697a      	ldr	r2, [r7, #20]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	609a      	str	r2, [r3, #8]
}
 800ac48:	bf00      	nop
 800ac4a:	371c      	adds	r7, #28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b087      	sub	sp, #28
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	f003 031f 	and.w	r3, r3, #31
 800ac66:	2201      	movs	r2, #1
 800ac68:	fa02 f303 	lsl.w	r3, r2, r3
 800ac6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6a1a      	ldr	r2, [r3, #32]
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	43db      	mvns	r3, r3
 800ac76:	401a      	ands	r2, r3
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6a1a      	ldr	r2, [r3, #32]
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	f003 031f 	and.w	r3, r3, #31
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	fa01 f303 	lsl.w	r3, r1, r3
 800ac8c:	431a      	orrs	r2, r3
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	621a      	str	r2, [r3, #32]
}
 800ac92:	bf00      	nop
 800ac94:	371c      	adds	r7, #28
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
	...

0800aca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d101      	bne.n	800acb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acb4:	2302      	movs	r3, #2
 800acb6:	e05a      	b.n	800ad6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2202      	movs	r2, #2
 800acc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a21      	ldr	r2, [pc, #132]	; (800ad7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d022      	beq.n	800ad42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad04:	d01d      	beq.n	800ad42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a1d      	ldr	r2, [pc, #116]	; (800ad80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d018      	beq.n	800ad42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a1b      	ldr	r2, [pc, #108]	; (800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d013      	beq.n	800ad42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a1a      	ldr	r2, [pc, #104]	; (800ad88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d00e      	beq.n	800ad42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a18      	ldr	r2, [pc, #96]	; (800ad8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d009      	beq.n	800ad42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a17      	ldr	r2, [pc, #92]	; (800ad90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d004      	beq.n	800ad42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a15      	ldr	r2, [pc, #84]	; (800ad94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d10c      	bne.n	800ad5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	4313      	orrs	r3, r2
 800ad52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68ba      	ldr	r2, [r7, #8]
 800ad5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	40010000 	.word	0x40010000
 800ad80:	40000400 	.word	0x40000400
 800ad84:	40000800 	.word	0x40000800
 800ad88:	40000c00 	.word	0x40000c00
 800ad8c:	40010400 	.word	0x40010400
 800ad90:	40014000 	.word	0x40014000
 800ad94:	40001800 	.word	0x40001800

0800ad98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adb4:	bf00      	nop
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d101      	bne.n	800add2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800adce:	2301      	movs	r3, #1
 800add0:	e03f      	b.n	800ae52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800add8:	b2db      	uxtb	r3, r3
 800adda:	2b00      	cmp	r3, #0
 800addc:	d106      	bne.n	800adec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7fc fa4c 	bl	8007284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2224      	movs	r2, #36	; 0x24
 800adf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68da      	ldr	r2, [r3, #12]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fdd1 	bl	800b9ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	691a      	ldr	r2, [r3, #16]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	695a      	ldr	r2, [r3, #20]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68da      	ldr	r2, [r3, #12]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2220      	movs	r2, #32
 800ae44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2220      	movs	r2, #32
 800ae4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
	...

0800ae5c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b08c      	sub	sp, #48	; 0x30
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	4613      	mov	r3, r2
 800ae68:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	2b20      	cmp	r3, #32
 800ae74:	d165      	bne.n	800af42 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d002      	beq.n	800ae82 <HAL_UART_Transmit_DMA+0x26>
 800ae7c:	88fb      	ldrh	r3, [r7, #6]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d101      	bne.n	800ae86 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	e05e      	b.n	800af44 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d101      	bne.n	800ae94 <HAL_UART_Transmit_DMA+0x38>
 800ae90:	2302      	movs	r3, #2
 800ae92:	e057      	b.n	800af44 <HAL_UART_Transmit_DMA+0xe8>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	88fa      	ldrh	r2, [r7, #6]
 800aea6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	88fa      	ldrh	r2, [r7, #6]
 800aeac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2221      	movs	r2, #33	; 0x21
 800aeb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec0:	4a22      	ldr	r2, [pc, #136]	; (800af4c <HAL_UART_Transmit_DMA+0xf0>)
 800aec2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec8:	4a21      	ldr	r2, [pc, #132]	; (800af50 <HAL_UART_Transmit_DMA+0xf4>)
 800aeca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed0:	4a20      	ldr	r2, [pc, #128]	; (800af54 <HAL_UART_Transmit_DMA+0xf8>)
 800aed2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed8:	2200      	movs	r2, #0
 800aeda:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800aedc:	f107 0308 	add.w	r3, r7, #8
 800aee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee8:	6819      	ldr	r1, [r3, #0]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3304      	adds	r3, #4
 800aef0:	461a      	mov	r2, r3
 800aef2:	88fb      	ldrh	r3, [r7, #6]
 800aef4:	f7fc fe94 	bl	8007c20 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af00:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3314      	adds	r3, #20
 800af10:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	e853 3f00 	ldrex	r3, [r3]
 800af18:	617b      	str	r3, [r7, #20]
   return(result);
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af20:	62bb      	str	r3, [r7, #40]	; 0x28
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	3314      	adds	r3, #20
 800af28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af2a:	627a      	str	r2, [r7, #36]	; 0x24
 800af2c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2e:	6a39      	ldr	r1, [r7, #32]
 800af30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af32:	e841 2300 	strex	r3, r2, [r1]
 800af36:	61fb      	str	r3, [r7, #28]
   return(result);
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1e5      	bne.n	800af0a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	e000      	b.n	800af44 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800af42:	2302      	movs	r3, #2
  }
}
 800af44:	4618      	mov	r0, r3
 800af46:	3730      	adds	r7, #48	; 0x30
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	0800b4dd 	.word	0x0800b4dd
 800af50:	0800b577 	.word	0x0800b577
 800af54:	0800b593 	.word	0x0800b593

0800af58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b0ba      	sub	sp, #232	; 0xe8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800af7e:	2300      	movs	r3, #0
 800af80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800af84:	2300      	movs	r3, #0
 800af86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800af8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af8e:	f003 030f 	and.w	r3, r3, #15
 800af92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800af96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d10f      	bne.n	800afbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afa2:	f003 0320 	and.w	r3, r3, #32
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d009      	beq.n	800afbe <HAL_UART_IRQHandler+0x66>
 800afaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afae:	f003 0320 	and.w	r3, r3, #32
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d003      	beq.n	800afbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 fc3c 	bl	800b834 <UART_Receive_IT>
      return;
 800afbc:	e256      	b.n	800b46c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800afbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f000 80de 	beq.w	800b184 <HAL_UART_IRQHandler+0x22c>
 800afc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afcc:	f003 0301 	and.w	r3, r3, #1
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d106      	bne.n	800afe2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800afd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f000 80d1 	beq.w	800b184 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800afe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afe6:	f003 0301 	and.w	r3, r3, #1
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00b      	beq.n	800b006 <HAL_UART_IRQHandler+0xae>
 800afee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d005      	beq.n	800b006 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affe:	f043 0201 	orr.w	r2, r3, #1
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b00a:	f003 0304 	and.w	r3, r3, #4
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00b      	beq.n	800b02a <HAL_UART_IRQHandler+0xd2>
 800b012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b016:	f003 0301 	and.w	r3, r3, #1
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d005      	beq.n	800b02a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b022:	f043 0202 	orr.w	r2, r3, #2
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b02a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b02e:	f003 0302 	and.w	r3, r3, #2
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00b      	beq.n	800b04e <HAL_UART_IRQHandler+0xf6>
 800b036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b03a:	f003 0301 	and.w	r3, r3, #1
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d005      	beq.n	800b04e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b046:	f043 0204 	orr.w	r2, r3, #4
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b04e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b052:	f003 0308 	and.w	r3, r3, #8
 800b056:	2b00      	cmp	r3, #0
 800b058:	d011      	beq.n	800b07e <HAL_UART_IRQHandler+0x126>
 800b05a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b05e:	f003 0320 	and.w	r3, r3, #32
 800b062:	2b00      	cmp	r3, #0
 800b064:	d105      	bne.n	800b072 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b06a:	f003 0301 	and.w	r3, r3, #1
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d005      	beq.n	800b07e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b076:	f043 0208 	orr.w	r2, r3, #8
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 81ed 	beq.w	800b462 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b08c:	f003 0320 	and.w	r3, r3, #32
 800b090:	2b00      	cmp	r3, #0
 800b092:	d008      	beq.n	800b0a6 <HAL_UART_IRQHandler+0x14e>
 800b094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b098:	f003 0320 	and.w	r3, r3, #32
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d002      	beq.n	800b0a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fbc7 	bl	800b834 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	695b      	ldr	r3, [r3, #20]
 800b0ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b0:	2b40      	cmp	r3, #64	; 0x40
 800b0b2:	bf0c      	ite	eq
 800b0b4:	2301      	moveq	r3, #1
 800b0b6:	2300      	movne	r3, #0
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c2:	f003 0308 	and.w	r3, r3, #8
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d103      	bne.n	800b0d2 <HAL_UART_IRQHandler+0x17a>
 800b0ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d04f      	beq.n	800b172 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 facf 	bl	800b676 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e2:	2b40      	cmp	r3, #64	; 0x40
 800b0e4:	d141      	bne.n	800b16a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3314      	adds	r3, #20
 800b0ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b0f4:	e853 3f00 	ldrex	r3, [r3]
 800b0f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b0fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	3314      	adds	r3, #20
 800b10e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b112:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b11e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b122:	e841 2300 	strex	r3, r2, [r1]
 800b126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b12a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1d9      	bne.n	800b0e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b136:	2b00      	cmp	r3, #0
 800b138:	d013      	beq.n	800b162 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b13e:	4a7d      	ldr	r2, [pc, #500]	; (800b334 <HAL_UART_IRQHandler+0x3dc>)
 800b140:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b146:	4618      	mov	r0, r3
 800b148:	f7fc fe32 	bl	8007db0 <HAL_DMA_Abort_IT>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d016      	beq.n	800b180 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b15c:	4610      	mov	r0, r2
 800b15e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b160:	e00e      	b.n	800b180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f9a4 	bl	800b4b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b168:	e00a      	b.n	800b180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f9a0 	bl	800b4b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b170:	e006      	b.n	800b180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f99c 	bl	800b4b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b17e:	e170      	b.n	800b462 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b180:	bf00      	nop
    return;
 800b182:	e16e      	b.n	800b462 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b188:	2b01      	cmp	r3, #1
 800b18a:	f040 814a 	bne.w	800b422 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b192:	f003 0310 	and.w	r3, r3, #16
 800b196:	2b00      	cmp	r3, #0
 800b198:	f000 8143 	beq.w	800b422 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1a0:	f003 0310 	and.w	r3, r3, #16
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f000 813c 	beq.w	800b422 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	60bb      	str	r3, [r7, #8]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	60bb      	str	r3, [r7, #8]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	60bb      	str	r3, [r7, #8]
 800b1be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	695b      	ldr	r3, [r3, #20]
 800b1c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ca:	2b40      	cmp	r3, #64	; 0x40
 800b1cc:	f040 80b4 	bne.w	800b338 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b1dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f000 8140 	beq.w	800b466 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b1ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	f080 8139 	bcs.w	800b466 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b1fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b200:	69db      	ldr	r3, [r3, #28]
 800b202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b206:	f000 8088 	beq.w	800b31a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	330c      	adds	r3, #12
 800b210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b218:	e853 3f00 	ldrex	r3, [r3]
 800b21c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	330c      	adds	r3, #12
 800b232:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b236:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b23a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b242:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b246:	e841 2300 	strex	r3, r2, [r1]
 800b24a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b24e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1d9      	bne.n	800b20a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	3314      	adds	r3, #20
 800b25c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b260:	e853 3f00 	ldrex	r3, [r3]
 800b264:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b268:	f023 0301 	bic.w	r3, r3, #1
 800b26c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3314      	adds	r3, #20
 800b276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b27a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b27e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b280:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b282:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b286:	e841 2300 	strex	r3, r2, [r1]
 800b28a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b28c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1e1      	bne.n	800b256 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	3314      	adds	r3, #20
 800b298:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b29c:	e853 3f00 	ldrex	r3, [r3]
 800b2a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b2a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	3314      	adds	r3, #20
 800b2b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b2b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b2b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b2bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b2be:	e841 2300 	strex	r3, r2, [r1]
 800b2c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b2c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1e3      	bne.n	800b292 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	330c      	adds	r3, #12
 800b2de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2e2:	e853 3f00 	ldrex	r3, [r3]
 800b2e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b2e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2ea:	f023 0310 	bic.w	r3, r3, #16
 800b2ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	330c      	adds	r3, #12
 800b2f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b2fc:	65ba      	str	r2, [r7, #88]	; 0x58
 800b2fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b300:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b302:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b304:	e841 2300 	strex	r3, r2, [r1]
 800b308:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b30a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1e3      	bne.n	800b2d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b314:	4618      	mov	r0, r3
 800b316:	f7fc fcdb 	bl	8007cd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b322:	b29b      	uxth	r3, r3
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	b29b      	uxth	r3, r3
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f8ca 	bl	800b4c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b330:	e099      	b.n	800b466 <HAL_UART_IRQHandler+0x50e>
 800b332:	bf00      	nop
 800b334:	0800b73d 	.word	0x0800b73d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b340:	b29b      	uxth	r3, r3
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f000 808b 	beq.w	800b46a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b354:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f000 8086 	beq.w	800b46a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	330c      	adds	r3, #12
 800b364:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b368:	e853 3f00 	ldrex	r3, [r3]
 800b36c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b370:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b374:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	330c      	adds	r3, #12
 800b37e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b382:	647a      	str	r2, [r7, #68]	; 0x44
 800b384:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b386:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b38a:	e841 2300 	strex	r3, r2, [r1]
 800b38e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1e3      	bne.n	800b35e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	3314      	adds	r3, #20
 800b39c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a0:	e853 3f00 	ldrex	r3, [r3]
 800b3a4:	623b      	str	r3, [r7, #32]
   return(result);
 800b3a6:	6a3b      	ldr	r3, [r7, #32]
 800b3a8:	f023 0301 	bic.w	r3, r3, #1
 800b3ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3314      	adds	r3, #20
 800b3b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b3ba:	633a      	str	r2, [r7, #48]	; 0x30
 800b3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3c2:	e841 2300 	strex	r3, r2, [r1]
 800b3c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1e3      	bne.n	800b396 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2220      	movs	r2, #32
 800b3d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	330c      	adds	r3, #12
 800b3e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	e853 3f00 	ldrex	r3, [r3]
 800b3ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f023 0310 	bic.w	r3, r3, #16
 800b3f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	330c      	adds	r3, #12
 800b3fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b400:	61fa      	str	r2, [r7, #28]
 800b402:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b404:	69b9      	ldr	r1, [r7, #24]
 800b406:	69fa      	ldr	r2, [r7, #28]
 800b408:	e841 2300 	strex	r3, r2, [r1]
 800b40c:	617b      	str	r3, [r7, #20]
   return(result);
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1e3      	bne.n	800b3dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b418:	4619      	mov	r1, r3
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f852 	bl	800b4c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b420:	e023      	b.n	800b46a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d009      	beq.n	800b442 <HAL_UART_IRQHandler+0x4ea>
 800b42e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b436:	2b00      	cmp	r3, #0
 800b438:	d003      	beq.n	800b442 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f992 	bl	800b764 <UART_Transmit_IT>
    return;
 800b440:	e014      	b.n	800b46c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00e      	beq.n	800b46c <HAL_UART_IRQHandler+0x514>
 800b44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b456:	2b00      	cmp	r3, #0
 800b458:	d008      	beq.n	800b46c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 f9d2 	bl	800b804 <UART_EndTransmit_IT>
    return;
 800b460:	e004      	b.n	800b46c <HAL_UART_IRQHandler+0x514>
    return;
 800b462:	bf00      	nop
 800b464:	e002      	b.n	800b46c <HAL_UART_IRQHandler+0x514>
      return;
 800b466:	bf00      	nop
 800b468:	e000      	b.n	800b46c <HAL_UART_IRQHandler+0x514>
      return;
 800b46a:	bf00      	nop
  }
}
 800b46c:	37e8      	adds	r7, #232	; 0xe8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop

0800b474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b47c:	bf00      	nop
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr

0800b488 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b4a4:	bf00      	nop
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b4b8:	bf00      	nop
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b090      	sub	sp, #64	; 0x40
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d137      	bne.n	800b568 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b4fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	3314      	adds	r3, #20
 800b504:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	e853 3f00 	ldrex	r3, [r3]
 800b50c:	623b      	str	r3, [r7, #32]
   return(result);
 800b50e:	6a3b      	ldr	r3, [r7, #32]
 800b510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b514:	63bb      	str	r3, [r7, #56]	; 0x38
 800b516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3314      	adds	r3, #20
 800b51c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b51e:	633a      	str	r2, [r7, #48]	; 0x30
 800b520:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b526:	e841 2300 	strex	r3, r2, [r1]
 800b52a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1e5      	bne.n	800b4fe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	330c      	adds	r3, #12
 800b538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	e853 3f00 	ldrex	r3, [r3]
 800b540:	60fb      	str	r3, [r7, #12]
   return(result);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b548:	637b      	str	r3, [r7, #52]	; 0x34
 800b54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	330c      	adds	r3, #12
 800b550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b552:	61fa      	str	r2, [r7, #28]
 800b554:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b556:	69b9      	ldr	r1, [r7, #24]
 800b558:	69fa      	ldr	r2, [r7, #28]
 800b55a:	e841 2300 	strex	r3, r2, [r1]
 800b55e:	617b      	str	r3, [r7, #20]
   return(result);
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1e5      	bne.n	800b532 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b566:	e002      	b.n	800b56e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b568:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b56a:	f7ff ff83 	bl	800b474 <HAL_UART_TxCpltCallback>
}
 800b56e:	bf00      	nop
 800b570:	3740      	adds	r7, #64	; 0x40
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b084      	sub	sp, #16
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b582:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f7ff ff7f 	bl	800b488 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b58a:	bf00      	nop
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b59a:	2300      	movs	r3, #0
 800b59c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	695b      	ldr	r3, [r3, #20]
 800b5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ae:	2b80      	cmp	r3, #128	; 0x80
 800b5b0:	bf0c      	ite	eq
 800b5b2:	2301      	moveq	r3, #1
 800b5b4:	2300      	movne	r3, #0
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	2b21      	cmp	r3, #33	; 0x21
 800b5c4:	d108      	bne.n	800b5d8 <UART_DMAError+0x46>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d005      	beq.n	800b5d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b5d2:	68b8      	ldr	r0, [r7, #8]
 800b5d4:	f000 f827 	bl	800b626 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	695b      	ldr	r3, [r3, #20]
 800b5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e2:	2b40      	cmp	r3, #64	; 0x40
 800b5e4:	bf0c      	ite	eq
 800b5e6:	2301      	moveq	r3, #1
 800b5e8:	2300      	movne	r3, #0
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b22      	cmp	r3, #34	; 0x22
 800b5f8:	d108      	bne.n	800b60c <UART_DMAError+0x7a>
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d005      	beq.n	800b60c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	2200      	movs	r2, #0
 800b604:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b606:	68b8      	ldr	r0, [r7, #8]
 800b608:	f000 f835 	bl	800b676 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b610:	f043 0210 	orr.w	r2, r3, #16
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b618:	68b8      	ldr	r0, [r7, #8]
 800b61a:	f7ff ff49 	bl	800b4b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b61e:	bf00      	nop
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b626:	b480      	push	{r7}
 800b628:	b089      	sub	sp, #36	; 0x24
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	330c      	adds	r3, #12
 800b634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	e853 3f00 	ldrex	r3, [r3]
 800b63c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b644:	61fb      	str	r3, [r7, #28]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	330c      	adds	r3, #12
 800b64c:	69fa      	ldr	r2, [r7, #28]
 800b64e:	61ba      	str	r2, [r7, #24]
 800b650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b652:	6979      	ldr	r1, [r7, #20]
 800b654:	69ba      	ldr	r2, [r7, #24]
 800b656:	e841 2300 	strex	r3, r2, [r1]
 800b65a:	613b      	str	r3, [r7, #16]
   return(result);
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1e5      	bne.n	800b62e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2220      	movs	r2, #32
 800b666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b66a:	bf00      	nop
 800b66c:	3724      	adds	r7, #36	; 0x24
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b676:	b480      	push	{r7}
 800b678:	b095      	sub	sp, #84	; 0x54
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	330c      	adds	r3, #12
 800b684:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b688:	e853 3f00 	ldrex	r3, [r3]
 800b68c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b690:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b694:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	330c      	adds	r3, #12
 800b69c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b69e:	643a      	str	r2, [r7, #64]	; 0x40
 800b6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b6a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6a6:	e841 2300 	strex	r3, r2, [r1]
 800b6aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1e5      	bne.n	800b67e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	3314      	adds	r3, #20
 800b6b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ba:	6a3b      	ldr	r3, [r7, #32]
 800b6bc:	e853 3f00 	ldrex	r3, [r3]
 800b6c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	f023 0301 	bic.w	r3, r3, #1
 800b6c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	3314      	adds	r3, #20
 800b6d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6da:	e841 2300 	strex	r3, r2, [r1]
 800b6de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1e5      	bne.n	800b6b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d119      	bne.n	800b722 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	330c      	adds	r3, #12
 800b6f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	e853 3f00 	ldrex	r3, [r3]
 800b6fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	f023 0310 	bic.w	r3, r3, #16
 800b704:	647b      	str	r3, [r7, #68]	; 0x44
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	330c      	adds	r3, #12
 800b70c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b70e:	61ba      	str	r2, [r7, #24]
 800b710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b712:	6979      	ldr	r1, [r7, #20]
 800b714:	69ba      	ldr	r2, [r7, #24]
 800b716:	e841 2300 	strex	r3, r2, [r1]
 800b71a:	613b      	str	r3, [r7, #16]
   return(result);
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1e5      	bne.n	800b6ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2220      	movs	r2, #32
 800b726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b730:	bf00      	nop
 800b732:	3754      	adds	r7, #84	; 0x54
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2200      	movs	r2, #0
 800b754:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f7ff feaa 	bl	800b4b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b75c:	bf00      	nop
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b21      	cmp	r3, #33	; 0x21
 800b776:	d13e      	bne.n	800b7f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	689b      	ldr	r3, [r3, #8]
 800b77c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b780:	d114      	bne.n	800b7ac <UART_Transmit_IT+0x48>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d110      	bne.n	800b7ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	461a      	mov	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b79e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a1b      	ldr	r3, [r3, #32]
 800b7a4:	1c9a      	adds	r2, r3, #2
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	621a      	str	r2, [r3, #32]
 800b7aa:	e008      	b.n	800b7be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6a1b      	ldr	r3, [r3, #32]
 800b7b0:	1c59      	adds	r1, r3, #1
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	6211      	str	r1, [r2, #32]
 800b7b6:	781a      	ldrb	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10f      	bne.n	800b7f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68da      	ldr	r2, [r3, #12]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68da      	ldr	r2, [r3, #12]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	e000      	b.n	800b7f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b7f6:	2302      	movs	r3, #2
  }
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3714      	adds	r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68da      	ldr	r2, [r3, #12]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b81a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2220      	movs	r2, #32
 800b820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7ff fe25 	bl	800b474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b08c      	sub	sp, #48	; 0x30
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b842:	b2db      	uxtb	r3, r3
 800b844:	2b22      	cmp	r3, #34	; 0x22
 800b846:	f040 80ab 	bne.w	800b9a0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b852:	d117      	bne.n	800b884 <UART_Receive_IT+0x50>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	691b      	ldr	r3, [r3, #16]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d113      	bne.n	800b884 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b85c:	2300      	movs	r3, #0
 800b85e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b864:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b872:	b29a      	uxth	r2, r3
 800b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b876:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b87c:	1c9a      	adds	r2, r3, #2
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	629a      	str	r2, [r3, #40]	; 0x28
 800b882:	e026      	b.n	800b8d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b888:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b88a:	2300      	movs	r3, #0
 800b88c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b896:	d007      	beq.n	800b8a8 <UART_Receive_IT+0x74>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	689b      	ldr	r3, [r3, #8]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10a      	bne.n	800b8b6 <UART_Receive_IT+0x82>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d106      	bne.n	800b8b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	b2da      	uxtb	r2, r3
 800b8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b2:	701a      	strb	r2, [r3, #0]
 800b8b4:	e008      	b.n	800b8c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8cc:	1c5a      	adds	r2, r3, #1
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d15a      	bne.n	800b99c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68da      	ldr	r2, [r3, #12]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f022 0220 	bic.w	r2, r2, #32
 800b8f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68da      	ldr	r2, [r3, #12]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b904:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	695a      	ldr	r2, [r3, #20]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f022 0201 	bic.w	r2, r2, #1
 800b914:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2220      	movs	r2, #32
 800b91a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b922:	2b01      	cmp	r3, #1
 800b924:	d135      	bne.n	800b992 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	330c      	adds	r3, #12
 800b932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	e853 3f00 	ldrex	r3, [r3]
 800b93a:	613b      	str	r3, [r7, #16]
   return(result);
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	f023 0310 	bic.w	r3, r3, #16
 800b942:	627b      	str	r3, [r7, #36]	; 0x24
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	330c      	adds	r3, #12
 800b94a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b94c:	623a      	str	r2, [r7, #32]
 800b94e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b950:	69f9      	ldr	r1, [r7, #28]
 800b952:	6a3a      	ldr	r2, [r7, #32]
 800b954:	e841 2300 	strex	r3, r2, [r1]
 800b958:	61bb      	str	r3, [r7, #24]
   return(result);
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d1e5      	bne.n	800b92c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 0310 	and.w	r3, r3, #16
 800b96a:	2b10      	cmp	r3, #16
 800b96c:	d10a      	bne.n	800b984 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b96e:	2300      	movs	r3, #0
 800b970:	60fb      	str	r3, [r7, #12]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	60fb      	str	r3, [r7, #12]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	60fb      	str	r3, [r7, #12]
 800b982:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b988:	4619      	mov	r1, r3
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7ff fd9a 	bl	800b4c4 <HAL_UARTEx_RxEventCallback>
 800b990:	e002      	b.n	800b998 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f7ff fd82 	bl	800b49c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b998:	2300      	movs	r3, #0
 800b99a:	e002      	b.n	800b9a2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b99c:	2300      	movs	r3, #0
 800b99e:	e000      	b.n	800b9a2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b9a0:	2302      	movs	r3, #2
  }
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3730      	adds	r7, #48	; 0x30
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
	...

0800b9ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9b0:	b0c0      	sub	sp, #256	; 0x100
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b9c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9c8:	68d9      	ldr	r1, [r3, #12]
 800b9ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	ea40 0301 	orr.w	r3, r0, r1
 800b9d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b9d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9da:	689a      	ldr	r2, [r3, #8]
 800b9dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	431a      	orrs	r2, r3
 800b9e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9e8:	695b      	ldr	r3, [r3, #20]
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9f0:	69db      	ldr	r3, [r3, #28]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b9f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ba04:	f021 010c 	bic.w	r1, r1, #12
 800ba08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba12:	430b      	orrs	r3, r1
 800ba14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ba16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ba22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba26:	6999      	ldr	r1, [r3, #24]
 800ba28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	ea40 0301 	orr.w	r3, r0, r1
 800ba32:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800ba34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	4b95      	ldr	r3, [pc, #596]	; (800bc90 <UART_SetConfig+0x2e4>)
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d011      	beq.n	800ba64 <UART_SetConfig+0xb8>
 800ba40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	4b93      	ldr	r3, [pc, #588]	; (800bc94 <UART_SetConfig+0x2e8>)
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d00b      	beq.n	800ba64 <UART_SetConfig+0xb8>
 800ba4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	4b91      	ldr	r3, [pc, #580]	; (800bc98 <UART_SetConfig+0x2ec>)
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d005      	beq.n	800ba64 <UART_SetConfig+0xb8>
 800ba58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	4b8f      	ldr	r3, [pc, #572]	; (800bc9c <UART_SetConfig+0x2f0>)
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d104      	bne.n	800ba6e <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ba64:	f7fd f932 	bl	8008ccc <HAL_RCC_GetPCLK2Freq>
 800ba68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ba6c:	e003      	b.n	800ba76 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ba6e:	f7fd f919 	bl	8008ca4 <HAL_RCC_GetPCLK1Freq>
 800ba72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba7a:	69db      	ldr	r3, [r3, #28]
 800ba7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba80:	f040 8110 	bne.w	800bca4 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ba84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ba8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ba92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ba96:	4622      	mov	r2, r4
 800ba98:	462b      	mov	r3, r5
 800ba9a:	1891      	adds	r1, r2, r2
 800ba9c:	65b9      	str	r1, [r7, #88]	; 0x58
 800ba9e:	415b      	adcs	r3, r3
 800baa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800baa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800baa6:	4621      	mov	r1, r4
 800baa8:	eb12 0801 	adds.w	r8, r2, r1
 800baac:	4629      	mov	r1, r5
 800baae:	eb43 0901 	adc.w	r9, r3, r1
 800bab2:	f04f 0200 	mov.w	r2, #0
 800bab6:	f04f 0300 	mov.w	r3, #0
 800baba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800babe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bac6:	4690      	mov	r8, r2
 800bac8:	4699      	mov	r9, r3
 800baca:	4623      	mov	r3, r4
 800bacc:	eb18 0303 	adds.w	r3, r8, r3
 800bad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bad4:	462b      	mov	r3, r5
 800bad6:	eb49 0303 	adc.w	r3, r9, r3
 800bada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800baea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800baee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800baf2:	460b      	mov	r3, r1
 800baf4:	18db      	adds	r3, r3, r3
 800baf6:	653b      	str	r3, [r7, #80]	; 0x50
 800baf8:	4613      	mov	r3, r2
 800bafa:	eb42 0303 	adc.w	r3, r2, r3
 800bafe:	657b      	str	r3, [r7, #84]	; 0x54
 800bb00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bb04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bb08:	f7f5 f8c6 	bl	8000c98 <__aeabi_uldivmod>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	460b      	mov	r3, r1
 800bb10:	4b63      	ldr	r3, [pc, #396]	; (800bca0 <UART_SetConfig+0x2f4>)
 800bb12:	fba3 2302 	umull	r2, r3, r3, r2
 800bb16:	095b      	lsrs	r3, r3, #5
 800bb18:	011c      	lsls	r4, r3, #4
 800bb1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bb28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bb2c:	4642      	mov	r2, r8
 800bb2e:	464b      	mov	r3, r9
 800bb30:	1891      	adds	r1, r2, r2
 800bb32:	64b9      	str	r1, [r7, #72]	; 0x48
 800bb34:	415b      	adcs	r3, r3
 800bb36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bb3c:	4641      	mov	r1, r8
 800bb3e:	eb12 0a01 	adds.w	sl, r2, r1
 800bb42:	4649      	mov	r1, r9
 800bb44:	eb43 0b01 	adc.w	fp, r3, r1
 800bb48:	f04f 0200 	mov.w	r2, #0
 800bb4c:	f04f 0300 	mov.w	r3, #0
 800bb50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bb54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bb58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bb5c:	4692      	mov	sl, r2
 800bb5e:	469b      	mov	fp, r3
 800bb60:	4643      	mov	r3, r8
 800bb62:	eb1a 0303 	adds.w	r3, sl, r3
 800bb66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb6a:	464b      	mov	r3, r9
 800bb6c:	eb4b 0303 	adc.w	r3, fp, r3
 800bb70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bb74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bb84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	18db      	adds	r3, r3, r3
 800bb8c:	643b      	str	r3, [r7, #64]	; 0x40
 800bb8e:	4613      	mov	r3, r2
 800bb90:	eb42 0303 	adc.w	r3, r2, r3
 800bb94:	647b      	str	r3, [r7, #68]	; 0x44
 800bb96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bb9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bb9e:	f7f5 f87b 	bl	8000c98 <__aeabi_uldivmod>
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	4611      	mov	r1, r2
 800bba8:	4b3d      	ldr	r3, [pc, #244]	; (800bca0 <UART_SetConfig+0x2f4>)
 800bbaa:	fba3 2301 	umull	r2, r3, r3, r1
 800bbae:	095b      	lsrs	r3, r3, #5
 800bbb0:	2264      	movs	r2, #100	; 0x64
 800bbb2:	fb02 f303 	mul.w	r3, r2, r3
 800bbb6:	1acb      	subs	r3, r1, r3
 800bbb8:	00db      	lsls	r3, r3, #3
 800bbba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bbbe:	4b38      	ldr	r3, [pc, #224]	; (800bca0 <UART_SetConfig+0x2f4>)
 800bbc0:	fba3 2302 	umull	r2, r3, r3, r2
 800bbc4:	095b      	lsrs	r3, r3, #5
 800bbc6:	005b      	lsls	r3, r3, #1
 800bbc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bbcc:	441c      	add	r4, r3
 800bbce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bbd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bbdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bbe0:	4642      	mov	r2, r8
 800bbe2:	464b      	mov	r3, r9
 800bbe4:	1891      	adds	r1, r2, r2
 800bbe6:	63b9      	str	r1, [r7, #56]	; 0x38
 800bbe8:	415b      	adcs	r3, r3
 800bbea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bbf0:	4641      	mov	r1, r8
 800bbf2:	1851      	adds	r1, r2, r1
 800bbf4:	6339      	str	r1, [r7, #48]	; 0x30
 800bbf6:	4649      	mov	r1, r9
 800bbf8:	414b      	adcs	r3, r1
 800bbfa:	637b      	str	r3, [r7, #52]	; 0x34
 800bbfc:	f04f 0200 	mov.w	r2, #0
 800bc00:	f04f 0300 	mov.w	r3, #0
 800bc04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bc08:	4659      	mov	r1, fp
 800bc0a:	00cb      	lsls	r3, r1, #3
 800bc0c:	4651      	mov	r1, sl
 800bc0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc12:	4651      	mov	r1, sl
 800bc14:	00ca      	lsls	r2, r1, #3
 800bc16:	4610      	mov	r0, r2
 800bc18:	4619      	mov	r1, r3
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	4642      	mov	r2, r8
 800bc1e:	189b      	adds	r3, r3, r2
 800bc20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc24:	464b      	mov	r3, r9
 800bc26:	460a      	mov	r2, r1
 800bc28:	eb42 0303 	adc.w	r3, r2, r3
 800bc2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bc3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bc40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bc44:	460b      	mov	r3, r1
 800bc46:	18db      	adds	r3, r3, r3
 800bc48:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	eb42 0303 	adc.w	r3, r2, r3
 800bc50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bc56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bc5a:	f7f5 f81d 	bl	8000c98 <__aeabi_uldivmod>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	460b      	mov	r3, r1
 800bc62:	4b0f      	ldr	r3, [pc, #60]	; (800bca0 <UART_SetConfig+0x2f4>)
 800bc64:	fba3 1302 	umull	r1, r3, r3, r2
 800bc68:	095b      	lsrs	r3, r3, #5
 800bc6a:	2164      	movs	r1, #100	; 0x64
 800bc6c:	fb01 f303 	mul.w	r3, r1, r3
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	00db      	lsls	r3, r3, #3
 800bc74:	3332      	adds	r3, #50	; 0x32
 800bc76:	4a0a      	ldr	r2, [pc, #40]	; (800bca0 <UART_SetConfig+0x2f4>)
 800bc78:	fba2 2303 	umull	r2, r3, r2, r3
 800bc7c:	095b      	lsrs	r3, r3, #5
 800bc7e:	f003 0207 	and.w	r2, r3, #7
 800bc82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4422      	add	r2, r4
 800bc8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bc8c:	e109      	b.n	800bea2 <UART_SetConfig+0x4f6>
 800bc8e:	bf00      	nop
 800bc90:	40011000 	.word	0x40011000
 800bc94:	40011400 	.word	0x40011400
 800bc98:	40011800 	.word	0x40011800
 800bc9c:	40011c00 	.word	0x40011c00
 800bca0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bcae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bcb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bcb6:	4642      	mov	r2, r8
 800bcb8:	464b      	mov	r3, r9
 800bcba:	1891      	adds	r1, r2, r2
 800bcbc:	6239      	str	r1, [r7, #32]
 800bcbe:	415b      	adcs	r3, r3
 800bcc0:	627b      	str	r3, [r7, #36]	; 0x24
 800bcc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bcc6:	4641      	mov	r1, r8
 800bcc8:	1854      	adds	r4, r2, r1
 800bcca:	4649      	mov	r1, r9
 800bccc:	eb43 0501 	adc.w	r5, r3, r1
 800bcd0:	f04f 0200 	mov.w	r2, #0
 800bcd4:	f04f 0300 	mov.w	r3, #0
 800bcd8:	00eb      	lsls	r3, r5, #3
 800bcda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bcde:	00e2      	lsls	r2, r4, #3
 800bce0:	4614      	mov	r4, r2
 800bce2:	461d      	mov	r5, r3
 800bce4:	4643      	mov	r3, r8
 800bce6:	18e3      	adds	r3, r4, r3
 800bce8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bcec:	464b      	mov	r3, r9
 800bcee:	eb45 0303 	adc.w	r3, r5, r3
 800bcf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bcf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bd06:	f04f 0200 	mov.w	r2, #0
 800bd0a:	f04f 0300 	mov.w	r3, #0
 800bd0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bd12:	4629      	mov	r1, r5
 800bd14:	008b      	lsls	r3, r1, #2
 800bd16:	4621      	mov	r1, r4
 800bd18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd1c:	4621      	mov	r1, r4
 800bd1e:	008a      	lsls	r2, r1, #2
 800bd20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bd24:	f7f4 ffb8 	bl	8000c98 <__aeabi_uldivmod>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	4b60      	ldr	r3, [pc, #384]	; (800beb0 <UART_SetConfig+0x504>)
 800bd2e:	fba3 2302 	umull	r2, r3, r3, r2
 800bd32:	095b      	lsrs	r3, r3, #5
 800bd34:	011c      	lsls	r4, r3, #4
 800bd36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bd40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bd44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bd48:	4642      	mov	r2, r8
 800bd4a:	464b      	mov	r3, r9
 800bd4c:	1891      	adds	r1, r2, r2
 800bd4e:	61b9      	str	r1, [r7, #24]
 800bd50:	415b      	adcs	r3, r3
 800bd52:	61fb      	str	r3, [r7, #28]
 800bd54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bd58:	4641      	mov	r1, r8
 800bd5a:	1851      	adds	r1, r2, r1
 800bd5c:	6139      	str	r1, [r7, #16]
 800bd5e:	4649      	mov	r1, r9
 800bd60:	414b      	adcs	r3, r1
 800bd62:	617b      	str	r3, [r7, #20]
 800bd64:	f04f 0200 	mov.w	r2, #0
 800bd68:	f04f 0300 	mov.w	r3, #0
 800bd6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bd70:	4659      	mov	r1, fp
 800bd72:	00cb      	lsls	r3, r1, #3
 800bd74:	4651      	mov	r1, sl
 800bd76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd7a:	4651      	mov	r1, sl
 800bd7c:	00ca      	lsls	r2, r1, #3
 800bd7e:	4610      	mov	r0, r2
 800bd80:	4619      	mov	r1, r3
 800bd82:	4603      	mov	r3, r0
 800bd84:	4642      	mov	r2, r8
 800bd86:	189b      	adds	r3, r3, r2
 800bd88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd8c:	464b      	mov	r3, r9
 800bd8e:	460a      	mov	r2, r1
 800bd90:	eb42 0303 	adc.w	r3, r2, r3
 800bd94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	67bb      	str	r3, [r7, #120]	; 0x78
 800bda2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bda4:	f04f 0200 	mov.w	r2, #0
 800bda8:	f04f 0300 	mov.w	r3, #0
 800bdac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bdb0:	4649      	mov	r1, r9
 800bdb2:	008b      	lsls	r3, r1, #2
 800bdb4:	4641      	mov	r1, r8
 800bdb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bdba:	4641      	mov	r1, r8
 800bdbc:	008a      	lsls	r2, r1, #2
 800bdbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bdc2:	f7f4 ff69 	bl	8000c98 <__aeabi_uldivmod>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	4b39      	ldr	r3, [pc, #228]	; (800beb0 <UART_SetConfig+0x504>)
 800bdcc:	fba3 1302 	umull	r1, r3, r3, r2
 800bdd0:	095b      	lsrs	r3, r3, #5
 800bdd2:	2164      	movs	r1, #100	; 0x64
 800bdd4:	fb01 f303 	mul.w	r3, r1, r3
 800bdd8:	1ad3      	subs	r3, r2, r3
 800bdda:	011b      	lsls	r3, r3, #4
 800bddc:	3332      	adds	r3, #50	; 0x32
 800bdde:	4a34      	ldr	r2, [pc, #208]	; (800beb0 <UART_SetConfig+0x504>)
 800bde0:	fba2 2303 	umull	r2, r3, r2, r3
 800bde4:	095b      	lsrs	r3, r3, #5
 800bde6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdea:	441c      	add	r4, r3
 800bdec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	673b      	str	r3, [r7, #112]	; 0x70
 800bdf4:	677a      	str	r2, [r7, #116]	; 0x74
 800bdf6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bdfa:	4642      	mov	r2, r8
 800bdfc:	464b      	mov	r3, r9
 800bdfe:	1891      	adds	r1, r2, r2
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	415b      	adcs	r3, r3
 800be04:	60fb      	str	r3, [r7, #12]
 800be06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800be0a:	4641      	mov	r1, r8
 800be0c:	1851      	adds	r1, r2, r1
 800be0e:	6039      	str	r1, [r7, #0]
 800be10:	4649      	mov	r1, r9
 800be12:	414b      	adcs	r3, r1
 800be14:	607b      	str	r3, [r7, #4]
 800be16:	f04f 0200 	mov.w	r2, #0
 800be1a:	f04f 0300 	mov.w	r3, #0
 800be1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800be22:	4659      	mov	r1, fp
 800be24:	00cb      	lsls	r3, r1, #3
 800be26:	4651      	mov	r1, sl
 800be28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be2c:	4651      	mov	r1, sl
 800be2e:	00ca      	lsls	r2, r1, #3
 800be30:	4610      	mov	r0, r2
 800be32:	4619      	mov	r1, r3
 800be34:	4603      	mov	r3, r0
 800be36:	4642      	mov	r2, r8
 800be38:	189b      	adds	r3, r3, r2
 800be3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800be3c:	464b      	mov	r3, r9
 800be3e:	460a      	mov	r2, r1
 800be40:	eb42 0303 	adc.w	r3, r2, r3
 800be44:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	663b      	str	r3, [r7, #96]	; 0x60
 800be50:	667a      	str	r2, [r7, #100]	; 0x64
 800be52:	f04f 0200 	mov.w	r2, #0
 800be56:	f04f 0300 	mov.w	r3, #0
 800be5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800be5e:	4649      	mov	r1, r9
 800be60:	008b      	lsls	r3, r1, #2
 800be62:	4641      	mov	r1, r8
 800be64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800be68:	4641      	mov	r1, r8
 800be6a:	008a      	lsls	r2, r1, #2
 800be6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800be70:	f7f4 ff12 	bl	8000c98 <__aeabi_uldivmod>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	4b0d      	ldr	r3, [pc, #52]	; (800beb0 <UART_SetConfig+0x504>)
 800be7a:	fba3 1302 	umull	r1, r3, r3, r2
 800be7e:	095b      	lsrs	r3, r3, #5
 800be80:	2164      	movs	r1, #100	; 0x64
 800be82:	fb01 f303 	mul.w	r3, r1, r3
 800be86:	1ad3      	subs	r3, r2, r3
 800be88:	011b      	lsls	r3, r3, #4
 800be8a:	3332      	adds	r3, #50	; 0x32
 800be8c:	4a08      	ldr	r2, [pc, #32]	; (800beb0 <UART_SetConfig+0x504>)
 800be8e:	fba2 2303 	umull	r2, r3, r2, r3
 800be92:	095b      	lsrs	r3, r3, #5
 800be94:	f003 020f 	and.w	r2, r3, #15
 800be98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4422      	add	r2, r4
 800bea0:	609a      	str	r2, [r3, #8]
}
 800bea2:	bf00      	nop
 800bea4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bea8:	46bd      	mov	sp, r7
 800beaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800beae:	bf00      	nop
 800beb0:	51eb851f 	.word	0x51eb851f

0800beb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800beb4:	b084      	sub	sp, #16
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b084      	sub	sp, #16
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
 800bebe:	f107 001c 	add.w	r0, r7, #28
 800bec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d122      	bne.n	800bf12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d105      	bne.n	800bf06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 fa9c 	bl	800c444 <USB_CoreReset>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73fb      	strb	r3, [r7, #15]
 800bf10:	e01a      	b.n	800bf48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fa90 	bl	800c444 <USB_CoreReset>
 800bf24:	4603      	mov	r3, r0
 800bf26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bf28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d106      	bne.n	800bf3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	639a      	str	r2, [r3, #56]	; 0x38
 800bf3a:	e005      	b.n	800bf48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d10b      	bne.n	800bf66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	f043 0206 	orr.w	r2, r3, #6
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	f043 0220 	orr.w	r2, r3, #32
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bf66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf72:	b004      	add	sp, #16
 800bf74:	4770      	bx	lr

0800bf76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf76:	b480      	push	{r7}
 800bf78:	b083      	sub	sp, #12
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	f023 0201 	bic.w	r2, r3, #1
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bfb4:	78fb      	ldrb	r3, [r7, #3]
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d115      	bne.n	800bfe6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bfc6:	2001      	movs	r0, #1
 800bfc8:	f7fb fc46 	bl	8007858 <HAL_Delay>
      ms++;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 fa28 	bl	800c428 <USB_GetMode>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d01e      	beq.n	800c01c <USB_SetCurrentMode+0x84>
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2b31      	cmp	r3, #49	; 0x31
 800bfe2:	d9f0      	bls.n	800bfc6 <USB_SetCurrentMode+0x2e>
 800bfe4:	e01a      	b.n	800c01c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bfe6:	78fb      	ldrb	r3, [r7, #3]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d115      	bne.n	800c018 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bff8:	2001      	movs	r0, #1
 800bffa:	f7fb fc2d 	bl	8007858 <HAL_Delay>
      ms++;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	3301      	adds	r3, #1
 800c002:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fa0f 	bl	800c428 <USB_GetMode>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d005      	beq.n	800c01c <USB_SetCurrentMode+0x84>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2b31      	cmp	r3, #49	; 0x31
 800c014:	d9f0      	bls.n	800bff8 <USB_SetCurrentMode+0x60>
 800c016:	e001      	b.n	800c01c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c018:	2301      	movs	r3, #1
 800c01a:	e005      	b.n	800c028 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2b32      	cmp	r3, #50	; 0x32
 800c020:	d101      	bne.n	800c026 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c022:	2301      	movs	r3, #1
 800c024:	e000      	b.n	800c028 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c026:	2300      	movs	r3, #0
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c030:	b084      	sub	sp, #16
 800c032:	b580      	push	{r7, lr}
 800c034:	b086      	sub	sp, #24
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c03e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c042:	2300      	movs	r3, #0
 800c044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c04a:	2300      	movs	r3, #0
 800c04c:	613b      	str	r3, [r7, #16]
 800c04e:	e009      	b.n	800c064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	3340      	adds	r3, #64	; 0x40
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4413      	add	r3, r2
 800c05a:	2200      	movs	r2, #0
 800c05c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	3301      	adds	r3, #1
 800c062:	613b      	str	r3, [r7, #16]
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	2b0e      	cmp	r3, #14
 800c068:	d9f2      	bls.n	800c050 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d11c      	bne.n	800c0aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c07e:	f043 0302 	orr.w	r3, r3, #2
 800c082:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c088:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	601a      	str	r2, [r3, #0]
 800c0a8:	e005      	b.n	800c0b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0bc:	461a      	mov	r2, r3
 800c0be:	2300      	movs	r3, #0
 800c0c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	680b      	ldr	r3, [r1, #0]
 800c0d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d10c      	bne.n	800c0f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d104      	bne.n	800c0ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c0e2:	2100      	movs	r1, #0
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 f965 	bl	800c3b4 <USB_SetDevSpeed>
 800c0ea:	e008      	b.n	800c0fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c0ec:	2101      	movs	r1, #1
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 f960 	bl	800c3b4 <USB_SetDevSpeed>
 800c0f4:	e003      	b.n	800c0fe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c0f6:	2103      	movs	r1, #3
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 f95b 	bl	800c3b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0fe:	2110      	movs	r1, #16
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 f8f3 	bl	800c2ec <USB_FlushTxFifo>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d001      	beq.n	800c110 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 f91f 	bl	800c354 <USB_FlushRxFifo>
 800c116:	4603      	mov	r3, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d001      	beq.n	800c120 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c11c:	2301      	movs	r3, #1
 800c11e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c126:	461a      	mov	r2, r3
 800c128:	2300      	movs	r3, #0
 800c12a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c132:	461a      	mov	r2, r3
 800c134:	2300      	movs	r3, #0
 800c136:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c13e:	461a      	mov	r2, r3
 800c140:	2300      	movs	r3, #0
 800c142:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c144:	2300      	movs	r3, #0
 800c146:	613b      	str	r3, [r7, #16]
 800c148:	e043      	b.n	800c1d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	015a      	lsls	r2, r3, #5
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	4413      	add	r3, r2
 800c152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c15c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c160:	d118      	bne.n	800c194 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d10a      	bne.n	800c17e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	015a      	lsls	r2, r3, #5
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	4413      	add	r3, r2
 800c170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c174:	461a      	mov	r2, r3
 800c176:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c17a:	6013      	str	r3, [r2, #0]
 800c17c:	e013      	b.n	800c1a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	015a      	lsls	r2, r3, #5
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	4413      	add	r3, r2
 800c186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c18a:	461a      	mov	r2, r3
 800c18c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c190:	6013      	str	r3, [r2, #0]
 800c192:	e008      	b.n	800c1a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	015a      	lsls	r2, r3, #5
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	4413      	add	r3, r2
 800c19c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	015a      	lsls	r2, r3, #5
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	015a      	lsls	r2, r3, #5
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	4413      	add	r3, r2
 800c1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c1ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	613b      	str	r3, [r7, #16]
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d4:	693a      	ldr	r2, [r7, #16]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d3b7      	bcc.n	800c14a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1da:	2300      	movs	r3, #0
 800c1dc:	613b      	str	r3, [r7, #16]
 800c1de:	e043      	b.n	800c268 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	015a      	lsls	r2, r3, #5
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1f6:	d118      	bne.n	800c22a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10a      	bne.n	800c214 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	015a      	lsls	r2, r3, #5
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	4413      	add	r3, r2
 800c206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c20a:	461a      	mov	r2, r3
 800c20c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c210:	6013      	str	r3, [r2, #0]
 800c212:	e013      	b.n	800c23c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	015a      	lsls	r2, r3, #5
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	4413      	add	r3, r2
 800c21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c220:	461a      	mov	r2, r3
 800c222:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c226:	6013      	str	r3, [r2, #0]
 800c228:	e008      	b.n	800c23c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	015a      	lsls	r2, r3, #5
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	4413      	add	r3, r2
 800c232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c236:	461a      	mov	r2, r3
 800c238:	2300      	movs	r3, #0
 800c23a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	015a      	lsls	r2, r3, #5
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	4413      	add	r3, r2
 800c244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c248:	461a      	mov	r2, r3
 800c24a:	2300      	movs	r3, #0
 800c24c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	015a      	lsls	r2, r3, #5
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	4413      	add	r3, r2
 800c256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c25a:	461a      	mov	r2, r3
 800c25c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c260:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	3301      	adds	r3, #1
 800c266:	613b      	str	r3, [r7, #16]
 800c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26a:	693a      	ldr	r2, [r7, #16]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d3b7      	bcc.n	800c1e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c276:	691b      	ldr	r3, [r3, #16]
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c27e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c282:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c290:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c294:	2b00      	cmp	r3, #0
 800c296:	d105      	bne.n	800c2a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	699b      	ldr	r3, [r3, #24]
 800c29c:	f043 0210 	orr.w	r2, r3, #16
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	699a      	ldr	r2, [r3, #24]
 800c2a8:	4b0f      	ldr	r3, [pc, #60]	; (800c2e8 <USB_DevInit+0x2b8>)
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d005      	beq.n	800c2c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	699b      	ldr	r3, [r3, #24]
 800c2ba:	f043 0208 	orr.w	r2, r3, #8
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d107      	bne.n	800c2d8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	699b      	ldr	r3, [r3, #24]
 800c2cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2d0:	f043 0304 	orr.w	r3, r3, #4
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c2d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3718      	adds	r7, #24
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2e4:	b004      	add	sp, #16
 800c2e6:	4770      	bx	lr
 800c2e8:	803c3800 	.word	0x803c3800

0800c2ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4a13      	ldr	r2, [pc, #76]	; (800c350 <USB_FlushTxFifo+0x64>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d901      	bls.n	800c30c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c308:	2303      	movs	r3, #3
 800c30a:	e01b      	b.n	800c344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	2b00      	cmp	r3, #0
 800c312:	daf2      	bge.n	800c2fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c314:	2300      	movs	r3, #0
 800c316:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	019b      	lsls	r3, r3, #6
 800c31c:	f043 0220 	orr.w	r2, r3, #32
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	3301      	adds	r3, #1
 800c328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	4a08      	ldr	r2, [pc, #32]	; (800c350 <USB_FlushTxFifo+0x64>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d901      	bls.n	800c336 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c332:	2303      	movs	r3, #3
 800c334:	e006      	b.n	800c344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	691b      	ldr	r3, [r3, #16]
 800c33a:	f003 0320 	and.w	r3, r3, #32
 800c33e:	2b20      	cmp	r3, #32
 800c340:	d0f0      	beq.n	800c324 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c342:	2300      	movs	r3, #0
}
 800c344:	4618      	mov	r0, r3
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr
 800c350:	00030d40 	.word	0x00030d40

0800c354 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c35c:	2300      	movs	r3, #0
 800c35e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3301      	adds	r3, #1
 800c364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	4a11      	ldr	r2, [pc, #68]	; (800c3b0 <USB_FlushRxFifo+0x5c>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d901      	bls.n	800c372 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c36e:	2303      	movs	r3, #3
 800c370:	e018      	b.n	800c3a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	2b00      	cmp	r3, #0
 800c378:	daf2      	bge.n	800c360 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c37a:	2300      	movs	r3, #0
 800c37c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2210      	movs	r2, #16
 800c382:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	3301      	adds	r3, #1
 800c388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	4a08      	ldr	r2, [pc, #32]	; (800c3b0 <USB_FlushRxFifo+0x5c>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d901      	bls.n	800c396 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c392:	2303      	movs	r3, #3
 800c394:	e006      	b.n	800c3a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	f003 0310 	and.w	r3, r3, #16
 800c39e:	2b10      	cmp	r3, #16
 800c3a0:	d0f0      	beq.n	800c384 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3714      	adds	r7, #20
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	00030d40 	.word	0x00030d40

0800c3b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b085      	sub	sp, #20
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	460b      	mov	r3, r1
 800c3be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	78fb      	ldrb	r3, [r7, #3]
 800c3ce:	68f9      	ldr	r1, [r7, #12]
 800c3d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3714      	adds	r7, #20
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c3e6:	b480      	push	{r7}
 800c3e8:	b085      	sub	sp, #20
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c400:	f023 0303 	bic.w	r3, r3, #3
 800c404:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c414:	f043 0302 	orr.w	r3, r3, #2
 800c418:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	695b      	ldr	r3, [r3, #20]
 800c434:	f003 0301 	and.w	r3, r3, #1
}
 800c438:	4618      	mov	r0, r3
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c44c:	2300      	movs	r3, #0
 800c44e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	3301      	adds	r3, #1
 800c454:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	4a13      	ldr	r2, [pc, #76]	; (800c4a8 <USB_CoreReset+0x64>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d901      	bls.n	800c462 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c45e:	2303      	movs	r3, #3
 800c460:	e01b      	b.n	800c49a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	daf2      	bge.n	800c450 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c46a:	2300      	movs	r3, #0
 800c46c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	691b      	ldr	r3, [r3, #16]
 800c472:	f043 0201 	orr.w	r2, r3, #1
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	3301      	adds	r3, #1
 800c47e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	4a09      	ldr	r2, [pc, #36]	; (800c4a8 <USB_CoreReset+0x64>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d901      	bls.n	800c48c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c488:	2303      	movs	r3, #3
 800c48a:	e006      	b.n	800c49a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	f003 0301 	and.w	r3, r3, #1
 800c494:	2b01      	cmp	r3, #1
 800c496:	d0f0      	beq.n	800c47a <USB_CoreReset+0x36>

  return HAL_OK;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3714      	adds	r7, #20
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr
 800c4a6:	bf00      	nop
 800c4a8:	00030d40 	.word	0x00030d40

0800c4ac <calloc>:
 800c4ac:	4b02      	ldr	r3, [pc, #8]	; (800c4b8 <calloc+0xc>)
 800c4ae:	460a      	mov	r2, r1
 800c4b0:	4601      	mov	r1, r0
 800c4b2:	6818      	ldr	r0, [r3, #0]
 800c4b4:	f000 b852 	b.w	800c55c <_calloc_r>
 800c4b8:	2000000c 	.word	0x2000000c

0800c4bc <__errno>:
 800c4bc:	4b01      	ldr	r3, [pc, #4]	; (800c4c4 <__errno+0x8>)
 800c4be:	6818      	ldr	r0, [r3, #0]
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	2000000c 	.word	0x2000000c

0800c4c8 <__libc_init_array>:
 800c4c8:	b570      	push	{r4, r5, r6, lr}
 800c4ca:	4d0d      	ldr	r5, [pc, #52]	; (800c500 <__libc_init_array+0x38>)
 800c4cc:	4c0d      	ldr	r4, [pc, #52]	; (800c504 <__libc_init_array+0x3c>)
 800c4ce:	1b64      	subs	r4, r4, r5
 800c4d0:	10a4      	asrs	r4, r4, #2
 800c4d2:	2600      	movs	r6, #0
 800c4d4:	42a6      	cmp	r6, r4
 800c4d6:	d109      	bne.n	800c4ec <__libc_init_array+0x24>
 800c4d8:	4d0b      	ldr	r5, [pc, #44]	; (800c508 <__libc_init_array+0x40>)
 800c4da:	4c0c      	ldr	r4, [pc, #48]	; (800c50c <__libc_init_array+0x44>)
 800c4dc:	f004 fc3c 	bl	8010d58 <_init>
 800c4e0:	1b64      	subs	r4, r4, r5
 800c4e2:	10a4      	asrs	r4, r4, #2
 800c4e4:	2600      	movs	r6, #0
 800c4e6:	42a6      	cmp	r6, r4
 800c4e8:	d105      	bne.n	800c4f6 <__libc_init_array+0x2e>
 800c4ea:	bd70      	pop	{r4, r5, r6, pc}
 800c4ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4f0:	4798      	blx	r3
 800c4f2:	3601      	adds	r6, #1
 800c4f4:	e7ee      	b.n	800c4d4 <__libc_init_array+0xc>
 800c4f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4fa:	4798      	blx	r3
 800c4fc:	3601      	adds	r6, #1
 800c4fe:	e7f2      	b.n	800c4e6 <__libc_init_array+0x1e>
 800c500:	080116f8 	.word	0x080116f8
 800c504:	080116f8 	.word	0x080116f8
 800c508:	080116f8 	.word	0x080116f8
 800c50c:	080116fc 	.word	0x080116fc

0800c510 <malloc>:
 800c510:	4b02      	ldr	r3, [pc, #8]	; (800c51c <malloc+0xc>)
 800c512:	4601      	mov	r1, r0
 800c514:	6818      	ldr	r0, [r3, #0]
 800c516:	f000 b8a3 	b.w	800c660 <_malloc_r>
 800c51a:	bf00      	nop
 800c51c:	2000000c 	.word	0x2000000c

0800c520 <free>:
 800c520:	4b02      	ldr	r3, [pc, #8]	; (800c52c <free+0xc>)
 800c522:	4601      	mov	r1, r0
 800c524:	6818      	ldr	r0, [r3, #0]
 800c526:	f000 b82f 	b.w	800c588 <_free_r>
 800c52a:	bf00      	nop
 800c52c:	2000000c 	.word	0x2000000c

0800c530 <memcpy>:
 800c530:	440a      	add	r2, r1
 800c532:	4291      	cmp	r1, r2
 800c534:	f100 33ff 	add.w	r3, r0, #4294967295
 800c538:	d100      	bne.n	800c53c <memcpy+0xc>
 800c53a:	4770      	bx	lr
 800c53c:	b510      	push	{r4, lr}
 800c53e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c542:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c546:	4291      	cmp	r1, r2
 800c548:	d1f9      	bne.n	800c53e <memcpy+0xe>
 800c54a:	bd10      	pop	{r4, pc}

0800c54c <memset>:
 800c54c:	4402      	add	r2, r0
 800c54e:	4603      	mov	r3, r0
 800c550:	4293      	cmp	r3, r2
 800c552:	d100      	bne.n	800c556 <memset+0xa>
 800c554:	4770      	bx	lr
 800c556:	f803 1b01 	strb.w	r1, [r3], #1
 800c55a:	e7f9      	b.n	800c550 <memset+0x4>

0800c55c <_calloc_r>:
 800c55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c55e:	fba1 2402 	umull	r2, r4, r1, r2
 800c562:	b94c      	cbnz	r4, 800c578 <_calloc_r+0x1c>
 800c564:	4611      	mov	r1, r2
 800c566:	9201      	str	r2, [sp, #4]
 800c568:	f000 f87a 	bl	800c660 <_malloc_r>
 800c56c:	9a01      	ldr	r2, [sp, #4]
 800c56e:	4605      	mov	r5, r0
 800c570:	b930      	cbnz	r0, 800c580 <_calloc_r+0x24>
 800c572:	4628      	mov	r0, r5
 800c574:	b003      	add	sp, #12
 800c576:	bd30      	pop	{r4, r5, pc}
 800c578:	220c      	movs	r2, #12
 800c57a:	6002      	str	r2, [r0, #0]
 800c57c:	2500      	movs	r5, #0
 800c57e:	e7f8      	b.n	800c572 <_calloc_r+0x16>
 800c580:	4621      	mov	r1, r4
 800c582:	f7ff ffe3 	bl	800c54c <memset>
 800c586:	e7f4      	b.n	800c572 <_calloc_r+0x16>

0800c588 <_free_r>:
 800c588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c58a:	2900      	cmp	r1, #0
 800c58c:	d044      	beq.n	800c618 <_free_r+0x90>
 800c58e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c592:	9001      	str	r0, [sp, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	f1a1 0404 	sub.w	r4, r1, #4
 800c59a:	bfb8      	it	lt
 800c59c:	18e4      	addlt	r4, r4, r3
 800c59e:	f001 ff53 	bl	800e448 <__malloc_lock>
 800c5a2:	4a1e      	ldr	r2, [pc, #120]	; (800c61c <_free_r+0x94>)
 800c5a4:	9801      	ldr	r0, [sp, #4]
 800c5a6:	6813      	ldr	r3, [r2, #0]
 800c5a8:	b933      	cbnz	r3, 800c5b8 <_free_r+0x30>
 800c5aa:	6063      	str	r3, [r4, #4]
 800c5ac:	6014      	str	r4, [r2, #0]
 800c5ae:	b003      	add	sp, #12
 800c5b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5b4:	f001 bf4e 	b.w	800e454 <__malloc_unlock>
 800c5b8:	42a3      	cmp	r3, r4
 800c5ba:	d908      	bls.n	800c5ce <_free_r+0x46>
 800c5bc:	6825      	ldr	r5, [r4, #0]
 800c5be:	1961      	adds	r1, r4, r5
 800c5c0:	428b      	cmp	r3, r1
 800c5c2:	bf01      	itttt	eq
 800c5c4:	6819      	ldreq	r1, [r3, #0]
 800c5c6:	685b      	ldreq	r3, [r3, #4]
 800c5c8:	1949      	addeq	r1, r1, r5
 800c5ca:	6021      	streq	r1, [r4, #0]
 800c5cc:	e7ed      	b.n	800c5aa <_free_r+0x22>
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	b10b      	cbz	r3, 800c5d8 <_free_r+0x50>
 800c5d4:	42a3      	cmp	r3, r4
 800c5d6:	d9fa      	bls.n	800c5ce <_free_r+0x46>
 800c5d8:	6811      	ldr	r1, [r2, #0]
 800c5da:	1855      	adds	r5, r2, r1
 800c5dc:	42a5      	cmp	r5, r4
 800c5de:	d10b      	bne.n	800c5f8 <_free_r+0x70>
 800c5e0:	6824      	ldr	r4, [r4, #0]
 800c5e2:	4421      	add	r1, r4
 800c5e4:	1854      	adds	r4, r2, r1
 800c5e6:	42a3      	cmp	r3, r4
 800c5e8:	6011      	str	r1, [r2, #0]
 800c5ea:	d1e0      	bne.n	800c5ae <_free_r+0x26>
 800c5ec:	681c      	ldr	r4, [r3, #0]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	6053      	str	r3, [r2, #4]
 800c5f2:	4421      	add	r1, r4
 800c5f4:	6011      	str	r1, [r2, #0]
 800c5f6:	e7da      	b.n	800c5ae <_free_r+0x26>
 800c5f8:	d902      	bls.n	800c600 <_free_r+0x78>
 800c5fa:	230c      	movs	r3, #12
 800c5fc:	6003      	str	r3, [r0, #0]
 800c5fe:	e7d6      	b.n	800c5ae <_free_r+0x26>
 800c600:	6825      	ldr	r5, [r4, #0]
 800c602:	1961      	adds	r1, r4, r5
 800c604:	428b      	cmp	r3, r1
 800c606:	bf04      	itt	eq
 800c608:	6819      	ldreq	r1, [r3, #0]
 800c60a:	685b      	ldreq	r3, [r3, #4]
 800c60c:	6063      	str	r3, [r4, #4]
 800c60e:	bf04      	itt	eq
 800c610:	1949      	addeq	r1, r1, r5
 800c612:	6021      	streq	r1, [r4, #0]
 800c614:	6054      	str	r4, [r2, #4]
 800c616:	e7ca      	b.n	800c5ae <_free_r+0x26>
 800c618:	b003      	add	sp, #12
 800c61a:	bd30      	pop	{r4, r5, pc}
 800c61c:	20005248 	.word	0x20005248

0800c620 <sbrk_aligned>:
 800c620:	b570      	push	{r4, r5, r6, lr}
 800c622:	4e0e      	ldr	r6, [pc, #56]	; (800c65c <sbrk_aligned+0x3c>)
 800c624:	460c      	mov	r4, r1
 800c626:	6831      	ldr	r1, [r6, #0]
 800c628:	4605      	mov	r5, r0
 800c62a:	b911      	cbnz	r1, 800c632 <sbrk_aligned+0x12>
 800c62c:	f000 fd4c 	bl	800d0c8 <_sbrk_r>
 800c630:	6030      	str	r0, [r6, #0]
 800c632:	4621      	mov	r1, r4
 800c634:	4628      	mov	r0, r5
 800c636:	f000 fd47 	bl	800d0c8 <_sbrk_r>
 800c63a:	1c43      	adds	r3, r0, #1
 800c63c:	d00a      	beq.n	800c654 <sbrk_aligned+0x34>
 800c63e:	1cc4      	adds	r4, r0, #3
 800c640:	f024 0403 	bic.w	r4, r4, #3
 800c644:	42a0      	cmp	r0, r4
 800c646:	d007      	beq.n	800c658 <sbrk_aligned+0x38>
 800c648:	1a21      	subs	r1, r4, r0
 800c64a:	4628      	mov	r0, r5
 800c64c:	f000 fd3c 	bl	800d0c8 <_sbrk_r>
 800c650:	3001      	adds	r0, #1
 800c652:	d101      	bne.n	800c658 <sbrk_aligned+0x38>
 800c654:	f04f 34ff 	mov.w	r4, #4294967295
 800c658:	4620      	mov	r0, r4
 800c65a:	bd70      	pop	{r4, r5, r6, pc}
 800c65c:	2000524c 	.word	0x2000524c

0800c660 <_malloc_r>:
 800c660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c664:	1ccd      	adds	r5, r1, #3
 800c666:	f025 0503 	bic.w	r5, r5, #3
 800c66a:	3508      	adds	r5, #8
 800c66c:	2d0c      	cmp	r5, #12
 800c66e:	bf38      	it	cc
 800c670:	250c      	movcc	r5, #12
 800c672:	2d00      	cmp	r5, #0
 800c674:	4607      	mov	r7, r0
 800c676:	db01      	blt.n	800c67c <_malloc_r+0x1c>
 800c678:	42a9      	cmp	r1, r5
 800c67a:	d905      	bls.n	800c688 <_malloc_r+0x28>
 800c67c:	230c      	movs	r3, #12
 800c67e:	603b      	str	r3, [r7, #0]
 800c680:	2600      	movs	r6, #0
 800c682:	4630      	mov	r0, r6
 800c684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c688:	4e2e      	ldr	r6, [pc, #184]	; (800c744 <_malloc_r+0xe4>)
 800c68a:	f001 fedd 	bl	800e448 <__malloc_lock>
 800c68e:	6833      	ldr	r3, [r6, #0]
 800c690:	461c      	mov	r4, r3
 800c692:	bb34      	cbnz	r4, 800c6e2 <_malloc_r+0x82>
 800c694:	4629      	mov	r1, r5
 800c696:	4638      	mov	r0, r7
 800c698:	f7ff ffc2 	bl	800c620 <sbrk_aligned>
 800c69c:	1c43      	adds	r3, r0, #1
 800c69e:	4604      	mov	r4, r0
 800c6a0:	d14d      	bne.n	800c73e <_malloc_r+0xde>
 800c6a2:	6834      	ldr	r4, [r6, #0]
 800c6a4:	4626      	mov	r6, r4
 800c6a6:	2e00      	cmp	r6, #0
 800c6a8:	d140      	bne.n	800c72c <_malloc_r+0xcc>
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	4631      	mov	r1, r6
 800c6ae:	4638      	mov	r0, r7
 800c6b0:	eb04 0803 	add.w	r8, r4, r3
 800c6b4:	f000 fd08 	bl	800d0c8 <_sbrk_r>
 800c6b8:	4580      	cmp	r8, r0
 800c6ba:	d13a      	bne.n	800c732 <_malloc_r+0xd2>
 800c6bc:	6821      	ldr	r1, [r4, #0]
 800c6be:	3503      	adds	r5, #3
 800c6c0:	1a6d      	subs	r5, r5, r1
 800c6c2:	f025 0503 	bic.w	r5, r5, #3
 800c6c6:	3508      	adds	r5, #8
 800c6c8:	2d0c      	cmp	r5, #12
 800c6ca:	bf38      	it	cc
 800c6cc:	250c      	movcc	r5, #12
 800c6ce:	4629      	mov	r1, r5
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	f7ff ffa5 	bl	800c620 <sbrk_aligned>
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	d02b      	beq.n	800c732 <_malloc_r+0xd2>
 800c6da:	6823      	ldr	r3, [r4, #0]
 800c6dc:	442b      	add	r3, r5
 800c6de:	6023      	str	r3, [r4, #0]
 800c6e0:	e00e      	b.n	800c700 <_malloc_r+0xa0>
 800c6e2:	6822      	ldr	r2, [r4, #0]
 800c6e4:	1b52      	subs	r2, r2, r5
 800c6e6:	d41e      	bmi.n	800c726 <_malloc_r+0xc6>
 800c6e8:	2a0b      	cmp	r2, #11
 800c6ea:	d916      	bls.n	800c71a <_malloc_r+0xba>
 800c6ec:	1961      	adds	r1, r4, r5
 800c6ee:	42a3      	cmp	r3, r4
 800c6f0:	6025      	str	r5, [r4, #0]
 800c6f2:	bf18      	it	ne
 800c6f4:	6059      	strne	r1, [r3, #4]
 800c6f6:	6863      	ldr	r3, [r4, #4]
 800c6f8:	bf08      	it	eq
 800c6fa:	6031      	streq	r1, [r6, #0]
 800c6fc:	5162      	str	r2, [r4, r5]
 800c6fe:	604b      	str	r3, [r1, #4]
 800c700:	4638      	mov	r0, r7
 800c702:	f104 060b 	add.w	r6, r4, #11
 800c706:	f001 fea5 	bl	800e454 <__malloc_unlock>
 800c70a:	f026 0607 	bic.w	r6, r6, #7
 800c70e:	1d23      	adds	r3, r4, #4
 800c710:	1af2      	subs	r2, r6, r3
 800c712:	d0b6      	beq.n	800c682 <_malloc_r+0x22>
 800c714:	1b9b      	subs	r3, r3, r6
 800c716:	50a3      	str	r3, [r4, r2]
 800c718:	e7b3      	b.n	800c682 <_malloc_r+0x22>
 800c71a:	6862      	ldr	r2, [r4, #4]
 800c71c:	42a3      	cmp	r3, r4
 800c71e:	bf0c      	ite	eq
 800c720:	6032      	streq	r2, [r6, #0]
 800c722:	605a      	strne	r2, [r3, #4]
 800c724:	e7ec      	b.n	800c700 <_malloc_r+0xa0>
 800c726:	4623      	mov	r3, r4
 800c728:	6864      	ldr	r4, [r4, #4]
 800c72a:	e7b2      	b.n	800c692 <_malloc_r+0x32>
 800c72c:	4634      	mov	r4, r6
 800c72e:	6876      	ldr	r6, [r6, #4]
 800c730:	e7b9      	b.n	800c6a6 <_malloc_r+0x46>
 800c732:	230c      	movs	r3, #12
 800c734:	603b      	str	r3, [r7, #0]
 800c736:	4638      	mov	r0, r7
 800c738:	f001 fe8c 	bl	800e454 <__malloc_unlock>
 800c73c:	e7a1      	b.n	800c682 <_malloc_r+0x22>
 800c73e:	6025      	str	r5, [r4, #0]
 800c740:	e7de      	b.n	800c700 <_malloc_r+0xa0>
 800c742:	bf00      	nop
 800c744:	20005248 	.word	0x20005248

0800c748 <__cvt>:
 800c748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c74c:	ec55 4b10 	vmov	r4, r5, d0
 800c750:	2d00      	cmp	r5, #0
 800c752:	460e      	mov	r6, r1
 800c754:	4619      	mov	r1, r3
 800c756:	462b      	mov	r3, r5
 800c758:	bfbb      	ittet	lt
 800c75a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c75e:	461d      	movlt	r5, r3
 800c760:	2300      	movge	r3, #0
 800c762:	232d      	movlt	r3, #45	; 0x2d
 800c764:	700b      	strb	r3, [r1, #0]
 800c766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c768:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c76c:	4691      	mov	r9, r2
 800c76e:	f023 0820 	bic.w	r8, r3, #32
 800c772:	bfbc      	itt	lt
 800c774:	4622      	movlt	r2, r4
 800c776:	4614      	movlt	r4, r2
 800c778:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c77c:	d005      	beq.n	800c78a <__cvt+0x42>
 800c77e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c782:	d100      	bne.n	800c786 <__cvt+0x3e>
 800c784:	3601      	adds	r6, #1
 800c786:	2102      	movs	r1, #2
 800c788:	e000      	b.n	800c78c <__cvt+0x44>
 800c78a:	2103      	movs	r1, #3
 800c78c:	ab03      	add	r3, sp, #12
 800c78e:	9301      	str	r3, [sp, #4]
 800c790:	ab02      	add	r3, sp, #8
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	ec45 4b10 	vmov	d0, r4, r5
 800c798:	4653      	mov	r3, sl
 800c79a:	4632      	mov	r2, r6
 800c79c:	f000 fe30 	bl	800d400 <_dtoa_r>
 800c7a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c7a4:	4607      	mov	r7, r0
 800c7a6:	d102      	bne.n	800c7ae <__cvt+0x66>
 800c7a8:	f019 0f01 	tst.w	r9, #1
 800c7ac:	d022      	beq.n	800c7f4 <__cvt+0xac>
 800c7ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c7b2:	eb07 0906 	add.w	r9, r7, r6
 800c7b6:	d110      	bne.n	800c7da <__cvt+0x92>
 800c7b8:	783b      	ldrb	r3, [r7, #0]
 800c7ba:	2b30      	cmp	r3, #48	; 0x30
 800c7bc:	d10a      	bne.n	800c7d4 <__cvt+0x8c>
 800c7be:	2200      	movs	r2, #0
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	f7f4 f9a7 	bl	8000b18 <__aeabi_dcmpeq>
 800c7ca:	b918      	cbnz	r0, 800c7d4 <__cvt+0x8c>
 800c7cc:	f1c6 0601 	rsb	r6, r6, #1
 800c7d0:	f8ca 6000 	str.w	r6, [sl]
 800c7d4:	f8da 3000 	ldr.w	r3, [sl]
 800c7d8:	4499      	add	r9, r3
 800c7da:	2200      	movs	r2, #0
 800c7dc:	2300      	movs	r3, #0
 800c7de:	4620      	mov	r0, r4
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	f7f4 f999 	bl	8000b18 <__aeabi_dcmpeq>
 800c7e6:	b108      	cbz	r0, 800c7ec <__cvt+0xa4>
 800c7e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800c7ec:	2230      	movs	r2, #48	; 0x30
 800c7ee:	9b03      	ldr	r3, [sp, #12]
 800c7f0:	454b      	cmp	r3, r9
 800c7f2:	d307      	bcc.n	800c804 <__cvt+0xbc>
 800c7f4:	9b03      	ldr	r3, [sp, #12]
 800c7f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7f8:	1bdb      	subs	r3, r3, r7
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	6013      	str	r3, [r2, #0]
 800c7fe:	b004      	add	sp, #16
 800c800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c804:	1c59      	adds	r1, r3, #1
 800c806:	9103      	str	r1, [sp, #12]
 800c808:	701a      	strb	r2, [r3, #0]
 800c80a:	e7f0      	b.n	800c7ee <__cvt+0xa6>

0800c80c <__exponent>:
 800c80c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c80e:	4603      	mov	r3, r0
 800c810:	2900      	cmp	r1, #0
 800c812:	bfb8      	it	lt
 800c814:	4249      	neglt	r1, r1
 800c816:	f803 2b02 	strb.w	r2, [r3], #2
 800c81a:	bfb4      	ite	lt
 800c81c:	222d      	movlt	r2, #45	; 0x2d
 800c81e:	222b      	movge	r2, #43	; 0x2b
 800c820:	2909      	cmp	r1, #9
 800c822:	7042      	strb	r2, [r0, #1]
 800c824:	dd2a      	ble.n	800c87c <__exponent+0x70>
 800c826:	f10d 0407 	add.w	r4, sp, #7
 800c82a:	46a4      	mov	ip, r4
 800c82c:	270a      	movs	r7, #10
 800c82e:	46a6      	mov	lr, r4
 800c830:	460a      	mov	r2, r1
 800c832:	fb91 f6f7 	sdiv	r6, r1, r7
 800c836:	fb07 1516 	mls	r5, r7, r6, r1
 800c83a:	3530      	adds	r5, #48	; 0x30
 800c83c:	2a63      	cmp	r2, #99	; 0x63
 800c83e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c842:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c846:	4631      	mov	r1, r6
 800c848:	dcf1      	bgt.n	800c82e <__exponent+0x22>
 800c84a:	3130      	adds	r1, #48	; 0x30
 800c84c:	f1ae 0502 	sub.w	r5, lr, #2
 800c850:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c854:	1c44      	adds	r4, r0, #1
 800c856:	4629      	mov	r1, r5
 800c858:	4561      	cmp	r1, ip
 800c85a:	d30a      	bcc.n	800c872 <__exponent+0x66>
 800c85c:	f10d 0209 	add.w	r2, sp, #9
 800c860:	eba2 020e 	sub.w	r2, r2, lr
 800c864:	4565      	cmp	r5, ip
 800c866:	bf88      	it	hi
 800c868:	2200      	movhi	r2, #0
 800c86a:	4413      	add	r3, r2
 800c86c:	1a18      	subs	r0, r3, r0
 800c86e:	b003      	add	sp, #12
 800c870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c872:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c876:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c87a:	e7ed      	b.n	800c858 <__exponent+0x4c>
 800c87c:	2330      	movs	r3, #48	; 0x30
 800c87e:	3130      	adds	r1, #48	; 0x30
 800c880:	7083      	strb	r3, [r0, #2]
 800c882:	70c1      	strb	r1, [r0, #3]
 800c884:	1d03      	adds	r3, r0, #4
 800c886:	e7f1      	b.n	800c86c <__exponent+0x60>

0800c888 <_printf_float>:
 800c888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c88c:	ed2d 8b02 	vpush	{d8}
 800c890:	b08d      	sub	sp, #52	; 0x34
 800c892:	460c      	mov	r4, r1
 800c894:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c898:	4616      	mov	r6, r2
 800c89a:	461f      	mov	r7, r3
 800c89c:	4605      	mov	r5, r0
 800c89e:	f001 fd67 	bl	800e370 <_localeconv_r>
 800c8a2:	f8d0 a000 	ldr.w	sl, [r0]
 800c8a6:	4650      	mov	r0, sl
 800c8a8:	f7f3 fcba 	bl	8000220 <strlen>
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c8b0:	6823      	ldr	r3, [r4, #0]
 800c8b2:	9305      	str	r3, [sp, #20]
 800c8b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c8b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c8bc:	3307      	adds	r3, #7
 800c8be:	f023 0307 	bic.w	r3, r3, #7
 800c8c2:	f103 0208 	add.w	r2, r3, #8
 800c8c6:	f8c8 2000 	str.w	r2, [r8]
 800c8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c8d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c8d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c8da:	9307      	str	r3, [sp, #28]
 800c8dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800c8e0:	ee08 0a10 	vmov	s16, r0
 800c8e4:	4b9f      	ldr	r3, [pc, #636]	; (800cb64 <_printf_float+0x2dc>)
 800c8e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ee:	f7f4 f945 	bl	8000b7c <__aeabi_dcmpun>
 800c8f2:	bb88      	cbnz	r0, 800c958 <_printf_float+0xd0>
 800c8f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8f8:	4b9a      	ldr	r3, [pc, #616]	; (800cb64 <_printf_float+0x2dc>)
 800c8fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c8fe:	f7f4 f91f 	bl	8000b40 <__aeabi_dcmple>
 800c902:	bb48      	cbnz	r0, 800c958 <_printf_float+0xd0>
 800c904:	2200      	movs	r2, #0
 800c906:	2300      	movs	r3, #0
 800c908:	4640      	mov	r0, r8
 800c90a:	4649      	mov	r1, r9
 800c90c:	f7f4 f90e 	bl	8000b2c <__aeabi_dcmplt>
 800c910:	b110      	cbz	r0, 800c918 <_printf_float+0x90>
 800c912:	232d      	movs	r3, #45	; 0x2d
 800c914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c918:	4b93      	ldr	r3, [pc, #588]	; (800cb68 <_printf_float+0x2e0>)
 800c91a:	4894      	ldr	r0, [pc, #592]	; (800cb6c <_printf_float+0x2e4>)
 800c91c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c920:	bf94      	ite	ls
 800c922:	4698      	movls	r8, r3
 800c924:	4680      	movhi	r8, r0
 800c926:	2303      	movs	r3, #3
 800c928:	6123      	str	r3, [r4, #16]
 800c92a:	9b05      	ldr	r3, [sp, #20]
 800c92c:	f023 0204 	bic.w	r2, r3, #4
 800c930:	6022      	str	r2, [r4, #0]
 800c932:	f04f 0900 	mov.w	r9, #0
 800c936:	9700      	str	r7, [sp, #0]
 800c938:	4633      	mov	r3, r6
 800c93a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c93c:	4621      	mov	r1, r4
 800c93e:	4628      	mov	r0, r5
 800c940:	f000 f9d8 	bl	800ccf4 <_printf_common>
 800c944:	3001      	adds	r0, #1
 800c946:	f040 8090 	bne.w	800ca6a <_printf_float+0x1e2>
 800c94a:	f04f 30ff 	mov.w	r0, #4294967295
 800c94e:	b00d      	add	sp, #52	; 0x34
 800c950:	ecbd 8b02 	vpop	{d8}
 800c954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c958:	4642      	mov	r2, r8
 800c95a:	464b      	mov	r3, r9
 800c95c:	4640      	mov	r0, r8
 800c95e:	4649      	mov	r1, r9
 800c960:	f7f4 f90c 	bl	8000b7c <__aeabi_dcmpun>
 800c964:	b140      	cbz	r0, 800c978 <_printf_float+0xf0>
 800c966:	464b      	mov	r3, r9
 800c968:	2b00      	cmp	r3, #0
 800c96a:	bfbc      	itt	lt
 800c96c:	232d      	movlt	r3, #45	; 0x2d
 800c96e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c972:	487f      	ldr	r0, [pc, #508]	; (800cb70 <_printf_float+0x2e8>)
 800c974:	4b7f      	ldr	r3, [pc, #508]	; (800cb74 <_printf_float+0x2ec>)
 800c976:	e7d1      	b.n	800c91c <_printf_float+0x94>
 800c978:	6863      	ldr	r3, [r4, #4]
 800c97a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c97e:	9206      	str	r2, [sp, #24]
 800c980:	1c5a      	adds	r2, r3, #1
 800c982:	d13f      	bne.n	800ca04 <_printf_float+0x17c>
 800c984:	2306      	movs	r3, #6
 800c986:	6063      	str	r3, [r4, #4]
 800c988:	9b05      	ldr	r3, [sp, #20]
 800c98a:	6861      	ldr	r1, [r4, #4]
 800c98c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c990:	2300      	movs	r3, #0
 800c992:	9303      	str	r3, [sp, #12]
 800c994:	ab0a      	add	r3, sp, #40	; 0x28
 800c996:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c99a:	ab09      	add	r3, sp, #36	; 0x24
 800c99c:	ec49 8b10 	vmov	d0, r8, r9
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	6022      	str	r2, [r4, #0]
 800c9a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	f7ff fecd 	bl	800c748 <__cvt>
 800c9ae:	9b06      	ldr	r3, [sp, #24]
 800c9b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9b2:	2b47      	cmp	r3, #71	; 0x47
 800c9b4:	4680      	mov	r8, r0
 800c9b6:	d108      	bne.n	800c9ca <_printf_float+0x142>
 800c9b8:	1cc8      	adds	r0, r1, #3
 800c9ba:	db02      	blt.n	800c9c2 <_printf_float+0x13a>
 800c9bc:	6863      	ldr	r3, [r4, #4]
 800c9be:	4299      	cmp	r1, r3
 800c9c0:	dd41      	ble.n	800ca46 <_printf_float+0x1be>
 800c9c2:	f1ab 0b02 	sub.w	fp, fp, #2
 800c9c6:	fa5f fb8b 	uxtb.w	fp, fp
 800c9ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c9ce:	d820      	bhi.n	800ca12 <_printf_float+0x18a>
 800c9d0:	3901      	subs	r1, #1
 800c9d2:	465a      	mov	r2, fp
 800c9d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c9d8:	9109      	str	r1, [sp, #36]	; 0x24
 800c9da:	f7ff ff17 	bl	800c80c <__exponent>
 800c9de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9e0:	1813      	adds	r3, r2, r0
 800c9e2:	2a01      	cmp	r2, #1
 800c9e4:	4681      	mov	r9, r0
 800c9e6:	6123      	str	r3, [r4, #16]
 800c9e8:	dc02      	bgt.n	800c9f0 <_printf_float+0x168>
 800c9ea:	6822      	ldr	r2, [r4, #0]
 800c9ec:	07d2      	lsls	r2, r2, #31
 800c9ee:	d501      	bpl.n	800c9f4 <_printf_float+0x16c>
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	6123      	str	r3, [r4, #16]
 800c9f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d09c      	beq.n	800c936 <_printf_float+0xae>
 800c9fc:	232d      	movs	r3, #45	; 0x2d
 800c9fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca02:	e798      	b.n	800c936 <_printf_float+0xae>
 800ca04:	9a06      	ldr	r2, [sp, #24]
 800ca06:	2a47      	cmp	r2, #71	; 0x47
 800ca08:	d1be      	bne.n	800c988 <_printf_float+0x100>
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d1bc      	bne.n	800c988 <_printf_float+0x100>
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e7b9      	b.n	800c986 <_printf_float+0xfe>
 800ca12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ca16:	d118      	bne.n	800ca4a <_printf_float+0x1c2>
 800ca18:	2900      	cmp	r1, #0
 800ca1a:	6863      	ldr	r3, [r4, #4]
 800ca1c:	dd0b      	ble.n	800ca36 <_printf_float+0x1ae>
 800ca1e:	6121      	str	r1, [r4, #16]
 800ca20:	b913      	cbnz	r3, 800ca28 <_printf_float+0x1a0>
 800ca22:	6822      	ldr	r2, [r4, #0]
 800ca24:	07d0      	lsls	r0, r2, #31
 800ca26:	d502      	bpl.n	800ca2e <_printf_float+0x1a6>
 800ca28:	3301      	adds	r3, #1
 800ca2a:	440b      	add	r3, r1
 800ca2c:	6123      	str	r3, [r4, #16]
 800ca2e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ca30:	f04f 0900 	mov.w	r9, #0
 800ca34:	e7de      	b.n	800c9f4 <_printf_float+0x16c>
 800ca36:	b913      	cbnz	r3, 800ca3e <_printf_float+0x1b6>
 800ca38:	6822      	ldr	r2, [r4, #0]
 800ca3a:	07d2      	lsls	r2, r2, #31
 800ca3c:	d501      	bpl.n	800ca42 <_printf_float+0x1ba>
 800ca3e:	3302      	adds	r3, #2
 800ca40:	e7f4      	b.n	800ca2c <_printf_float+0x1a4>
 800ca42:	2301      	movs	r3, #1
 800ca44:	e7f2      	b.n	800ca2c <_printf_float+0x1a4>
 800ca46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ca4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca4c:	4299      	cmp	r1, r3
 800ca4e:	db05      	blt.n	800ca5c <_printf_float+0x1d4>
 800ca50:	6823      	ldr	r3, [r4, #0]
 800ca52:	6121      	str	r1, [r4, #16]
 800ca54:	07d8      	lsls	r0, r3, #31
 800ca56:	d5ea      	bpl.n	800ca2e <_printf_float+0x1a6>
 800ca58:	1c4b      	adds	r3, r1, #1
 800ca5a:	e7e7      	b.n	800ca2c <_printf_float+0x1a4>
 800ca5c:	2900      	cmp	r1, #0
 800ca5e:	bfd4      	ite	le
 800ca60:	f1c1 0202 	rsble	r2, r1, #2
 800ca64:	2201      	movgt	r2, #1
 800ca66:	4413      	add	r3, r2
 800ca68:	e7e0      	b.n	800ca2c <_printf_float+0x1a4>
 800ca6a:	6823      	ldr	r3, [r4, #0]
 800ca6c:	055a      	lsls	r2, r3, #21
 800ca6e:	d407      	bmi.n	800ca80 <_printf_float+0x1f8>
 800ca70:	6923      	ldr	r3, [r4, #16]
 800ca72:	4642      	mov	r2, r8
 800ca74:	4631      	mov	r1, r6
 800ca76:	4628      	mov	r0, r5
 800ca78:	47b8      	blx	r7
 800ca7a:	3001      	adds	r0, #1
 800ca7c:	d12c      	bne.n	800cad8 <_printf_float+0x250>
 800ca7e:	e764      	b.n	800c94a <_printf_float+0xc2>
 800ca80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca84:	f240 80e0 	bls.w	800cc48 <_printf_float+0x3c0>
 800ca88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	2300      	movs	r3, #0
 800ca90:	f7f4 f842 	bl	8000b18 <__aeabi_dcmpeq>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d034      	beq.n	800cb02 <_printf_float+0x27a>
 800ca98:	4a37      	ldr	r2, [pc, #220]	; (800cb78 <_printf_float+0x2f0>)
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	4631      	mov	r1, r6
 800ca9e:	4628      	mov	r0, r5
 800caa0:	47b8      	blx	r7
 800caa2:	3001      	adds	r0, #1
 800caa4:	f43f af51 	beq.w	800c94a <_printf_float+0xc2>
 800caa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800caac:	429a      	cmp	r2, r3
 800caae:	db02      	blt.n	800cab6 <_printf_float+0x22e>
 800cab0:	6823      	ldr	r3, [r4, #0]
 800cab2:	07d8      	lsls	r0, r3, #31
 800cab4:	d510      	bpl.n	800cad8 <_printf_float+0x250>
 800cab6:	ee18 3a10 	vmov	r3, s16
 800caba:	4652      	mov	r2, sl
 800cabc:	4631      	mov	r1, r6
 800cabe:	4628      	mov	r0, r5
 800cac0:	47b8      	blx	r7
 800cac2:	3001      	adds	r0, #1
 800cac4:	f43f af41 	beq.w	800c94a <_printf_float+0xc2>
 800cac8:	f04f 0800 	mov.w	r8, #0
 800cacc:	f104 091a 	add.w	r9, r4, #26
 800cad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cad2:	3b01      	subs	r3, #1
 800cad4:	4543      	cmp	r3, r8
 800cad6:	dc09      	bgt.n	800caec <_printf_float+0x264>
 800cad8:	6823      	ldr	r3, [r4, #0]
 800cada:	079b      	lsls	r3, r3, #30
 800cadc:	f100 8105 	bmi.w	800ccea <_printf_float+0x462>
 800cae0:	68e0      	ldr	r0, [r4, #12]
 800cae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cae4:	4298      	cmp	r0, r3
 800cae6:	bfb8      	it	lt
 800cae8:	4618      	movlt	r0, r3
 800caea:	e730      	b.n	800c94e <_printf_float+0xc6>
 800caec:	2301      	movs	r3, #1
 800caee:	464a      	mov	r2, r9
 800caf0:	4631      	mov	r1, r6
 800caf2:	4628      	mov	r0, r5
 800caf4:	47b8      	blx	r7
 800caf6:	3001      	adds	r0, #1
 800caf8:	f43f af27 	beq.w	800c94a <_printf_float+0xc2>
 800cafc:	f108 0801 	add.w	r8, r8, #1
 800cb00:	e7e6      	b.n	800cad0 <_printf_float+0x248>
 800cb02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	dc39      	bgt.n	800cb7c <_printf_float+0x2f4>
 800cb08:	4a1b      	ldr	r2, [pc, #108]	; (800cb78 <_printf_float+0x2f0>)
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	4631      	mov	r1, r6
 800cb0e:	4628      	mov	r0, r5
 800cb10:	47b8      	blx	r7
 800cb12:	3001      	adds	r0, #1
 800cb14:	f43f af19 	beq.w	800c94a <_printf_float+0xc2>
 800cb18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	d102      	bne.n	800cb26 <_printf_float+0x29e>
 800cb20:	6823      	ldr	r3, [r4, #0]
 800cb22:	07d9      	lsls	r1, r3, #31
 800cb24:	d5d8      	bpl.n	800cad8 <_printf_float+0x250>
 800cb26:	ee18 3a10 	vmov	r3, s16
 800cb2a:	4652      	mov	r2, sl
 800cb2c:	4631      	mov	r1, r6
 800cb2e:	4628      	mov	r0, r5
 800cb30:	47b8      	blx	r7
 800cb32:	3001      	adds	r0, #1
 800cb34:	f43f af09 	beq.w	800c94a <_printf_float+0xc2>
 800cb38:	f04f 0900 	mov.w	r9, #0
 800cb3c:	f104 0a1a 	add.w	sl, r4, #26
 800cb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb42:	425b      	negs	r3, r3
 800cb44:	454b      	cmp	r3, r9
 800cb46:	dc01      	bgt.n	800cb4c <_printf_float+0x2c4>
 800cb48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb4a:	e792      	b.n	800ca72 <_printf_float+0x1ea>
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	4652      	mov	r2, sl
 800cb50:	4631      	mov	r1, r6
 800cb52:	4628      	mov	r0, r5
 800cb54:	47b8      	blx	r7
 800cb56:	3001      	adds	r0, #1
 800cb58:	f43f aef7 	beq.w	800c94a <_printf_float+0xc2>
 800cb5c:	f109 0901 	add.w	r9, r9, #1
 800cb60:	e7ee      	b.n	800cb40 <_printf_float+0x2b8>
 800cb62:	bf00      	nop
 800cb64:	7fefffff 	.word	0x7fefffff
 800cb68:	08011248 	.word	0x08011248
 800cb6c:	0801124c 	.word	0x0801124c
 800cb70:	08011254 	.word	0x08011254
 800cb74:	08011250 	.word	0x08011250
 800cb78:	08011258 	.word	0x08011258
 800cb7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb80:	429a      	cmp	r2, r3
 800cb82:	bfa8      	it	ge
 800cb84:	461a      	movge	r2, r3
 800cb86:	2a00      	cmp	r2, #0
 800cb88:	4691      	mov	r9, r2
 800cb8a:	dc37      	bgt.n	800cbfc <_printf_float+0x374>
 800cb8c:	f04f 0b00 	mov.w	fp, #0
 800cb90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb94:	f104 021a 	add.w	r2, r4, #26
 800cb98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb9a:	9305      	str	r3, [sp, #20]
 800cb9c:	eba3 0309 	sub.w	r3, r3, r9
 800cba0:	455b      	cmp	r3, fp
 800cba2:	dc33      	bgt.n	800cc0c <_printf_float+0x384>
 800cba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	db3b      	blt.n	800cc24 <_printf_float+0x39c>
 800cbac:	6823      	ldr	r3, [r4, #0]
 800cbae:	07da      	lsls	r2, r3, #31
 800cbb0:	d438      	bmi.n	800cc24 <_printf_float+0x39c>
 800cbb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbb4:	9a05      	ldr	r2, [sp, #20]
 800cbb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbb8:	1a9a      	subs	r2, r3, r2
 800cbba:	eba3 0901 	sub.w	r9, r3, r1
 800cbbe:	4591      	cmp	r9, r2
 800cbc0:	bfa8      	it	ge
 800cbc2:	4691      	movge	r9, r2
 800cbc4:	f1b9 0f00 	cmp.w	r9, #0
 800cbc8:	dc35      	bgt.n	800cc36 <_printf_float+0x3ae>
 800cbca:	f04f 0800 	mov.w	r8, #0
 800cbce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cbd2:	f104 0a1a 	add.w	sl, r4, #26
 800cbd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbda:	1a9b      	subs	r3, r3, r2
 800cbdc:	eba3 0309 	sub.w	r3, r3, r9
 800cbe0:	4543      	cmp	r3, r8
 800cbe2:	f77f af79 	ble.w	800cad8 <_printf_float+0x250>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	4652      	mov	r2, sl
 800cbea:	4631      	mov	r1, r6
 800cbec:	4628      	mov	r0, r5
 800cbee:	47b8      	blx	r7
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	f43f aeaa 	beq.w	800c94a <_printf_float+0xc2>
 800cbf6:	f108 0801 	add.w	r8, r8, #1
 800cbfa:	e7ec      	b.n	800cbd6 <_printf_float+0x34e>
 800cbfc:	4613      	mov	r3, r2
 800cbfe:	4631      	mov	r1, r6
 800cc00:	4642      	mov	r2, r8
 800cc02:	4628      	mov	r0, r5
 800cc04:	47b8      	blx	r7
 800cc06:	3001      	adds	r0, #1
 800cc08:	d1c0      	bne.n	800cb8c <_printf_float+0x304>
 800cc0a:	e69e      	b.n	800c94a <_printf_float+0xc2>
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	4631      	mov	r1, r6
 800cc10:	4628      	mov	r0, r5
 800cc12:	9205      	str	r2, [sp, #20]
 800cc14:	47b8      	blx	r7
 800cc16:	3001      	adds	r0, #1
 800cc18:	f43f ae97 	beq.w	800c94a <_printf_float+0xc2>
 800cc1c:	9a05      	ldr	r2, [sp, #20]
 800cc1e:	f10b 0b01 	add.w	fp, fp, #1
 800cc22:	e7b9      	b.n	800cb98 <_printf_float+0x310>
 800cc24:	ee18 3a10 	vmov	r3, s16
 800cc28:	4652      	mov	r2, sl
 800cc2a:	4631      	mov	r1, r6
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	47b8      	blx	r7
 800cc30:	3001      	adds	r0, #1
 800cc32:	d1be      	bne.n	800cbb2 <_printf_float+0x32a>
 800cc34:	e689      	b.n	800c94a <_printf_float+0xc2>
 800cc36:	9a05      	ldr	r2, [sp, #20]
 800cc38:	464b      	mov	r3, r9
 800cc3a:	4442      	add	r2, r8
 800cc3c:	4631      	mov	r1, r6
 800cc3e:	4628      	mov	r0, r5
 800cc40:	47b8      	blx	r7
 800cc42:	3001      	adds	r0, #1
 800cc44:	d1c1      	bne.n	800cbca <_printf_float+0x342>
 800cc46:	e680      	b.n	800c94a <_printf_float+0xc2>
 800cc48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc4a:	2a01      	cmp	r2, #1
 800cc4c:	dc01      	bgt.n	800cc52 <_printf_float+0x3ca>
 800cc4e:	07db      	lsls	r3, r3, #31
 800cc50:	d538      	bpl.n	800ccc4 <_printf_float+0x43c>
 800cc52:	2301      	movs	r3, #1
 800cc54:	4642      	mov	r2, r8
 800cc56:	4631      	mov	r1, r6
 800cc58:	4628      	mov	r0, r5
 800cc5a:	47b8      	blx	r7
 800cc5c:	3001      	adds	r0, #1
 800cc5e:	f43f ae74 	beq.w	800c94a <_printf_float+0xc2>
 800cc62:	ee18 3a10 	vmov	r3, s16
 800cc66:	4652      	mov	r2, sl
 800cc68:	4631      	mov	r1, r6
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	47b8      	blx	r7
 800cc6e:	3001      	adds	r0, #1
 800cc70:	f43f ae6b 	beq.w	800c94a <_printf_float+0xc2>
 800cc74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc78:	2200      	movs	r2, #0
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	f7f3 ff4c 	bl	8000b18 <__aeabi_dcmpeq>
 800cc80:	b9d8      	cbnz	r0, 800ccba <_printf_float+0x432>
 800cc82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc84:	f108 0201 	add.w	r2, r8, #1
 800cc88:	3b01      	subs	r3, #1
 800cc8a:	4631      	mov	r1, r6
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	47b8      	blx	r7
 800cc90:	3001      	adds	r0, #1
 800cc92:	d10e      	bne.n	800ccb2 <_printf_float+0x42a>
 800cc94:	e659      	b.n	800c94a <_printf_float+0xc2>
 800cc96:	2301      	movs	r3, #1
 800cc98:	4652      	mov	r2, sl
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	47b8      	blx	r7
 800cca0:	3001      	adds	r0, #1
 800cca2:	f43f ae52 	beq.w	800c94a <_printf_float+0xc2>
 800cca6:	f108 0801 	add.w	r8, r8, #1
 800ccaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccac:	3b01      	subs	r3, #1
 800ccae:	4543      	cmp	r3, r8
 800ccb0:	dcf1      	bgt.n	800cc96 <_printf_float+0x40e>
 800ccb2:	464b      	mov	r3, r9
 800ccb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ccb8:	e6dc      	b.n	800ca74 <_printf_float+0x1ec>
 800ccba:	f04f 0800 	mov.w	r8, #0
 800ccbe:	f104 0a1a 	add.w	sl, r4, #26
 800ccc2:	e7f2      	b.n	800ccaa <_printf_float+0x422>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	4642      	mov	r2, r8
 800ccc8:	e7df      	b.n	800cc8a <_printf_float+0x402>
 800ccca:	2301      	movs	r3, #1
 800cccc:	464a      	mov	r2, r9
 800ccce:	4631      	mov	r1, r6
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	47b8      	blx	r7
 800ccd4:	3001      	adds	r0, #1
 800ccd6:	f43f ae38 	beq.w	800c94a <_printf_float+0xc2>
 800ccda:	f108 0801 	add.w	r8, r8, #1
 800ccde:	68e3      	ldr	r3, [r4, #12]
 800cce0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cce2:	1a5b      	subs	r3, r3, r1
 800cce4:	4543      	cmp	r3, r8
 800cce6:	dcf0      	bgt.n	800ccca <_printf_float+0x442>
 800cce8:	e6fa      	b.n	800cae0 <_printf_float+0x258>
 800ccea:	f04f 0800 	mov.w	r8, #0
 800ccee:	f104 0919 	add.w	r9, r4, #25
 800ccf2:	e7f4      	b.n	800ccde <_printf_float+0x456>

0800ccf4 <_printf_common>:
 800ccf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccf8:	4616      	mov	r6, r2
 800ccfa:	4699      	mov	r9, r3
 800ccfc:	688a      	ldr	r2, [r1, #8]
 800ccfe:	690b      	ldr	r3, [r1, #16]
 800cd00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd04:	4293      	cmp	r3, r2
 800cd06:	bfb8      	it	lt
 800cd08:	4613      	movlt	r3, r2
 800cd0a:	6033      	str	r3, [r6, #0]
 800cd0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd10:	4607      	mov	r7, r0
 800cd12:	460c      	mov	r4, r1
 800cd14:	b10a      	cbz	r2, 800cd1a <_printf_common+0x26>
 800cd16:	3301      	adds	r3, #1
 800cd18:	6033      	str	r3, [r6, #0]
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	0699      	lsls	r1, r3, #26
 800cd1e:	bf42      	ittt	mi
 800cd20:	6833      	ldrmi	r3, [r6, #0]
 800cd22:	3302      	addmi	r3, #2
 800cd24:	6033      	strmi	r3, [r6, #0]
 800cd26:	6825      	ldr	r5, [r4, #0]
 800cd28:	f015 0506 	ands.w	r5, r5, #6
 800cd2c:	d106      	bne.n	800cd3c <_printf_common+0x48>
 800cd2e:	f104 0a19 	add.w	sl, r4, #25
 800cd32:	68e3      	ldr	r3, [r4, #12]
 800cd34:	6832      	ldr	r2, [r6, #0]
 800cd36:	1a9b      	subs	r3, r3, r2
 800cd38:	42ab      	cmp	r3, r5
 800cd3a:	dc26      	bgt.n	800cd8a <_printf_common+0x96>
 800cd3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd40:	1e13      	subs	r3, r2, #0
 800cd42:	6822      	ldr	r2, [r4, #0]
 800cd44:	bf18      	it	ne
 800cd46:	2301      	movne	r3, #1
 800cd48:	0692      	lsls	r2, r2, #26
 800cd4a:	d42b      	bmi.n	800cda4 <_printf_common+0xb0>
 800cd4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd50:	4649      	mov	r1, r9
 800cd52:	4638      	mov	r0, r7
 800cd54:	47c0      	blx	r8
 800cd56:	3001      	adds	r0, #1
 800cd58:	d01e      	beq.n	800cd98 <_printf_common+0xa4>
 800cd5a:	6823      	ldr	r3, [r4, #0]
 800cd5c:	68e5      	ldr	r5, [r4, #12]
 800cd5e:	6832      	ldr	r2, [r6, #0]
 800cd60:	f003 0306 	and.w	r3, r3, #6
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	bf08      	it	eq
 800cd68:	1aad      	subeq	r5, r5, r2
 800cd6a:	68a3      	ldr	r3, [r4, #8]
 800cd6c:	6922      	ldr	r2, [r4, #16]
 800cd6e:	bf0c      	ite	eq
 800cd70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd74:	2500      	movne	r5, #0
 800cd76:	4293      	cmp	r3, r2
 800cd78:	bfc4      	itt	gt
 800cd7a:	1a9b      	subgt	r3, r3, r2
 800cd7c:	18ed      	addgt	r5, r5, r3
 800cd7e:	2600      	movs	r6, #0
 800cd80:	341a      	adds	r4, #26
 800cd82:	42b5      	cmp	r5, r6
 800cd84:	d11a      	bne.n	800cdbc <_printf_common+0xc8>
 800cd86:	2000      	movs	r0, #0
 800cd88:	e008      	b.n	800cd9c <_printf_common+0xa8>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	4652      	mov	r2, sl
 800cd8e:	4649      	mov	r1, r9
 800cd90:	4638      	mov	r0, r7
 800cd92:	47c0      	blx	r8
 800cd94:	3001      	adds	r0, #1
 800cd96:	d103      	bne.n	800cda0 <_printf_common+0xac>
 800cd98:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda0:	3501      	adds	r5, #1
 800cda2:	e7c6      	b.n	800cd32 <_printf_common+0x3e>
 800cda4:	18e1      	adds	r1, r4, r3
 800cda6:	1c5a      	adds	r2, r3, #1
 800cda8:	2030      	movs	r0, #48	; 0x30
 800cdaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdae:	4422      	add	r2, r4
 800cdb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdb8:	3302      	adds	r3, #2
 800cdba:	e7c7      	b.n	800cd4c <_printf_common+0x58>
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	4622      	mov	r2, r4
 800cdc0:	4649      	mov	r1, r9
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	47c0      	blx	r8
 800cdc6:	3001      	adds	r0, #1
 800cdc8:	d0e6      	beq.n	800cd98 <_printf_common+0xa4>
 800cdca:	3601      	adds	r6, #1
 800cdcc:	e7d9      	b.n	800cd82 <_printf_common+0x8e>
	...

0800cdd0 <_printf_i>:
 800cdd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdd4:	7e0f      	ldrb	r7, [r1, #24]
 800cdd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cdd8:	2f78      	cmp	r7, #120	; 0x78
 800cdda:	4691      	mov	r9, r2
 800cddc:	4680      	mov	r8, r0
 800cdde:	460c      	mov	r4, r1
 800cde0:	469a      	mov	sl, r3
 800cde2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cde6:	d807      	bhi.n	800cdf8 <_printf_i+0x28>
 800cde8:	2f62      	cmp	r7, #98	; 0x62
 800cdea:	d80a      	bhi.n	800ce02 <_printf_i+0x32>
 800cdec:	2f00      	cmp	r7, #0
 800cdee:	f000 80d8 	beq.w	800cfa2 <_printf_i+0x1d2>
 800cdf2:	2f58      	cmp	r7, #88	; 0x58
 800cdf4:	f000 80a3 	beq.w	800cf3e <_printf_i+0x16e>
 800cdf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce00:	e03a      	b.n	800ce78 <_printf_i+0xa8>
 800ce02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce06:	2b15      	cmp	r3, #21
 800ce08:	d8f6      	bhi.n	800cdf8 <_printf_i+0x28>
 800ce0a:	a101      	add	r1, pc, #4	; (adr r1, 800ce10 <_printf_i+0x40>)
 800ce0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce10:	0800ce69 	.word	0x0800ce69
 800ce14:	0800ce7d 	.word	0x0800ce7d
 800ce18:	0800cdf9 	.word	0x0800cdf9
 800ce1c:	0800cdf9 	.word	0x0800cdf9
 800ce20:	0800cdf9 	.word	0x0800cdf9
 800ce24:	0800cdf9 	.word	0x0800cdf9
 800ce28:	0800ce7d 	.word	0x0800ce7d
 800ce2c:	0800cdf9 	.word	0x0800cdf9
 800ce30:	0800cdf9 	.word	0x0800cdf9
 800ce34:	0800cdf9 	.word	0x0800cdf9
 800ce38:	0800cdf9 	.word	0x0800cdf9
 800ce3c:	0800cf89 	.word	0x0800cf89
 800ce40:	0800cead 	.word	0x0800cead
 800ce44:	0800cf6b 	.word	0x0800cf6b
 800ce48:	0800cdf9 	.word	0x0800cdf9
 800ce4c:	0800cdf9 	.word	0x0800cdf9
 800ce50:	0800cfab 	.word	0x0800cfab
 800ce54:	0800cdf9 	.word	0x0800cdf9
 800ce58:	0800cead 	.word	0x0800cead
 800ce5c:	0800cdf9 	.word	0x0800cdf9
 800ce60:	0800cdf9 	.word	0x0800cdf9
 800ce64:	0800cf73 	.word	0x0800cf73
 800ce68:	682b      	ldr	r3, [r5, #0]
 800ce6a:	1d1a      	adds	r2, r3, #4
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	602a      	str	r2, [r5, #0]
 800ce70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce78:	2301      	movs	r3, #1
 800ce7a:	e0a3      	b.n	800cfc4 <_printf_i+0x1f4>
 800ce7c:	6820      	ldr	r0, [r4, #0]
 800ce7e:	6829      	ldr	r1, [r5, #0]
 800ce80:	0606      	lsls	r6, r0, #24
 800ce82:	f101 0304 	add.w	r3, r1, #4
 800ce86:	d50a      	bpl.n	800ce9e <_printf_i+0xce>
 800ce88:	680e      	ldr	r6, [r1, #0]
 800ce8a:	602b      	str	r3, [r5, #0]
 800ce8c:	2e00      	cmp	r6, #0
 800ce8e:	da03      	bge.n	800ce98 <_printf_i+0xc8>
 800ce90:	232d      	movs	r3, #45	; 0x2d
 800ce92:	4276      	negs	r6, r6
 800ce94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce98:	485e      	ldr	r0, [pc, #376]	; (800d014 <_printf_i+0x244>)
 800ce9a:	230a      	movs	r3, #10
 800ce9c:	e019      	b.n	800ced2 <_printf_i+0x102>
 800ce9e:	680e      	ldr	r6, [r1, #0]
 800cea0:	602b      	str	r3, [r5, #0]
 800cea2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cea6:	bf18      	it	ne
 800cea8:	b236      	sxthne	r6, r6
 800ceaa:	e7ef      	b.n	800ce8c <_printf_i+0xbc>
 800ceac:	682b      	ldr	r3, [r5, #0]
 800ceae:	6820      	ldr	r0, [r4, #0]
 800ceb0:	1d19      	adds	r1, r3, #4
 800ceb2:	6029      	str	r1, [r5, #0]
 800ceb4:	0601      	lsls	r1, r0, #24
 800ceb6:	d501      	bpl.n	800cebc <_printf_i+0xec>
 800ceb8:	681e      	ldr	r6, [r3, #0]
 800ceba:	e002      	b.n	800cec2 <_printf_i+0xf2>
 800cebc:	0646      	lsls	r6, r0, #25
 800cebe:	d5fb      	bpl.n	800ceb8 <_printf_i+0xe8>
 800cec0:	881e      	ldrh	r6, [r3, #0]
 800cec2:	4854      	ldr	r0, [pc, #336]	; (800d014 <_printf_i+0x244>)
 800cec4:	2f6f      	cmp	r7, #111	; 0x6f
 800cec6:	bf0c      	ite	eq
 800cec8:	2308      	moveq	r3, #8
 800ceca:	230a      	movne	r3, #10
 800cecc:	2100      	movs	r1, #0
 800cece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ced2:	6865      	ldr	r5, [r4, #4]
 800ced4:	60a5      	str	r5, [r4, #8]
 800ced6:	2d00      	cmp	r5, #0
 800ced8:	bfa2      	ittt	ge
 800ceda:	6821      	ldrge	r1, [r4, #0]
 800cedc:	f021 0104 	bicge.w	r1, r1, #4
 800cee0:	6021      	strge	r1, [r4, #0]
 800cee2:	b90e      	cbnz	r6, 800cee8 <_printf_i+0x118>
 800cee4:	2d00      	cmp	r5, #0
 800cee6:	d04d      	beq.n	800cf84 <_printf_i+0x1b4>
 800cee8:	4615      	mov	r5, r2
 800ceea:	fbb6 f1f3 	udiv	r1, r6, r3
 800ceee:	fb03 6711 	mls	r7, r3, r1, r6
 800cef2:	5dc7      	ldrb	r7, [r0, r7]
 800cef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cef8:	4637      	mov	r7, r6
 800cefa:	42bb      	cmp	r3, r7
 800cefc:	460e      	mov	r6, r1
 800cefe:	d9f4      	bls.n	800ceea <_printf_i+0x11a>
 800cf00:	2b08      	cmp	r3, #8
 800cf02:	d10b      	bne.n	800cf1c <_printf_i+0x14c>
 800cf04:	6823      	ldr	r3, [r4, #0]
 800cf06:	07de      	lsls	r6, r3, #31
 800cf08:	d508      	bpl.n	800cf1c <_printf_i+0x14c>
 800cf0a:	6923      	ldr	r3, [r4, #16]
 800cf0c:	6861      	ldr	r1, [r4, #4]
 800cf0e:	4299      	cmp	r1, r3
 800cf10:	bfde      	ittt	le
 800cf12:	2330      	movle	r3, #48	; 0x30
 800cf14:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf18:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf1c:	1b52      	subs	r2, r2, r5
 800cf1e:	6122      	str	r2, [r4, #16]
 800cf20:	f8cd a000 	str.w	sl, [sp]
 800cf24:	464b      	mov	r3, r9
 800cf26:	aa03      	add	r2, sp, #12
 800cf28:	4621      	mov	r1, r4
 800cf2a:	4640      	mov	r0, r8
 800cf2c:	f7ff fee2 	bl	800ccf4 <_printf_common>
 800cf30:	3001      	adds	r0, #1
 800cf32:	d14c      	bne.n	800cfce <_printf_i+0x1fe>
 800cf34:	f04f 30ff 	mov.w	r0, #4294967295
 800cf38:	b004      	add	sp, #16
 800cf3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf3e:	4835      	ldr	r0, [pc, #212]	; (800d014 <_printf_i+0x244>)
 800cf40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cf44:	6829      	ldr	r1, [r5, #0]
 800cf46:	6823      	ldr	r3, [r4, #0]
 800cf48:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf4c:	6029      	str	r1, [r5, #0]
 800cf4e:	061d      	lsls	r5, r3, #24
 800cf50:	d514      	bpl.n	800cf7c <_printf_i+0x1ac>
 800cf52:	07df      	lsls	r7, r3, #31
 800cf54:	bf44      	itt	mi
 800cf56:	f043 0320 	orrmi.w	r3, r3, #32
 800cf5a:	6023      	strmi	r3, [r4, #0]
 800cf5c:	b91e      	cbnz	r6, 800cf66 <_printf_i+0x196>
 800cf5e:	6823      	ldr	r3, [r4, #0]
 800cf60:	f023 0320 	bic.w	r3, r3, #32
 800cf64:	6023      	str	r3, [r4, #0]
 800cf66:	2310      	movs	r3, #16
 800cf68:	e7b0      	b.n	800cecc <_printf_i+0xfc>
 800cf6a:	6823      	ldr	r3, [r4, #0]
 800cf6c:	f043 0320 	orr.w	r3, r3, #32
 800cf70:	6023      	str	r3, [r4, #0]
 800cf72:	2378      	movs	r3, #120	; 0x78
 800cf74:	4828      	ldr	r0, [pc, #160]	; (800d018 <_printf_i+0x248>)
 800cf76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf7a:	e7e3      	b.n	800cf44 <_printf_i+0x174>
 800cf7c:	0659      	lsls	r1, r3, #25
 800cf7e:	bf48      	it	mi
 800cf80:	b2b6      	uxthmi	r6, r6
 800cf82:	e7e6      	b.n	800cf52 <_printf_i+0x182>
 800cf84:	4615      	mov	r5, r2
 800cf86:	e7bb      	b.n	800cf00 <_printf_i+0x130>
 800cf88:	682b      	ldr	r3, [r5, #0]
 800cf8a:	6826      	ldr	r6, [r4, #0]
 800cf8c:	6961      	ldr	r1, [r4, #20]
 800cf8e:	1d18      	adds	r0, r3, #4
 800cf90:	6028      	str	r0, [r5, #0]
 800cf92:	0635      	lsls	r5, r6, #24
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	d501      	bpl.n	800cf9c <_printf_i+0x1cc>
 800cf98:	6019      	str	r1, [r3, #0]
 800cf9a:	e002      	b.n	800cfa2 <_printf_i+0x1d2>
 800cf9c:	0670      	lsls	r0, r6, #25
 800cf9e:	d5fb      	bpl.n	800cf98 <_printf_i+0x1c8>
 800cfa0:	8019      	strh	r1, [r3, #0]
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	6123      	str	r3, [r4, #16]
 800cfa6:	4615      	mov	r5, r2
 800cfa8:	e7ba      	b.n	800cf20 <_printf_i+0x150>
 800cfaa:	682b      	ldr	r3, [r5, #0]
 800cfac:	1d1a      	adds	r2, r3, #4
 800cfae:	602a      	str	r2, [r5, #0]
 800cfb0:	681d      	ldr	r5, [r3, #0]
 800cfb2:	6862      	ldr	r2, [r4, #4]
 800cfb4:	2100      	movs	r1, #0
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	f7f3 f93a 	bl	8000230 <memchr>
 800cfbc:	b108      	cbz	r0, 800cfc2 <_printf_i+0x1f2>
 800cfbe:	1b40      	subs	r0, r0, r5
 800cfc0:	6060      	str	r0, [r4, #4]
 800cfc2:	6863      	ldr	r3, [r4, #4]
 800cfc4:	6123      	str	r3, [r4, #16]
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfcc:	e7a8      	b.n	800cf20 <_printf_i+0x150>
 800cfce:	6923      	ldr	r3, [r4, #16]
 800cfd0:	462a      	mov	r2, r5
 800cfd2:	4649      	mov	r1, r9
 800cfd4:	4640      	mov	r0, r8
 800cfd6:	47d0      	blx	sl
 800cfd8:	3001      	adds	r0, #1
 800cfda:	d0ab      	beq.n	800cf34 <_printf_i+0x164>
 800cfdc:	6823      	ldr	r3, [r4, #0]
 800cfde:	079b      	lsls	r3, r3, #30
 800cfe0:	d413      	bmi.n	800d00a <_printf_i+0x23a>
 800cfe2:	68e0      	ldr	r0, [r4, #12]
 800cfe4:	9b03      	ldr	r3, [sp, #12]
 800cfe6:	4298      	cmp	r0, r3
 800cfe8:	bfb8      	it	lt
 800cfea:	4618      	movlt	r0, r3
 800cfec:	e7a4      	b.n	800cf38 <_printf_i+0x168>
 800cfee:	2301      	movs	r3, #1
 800cff0:	4632      	mov	r2, r6
 800cff2:	4649      	mov	r1, r9
 800cff4:	4640      	mov	r0, r8
 800cff6:	47d0      	blx	sl
 800cff8:	3001      	adds	r0, #1
 800cffa:	d09b      	beq.n	800cf34 <_printf_i+0x164>
 800cffc:	3501      	adds	r5, #1
 800cffe:	68e3      	ldr	r3, [r4, #12]
 800d000:	9903      	ldr	r1, [sp, #12]
 800d002:	1a5b      	subs	r3, r3, r1
 800d004:	42ab      	cmp	r3, r5
 800d006:	dcf2      	bgt.n	800cfee <_printf_i+0x21e>
 800d008:	e7eb      	b.n	800cfe2 <_printf_i+0x212>
 800d00a:	2500      	movs	r5, #0
 800d00c:	f104 0619 	add.w	r6, r4, #25
 800d010:	e7f5      	b.n	800cffe <_printf_i+0x22e>
 800d012:	bf00      	nop
 800d014:	0801125a 	.word	0x0801125a
 800d018:	0801126b 	.word	0x0801126b

0800d01c <iprintf>:
 800d01c:	b40f      	push	{r0, r1, r2, r3}
 800d01e:	4b0a      	ldr	r3, [pc, #40]	; (800d048 <iprintf+0x2c>)
 800d020:	b513      	push	{r0, r1, r4, lr}
 800d022:	681c      	ldr	r4, [r3, #0]
 800d024:	b124      	cbz	r4, 800d030 <iprintf+0x14>
 800d026:	69a3      	ldr	r3, [r4, #24]
 800d028:	b913      	cbnz	r3, 800d030 <iprintf+0x14>
 800d02a:	4620      	mov	r0, r4
 800d02c:	f001 f8f0 	bl	800e210 <__sinit>
 800d030:	ab05      	add	r3, sp, #20
 800d032:	9a04      	ldr	r2, [sp, #16]
 800d034:	68a1      	ldr	r1, [r4, #8]
 800d036:	9301      	str	r3, [sp, #4]
 800d038:	4620      	mov	r0, r4
 800d03a:	f001 ff1b 	bl	800ee74 <_vfiprintf_r>
 800d03e:	b002      	add	sp, #8
 800d040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d044:	b004      	add	sp, #16
 800d046:	4770      	bx	lr
 800d048:	2000000c 	.word	0x2000000c

0800d04c <rand>:
 800d04c:	4b16      	ldr	r3, [pc, #88]	; (800d0a8 <rand+0x5c>)
 800d04e:	b510      	push	{r4, lr}
 800d050:	681c      	ldr	r4, [r3, #0]
 800d052:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d054:	b9b3      	cbnz	r3, 800d084 <rand+0x38>
 800d056:	2018      	movs	r0, #24
 800d058:	f7ff fa5a 	bl	800c510 <malloc>
 800d05c:	63a0      	str	r0, [r4, #56]	; 0x38
 800d05e:	b928      	cbnz	r0, 800d06c <rand+0x20>
 800d060:	4602      	mov	r2, r0
 800d062:	4b12      	ldr	r3, [pc, #72]	; (800d0ac <rand+0x60>)
 800d064:	4812      	ldr	r0, [pc, #72]	; (800d0b0 <rand+0x64>)
 800d066:	214e      	movs	r1, #78	; 0x4e
 800d068:	f000 f91e 	bl	800d2a8 <__assert_func>
 800d06c:	4a11      	ldr	r2, [pc, #68]	; (800d0b4 <rand+0x68>)
 800d06e:	4b12      	ldr	r3, [pc, #72]	; (800d0b8 <rand+0x6c>)
 800d070:	e9c0 2300 	strd	r2, r3, [r0]
 800d074:	4b11      	ldr	r3, [pc, #68]	; (800d0bc <rand+0x70>)
 800d076:	6083      	str	r3, [r0, #8]
 800d078:	230b      	movs	r3, #11
 800d07a:	8183      	strh	r3, [r0, #12]
 800d07c:	2201      	movs	r2, #1
 800d07e:	2300      	movs	r3, #0
 800d080:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d084:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800d086:	4a0e      	ldr	r2, [pc, #56]	; (800d0c0 <rand+0x74>)
 800d088:	6920      	ldr	r0, [r4, #16]
 800d08a:	6963      	ldr	r3, [r4, #20]
 800d08c:	490d      	ldr	r1, [pc, #52]	; (800d0c4 <rand+0x78>)
 800d08e:	4342      	muls	r2, r0
 800d090:	fb01 2203 	mla	r2, r1, r3, r2
 800d094:	fba0 0101 	umull	r0, r1, r0, r1
 800d098:	1c43      	adds	r3, r0, #1
 800d09a:	eb42 0001 	adc.w	r0, r2, r1
 800d09e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800d0a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d0a6:	bd10      	pop	{r4, pc}
 800d0a8:	2000000c 	.word	0x2000000c
 800d0ac:	0801127c 	.word	0x0801127c
 800d0b0:	08011293 	.word	0x08011293
 800d0b4:	abcd330e 	.word	0xabcd330e
 800d0b8:	e66d1234 	.word	0xe66d1234
 800d0bc:	0005deec 	.word	0x0005deec
 800d0c0:	5851f42d 	.word	0x5851f42d
 800d0c4:	4c957f2d 	.word	0x4c957f2d

0800d0c8 <_sbrk_r>:
 800d0c8:	b538      	push	{r3, r4, r5, lr}
 800d0ca:	4d06      	ldr	r5, [pc, #24]	; (800d0e4 <_sbrk_r+0x1c>)
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	4608      	mov	r0, r1
 800d0d2:	602b      	str	r3, [r5, #0]
 800d0d4:	f7fa fadc 	bl	8007690 <_sbrk>
 800d0d8:	1c43      	adds	r3, r0, #1
 800d0da:	d102      	bne.n	800d0e2 <_sbrk_r+0x1a>
 800d0dc:	682b      	ldr	r3, [r5, #0]
 800d0de:	b103      	cbz	r3, 800d0e2 <_sbrk_r+0x1a>
 800d0e0:	6023      	str	r3, [r4, #0]
 800d0e2:	bd38      	pop	{r3, r4, r5, pc}
 800d0e4:	20005254 	.word	0x20005254

0800d0e8 <siprintf>:
 800d0e8:	b40e      	push	{r1, r2, r3}
 800d0ea:	b500      	push	{lr}
 800d0ec:	b09c      	sub	sp, #112	; 0x70
 800d0ee:	ab1d      	add	r3, sp, #116	; 0x74
 800d0f0:	9002      	str	r0, [sp, #8]
 800d0f2:	9006      	str	r0, [sp, #24]
 800d0f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d0f8:	4809      	ldr	r0, [pc, #36]	; (800d120 <siprintf+0x38>)
 800d0fa:	9107      	str	r1, [sp, #28]
 800d0fc:	9104      	str	r1, [sp, #16]
 800d0fe:	4909      	ldr	r1, [pc, #36]	; (800d124 <siprintf+0x3c>)
 800d100:	f853 2b04 	ldr.w	r2, [r3], #4
 800d104:	9105      	str	r1, [sp, #20]
 800d106:	6800      	ldr	r0, [r0, #0]
 800d108:	9301      	str	r3, [sp, #4]
 800d10a:	a902      	add	r1, sp, #8
 800d10c:	f001 fd88 	bl	800ec20 <_svfiprintf_r>
 800d110:	9b02      	ldr	r3, [sp, #8]
 800d112:	2200      	movs	r2, #0
 800d114:	701a      	strb	r2, [r3, #0]
 800d116:	b01c      	add	sp, #112	; 0x70
 800d118:	f85d eb04 	ldr.w	lr, [sp], #4
 800d11c:	b003      	add	sp, #12
 800d11e:	4770      	bx	lr
 800d120:	2000000c 	.word	0x2000000c
 800d124:	ffff0208 	.word	0xffff0208

0800d128 <__swbuf_r>:
 800d128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d12a:	460e      	mov	r6, r1
 800d12c:	4614      	mov	r4, r2
 800d12e:	4605      	mov	r5, r0
 800d130:	b118      	cbz	r0, 800d13a <__swbuf_r+0x12>
 800d132:	6983      	ldr	r3, [r0, #24]
 800d134:	b90b      	cbnz	r3, 800d13a <__swbuf_r+0x12>
 800d136:	f001 f86b 	bl	800e210 <__sinit>
 800d13a:	4b21      	ldr	r3, [pc, #132]	; (800d1c0 <__swbuf_r+0x98>)
 800d13c:	429c      	cmp	r4, r3
 800d13e:	d12b      	bne.n	800d198 <__swbuf_r+0x70>
 800d140:	686c      	ldr	r4, [r5, #4]
 800d142:	69a3      	ldr	r3, [r4, #24]
 800d144:	60a3      	str	r3, [r4, #8]
 800d146:	89a3      	ldrh	r3, [r4, #12]
 800d148:	071a      	lsls	r2, r3, #28
 800d14a:	d52f      	bpl.n	800d1ac <__swbuf_r+0x84>
 800d14c:	6923      	ldr	r3, [r4, #16]
 800d14e:	b36b      	cbz	r3, 800d1ac <__swbuf_r+0x84>
 800d150:	6923      	ldr	r3, [r4, #16]
 800d152:	6820      	ldr	r0, [r4, #0]
 800d154:	1ac0      	subs	r0, r0, r3
 800d156:	6963      	ldr	r3, [r4, #20]
 800d158:	b2f6      	uxtb	r6, r6
 800d15a:	4283      	cmp	r3, r0
 800d15c:	4637      	mov	r7, r6
 800d15e:	dc04      	bgt.n	800d16a <__swbuf_r+0x42>
 800d160:	4621      	mov	r1, r4
 800d162:	4628      	mov	r0, r5
 800d164:	f000 ffc0 	bl	800e0e8 <_fflush_r>
 800d168:	bb30      	cbnz	r0, 800d1b8 <__swbuf_r+0x90>
 800d16a:	68a3      	ldr	r3, [r4, #8]
 800d16c:	3b01      	subs	r3, #1
 800d16e:	60a3      	str	r3, [r4, #8]
 800d170:	6823      	ldr	r3, [r4, #0]
 800d172:	1c5a      	adds	r2, r3, #1
 800d174:	6022      	str	r2, [r4, #0]
 800d176:	701e      	strb	r6, [r3, #0]
 800d178:	6963      	ldr	r3, [r4, #20]
 800d17a:	3001      	adds	r0, #1
 800d17c:	4283      	cmp	r3, r0
 800d17e:	d004      	beq.n	800d18a <__swbuf_r+0x62>
 800d180:	89a3      	ldrh	r3, [r4, #12]
 800d182:	07db      	lsls	r3, r3, #31
 800d184:	d506      	bpl.n	800d194 <__swbuf_r+0x6c>
 800d186:	2e0a      	cmp	r6, #10
 800d188:	d104      	bne.n	800d194 <__swbuf_r+0x6c>
 800d18a:	4621      	mov	r1, r4
 800d18c:	4628      	mov	r0, r5
 800d18e:	f000 ffab 	bl	800e0e8 <_fflush_r>
 800d192:	b988      	cbnz	r0, 800d1b8 <__swbuf_r+0x90>
 800d194:	4638      	mov	r0, r7
 800d196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d198:	4b0a      	ldr	r3, [pc, #40]	; (800d1c4 <__swbuf_r+0x9c>)
 800d19a:	429c      	cmp	r4, r3
 800d19c:	d101      	bne.n	800d1a2 <__swbuf_r+0x7a>
 800d19e:	68ac      	ldr	r4, [r5, #8]
 800d1a0:	e7cf      	b.n	800d142 <__swbuf_r+0x1a>
 800d1a2:	4b09      	ldr	r3, [pc, #36]	; (800d1c8 <__swbuf_r+0xa0>)
 800d1a4:	429c      	cmp	r4, r3
 800d1a6:	bf08      	it	eq
 800d1a8:	68ec      	ldreq	r4, [r5, #12]
 800d1aa:	e7ca      	b.n	800d142 <__swbuf_r+0x1a>
 800d1ac:	4621      	mov	r1, r4
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	f000 f80c 	bl	800d1cc <__swsetup_r>
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d0cb      	beq.n	800d150 <__swbuf_r+0x28>
 800d1b8:	f04f 37ff 	mov.w	r7, #4294967295
 800d1bc:	e7ea      	b.n	800d194 <__swbuf_r+0x6c>
 800d1be:	bf00      	nop
 800d1c0:	080113c4 	.word	0x080113c4
 800d1c4:	080113e4 	.word	0x080113e4
 800d1c8:	080113a4 	.word	0x080113a4

0800d1cc <__swsetup_r>:
 800d1cc:	4b32      	ldr	r3, [pc, #200]	; (800d298 <__swsetup_r+0xcc>)
 800d1ce:	b570      	push	{r4, r5, r6, lr}
 800d1d0:	681d      	ldr	r5, [r3, #0]
 800d1d2:	4606      	mov	r6, r0
 800d1d4:	460c      	mov	r4, r1
 800d1d6:	b125      	cbz	r5, 800d1e2 <__swsetup_r+0x16>
 800d1d8:	69ab      	ldr	r3, [r5, #24]
 800d1da:	b913      	cbnz	r3, 800d1e2 <__swsetup_r+0x16>
 800d1dc:	4628      	mov	r0, r5
 800d1de:	f001 f817 	bl	800e210 <__sinit>
 800d1e2:	4b2e      	ldr	r3, [pc, #184]	; (800d29c <__swsetup_r+0xd0>)
 800d1e4:	429c      	cmp	r4, r3
 800d1e6:	d10f      	bne.n	800d208 <__swsetup_r+0x3c>
 800d1e8:	686c      	ldr	r4, [r5, #4]
 800d1ea:	89a3      	ldrh	r3, [r4, #12]
 800d1ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1f0:	0719      	lsls	r1, r3, #28
 800d1f2:	d42c      	bmi.n	800d24e <__swsetup_r+0x82>
 800d1f4:	06dd      	lsls	r5, r3, #27
 800d1f6:	d411      	bmi.n	800d21c <__swsetup_r+0x50>
 800d1f8:	2309      	movs	r3, #9
 800d1fa:	6033      	str	r3, [r6, #0]
 800d1fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d200:	81a3      	strh	r3, [r4, #12]
 800d202:	f04f 30ff 	mov.w	r0, #4294967295
 800d206:	e03e      	b.n	800d286 <__swsetup_r+0xba>
 800d208:	4b25      	ldr	r3, [pc, #148]	; (800d2a0 <__swsetup_r+0xd4>)
 800d20a:	429c      	cmp	r4, r3
 800d20c:	d101      	bne.n	800d212 <__swsetup_r+0x46>
 800d20e:	68ac      	ldr	r4, [r5, #8]
 800d210:	e7eb      	b.n	800d1ea <__swsetup_r+0x1e>
 800d212:	4b24      	ldr	r3, [pc, #144]	; (800d2a4 <__swsetup_r+0xd8>)
 800d214:	429c      	cmp	r4, r3
 800d216:	bf08      	it	eq
 800d218:	68ec      	ldreq	r4, [r5, #12]
 800d21a:	e7e6      	b.n	800d1ea <__swsetup_r+0x1e>
 800d21c:	0758      	lsls	r0, r3, #29
 800d21e:	d512      	bpl.n	800d246 <__swsetup_r+0x7a>
 800d220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d222:	b141      	cbz	r1, 800d236 <__swsetup_r+0x6a>
 800d224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d228:	4299      	cmp	r1, r3
 800d22a:	d002      	beq.n	800d232 <__swsetup_r+0x66>
 800d22c:	4630      	mov	r0, r6
 800d22e:	f7ff f9ab 	bl	800c588 <_free_r>
 800d232:	2300      	movs	r3, #0
 800d234:	6363      	str	r3, [r4, #52]	; 0x34
 800d236:	89a3      	ldrh	r3, [r4, #12]
 800d238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d23c:	81a3      	strh	r3, [r4, #12]
 800d23e:	2300      	movs	r3, #0
 800d240:	6063      	str	r3, [r4, #4]
 800d242:	6923      	ldr	r3, [r4, #16]
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	89a3      	ldrh	r3, [r4, #12]
 800d248:	f043 0308 	orr.w	r3, r3, #8
 800d24c:	81a3      	strh	r3, [r4, #12]
 800d24e:	6923      	ldr	r3, [r4, #16]
 800d250:	b94b      	cbnz	r3, 800d266 <__swsetup_r+0x9a>
 800d252:	89a3      	ldrh	r3, [r4, #12]
 800d254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d25c:	d003      	beq.n	800d266 <__swsetup_r+0x9a>
 800d25e:	4621      	mov	r1, r4
 800d260:	4630      	mov	r0, r6
 800d262:	f001 f8b1 	bl	800e3c8 <__smakebuf_r>
 800d266:	89a0      	ldrh	r0, [r4, #12]
 800d268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d26c:	f010 0301 	ands.w	r3, r0, #1
 800d270:	d00a      	beq.n	800d288 <__swsetup_r+0xbc>
 800d272:	2300      	movs	r3, #0
 800d274:	60a3      	str	r3, [r4, #8]
 800d276:	6963      	ldr	r3, [r4, #20]
 800d278:	425b      	negs	r3, r3
 800d27a:	61a3      	str	r3, [r4, #24]
 800d27c:	6923      	ldr	r3, [r4, #16]
 800d27e:	b943      	cbnz	r3, 800d292 <__swsetup_r+0xc6>
 800d280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d284:	d1ba      	bne.n	800d1fc <__swsetup_r+0x30>
 800d286:	bd70      	pop	{r4, r5, r6, pc}
 800d288:	0781      	lsls	r1, r0, #30
 800d28a:	bf58      	it	pl
 800d28c:	6963      	ldrpl	r3, [r4, #20]
 800d28e:	60a3      	str	r3, [r4, #8]
 800d290:	e7f4      	b.n	800d27c <__swsetup_r+0xb0>
 800d292:	2000      	movs	r0, #0
 800d294:	e7f7      	b.n	800d286 <__swsetup_r+0xba>
 800d296:	bf00      	nop
 800d298:	2000000c 	.word	0x2000000c
 800d29c:	080113c4 	.word	0x080113c4
 800d2a0:	080113e4 	.word	0x080113e4
 800d2a4:	080113a4 	.word	0x080113a4

0800d2a8 <__assert_func>:
 800d2a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2aa:	4614      	mov	r4, r2
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	4b09      	ldr	r3, [pc, #36]	; (800d2d4 <__assert_func+0x2c>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4605      	mov	r5, r0
 800d2b4:	68d8      	ldr	r0, [r3, #12]
 800d2b6:	b14c      	cbz	r4, 800d2cc <__assert_func+0x24>
 800d2b8:	4b07      	ldr	r3, [pc, #28]	; (800d2d8 <__assert_func+0x30>)
 800d2ba:	9100      	str	r1, [sp, #0]
 800d2bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2c0:	4906      	ldr	r1, [pc, #24]	; (800d2dc <__assert_func+0x34>)
 800d2c2:	462b      	mov	r3, r5
 800d2c4:	f001 f822 	bl	800e30c <fiprintf>
 800d2c8:	f001 ff5a 	bl	800f180 <abort>
 800d2cc:	4b04      	ldr	r3, [pc, #16]	; (800d2e0 <__assert_func+0x38>)
 800d2ce:	461c      	mov	r4, r3
 800d2d0:	e7f3      	b.n	800d2ba <__assert_func+0x12>
 800d2d2:	bf00      	nop
 800d2d4:	2000000c 	.word	0x2000000c
 800d2d8:	080112ee 	.word	0x080112ee
 800d2dc:	080112fb 	.word	0x080112fb
 800d2e0:	08011329 	.word	0x08011329

0800d2e4 <quorem>:
 800d2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e8:	6903      	ldr	r3, [r0, #16]
 800d2ea:	690c      	ldr	r4, [r1, #16]
 800d2ec:	42a3      	cmp	r3, r4
 800d2ee:	4607      	mov	r7, r0
 800d2f0:	f2c0 8081 	blt.w	800d3f6 <quorem+0x112>
 800d2f4:	3c01      	subs	r4, #1
 800d2f6:	f101 0814 	add.w	r8, r1, #20
 800d2fa:	f100 0514 	add.w	r5, r0, #20
 800d2fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d302:	9301      	str	r3, [sp, #4]
 800d304:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d308:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d30c:	3301      	adds	r3, #1
 800d30e:	429a      	cmp	r2, r3
 800d310:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d314:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d318:	fbb2 f6f3 	udiv	r6, r2, r3
 800d31c:	d331      	bcc.n	800d382 <quorem+0x9e>
 800d31e:	f04f 0e00 	mov.w	lr, #0
 800d322:	4640      	mov	r0, r8
 800d324:	46ac      	mov	ip, r5
 800d326:	46f2      	mov	sl, lr
 800d328:	f850 2b04 	ldr.w	r2, [r0], #4
 800d32c:	b293      	uxth	r3, r2
 800d32e:	fb06 e303 	mla	r3, r6, r3, lr
 800d332:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d336:	b29b      	uxth	r3, r3
 800d338:	ebaa 0303 	sub.w	r3, sl, r3
 800d33c:	f8dc a000 	ldr.w	sl, [ip]
 800d340:	0c12      	lsrs	r2, r2, #16
 800d342:	fa13 f38a 	uxtah	r3, r3, sl
 800d346:	fb06 e202 	mla	r2, r6, r2, lr
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	9b00      	ldr	r3, [sp, #0]
 800d34e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d352:	b292      	uxth	r2, r2
 800d354:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d35c:	f8bd 3000 	ldrh.w	r3, [sp]
 800d360:	4581      	cmp	r9, r0
 800d362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d366:	f84c 3b04 	str.w	r3, [ip], #4
 800d36a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d36e:	d2db      	bcs.n	800d328 <quorem+0x44>
 800d370:	f855 300b 	ldr.w	r3, [r5, fp]
 800d374:	b92b      	cbnz	r3, 800d382 <quorem+0x9e>
 800d376:	9b01      	ldr	r3, [sp, #4]
 800d378:	3b04      	subs	r3, #4
 800d37a:	429d      	cmp	r5, r3
 800d37c:	461a      	mov	r2, r3
 800d37e:	d32e      	bcc.n	800d3de <quorem+0xfa>
 800d380:	613c      	str	r4, [r7, #16]
 800d382:	4638      	mov	r0, r7
 800d384:	f001 faee 	bl	800e964 <__mcmp>
 800d388:	2800      	cmp	r0, #0
 800d38a:	db24      	blt.n	800d3d6 <quorem+0xf2>
 800d38c:	3601      	adds	r6, #1
 800d38e:	4628      	mov	r0, r5
 800d390:	f04f 0c00 	mov.w	ip, #0
 800d394:	f858 2b04 	ldr.w	r2, [r8], #4
 800d398:	f8d0 e000 	ldr.w	lr, [r0]
 800d39c:	b293      	uxth	r3, r2
 800d39e:	ebac 0303 	sub.w	r3, ip, r3
 800d3a2:	0c12      	lsrs	r2, r2, #16
 800d3a4:	fa13 f38e 	uxtah	r3, r3, lr
 800d3a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d3ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3b6:	45c1      	cmp	r9, r8
 800d3b8:	f840 3b04 	str.w	r3, [r0], #4
 800d3bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d3c0:	d2e8      	bcs.n	800d394 <quorem+0xb0>
 800d3c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3ca:	b922      	cbnz	r2, 800d3d6 <quorem+0xf2>
 800d3cc:	3b04      	subs	r3, #4
 800d3ce:	429d      	cmp	r5, r3
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	d30a      	bcc.n	800d3ea <quorem+0x106>
 800d3d4:	613c      	str	r4, [r7, #16]
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	b003      	add	sp, #12
 800d3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3de:	6812      	ldr	r2, [r2, #0]
 800d3e0:	3b04      	subs	r3, #4
 800d3e2:	2a00      	cmp	r2, #0
 800d3e4:	d1cc      	bne.n	800d380 <quorem+0x9c>
 800d3e6:	3c01      	subs	r4, #1
 800d3e8:	e7c7      	b.n	800d37a <quorem+0x96>
 800d3ea:	6812      	ldr	r2, [r2, #0]
 800d3ec:	3b04      	subs	r3, #4
 800d3ee:	2a00      	cmp	r2, #0
 800d3f0:	d1f0      	bne.n	800d3d4 <quorem+0xf0>
 800d3f2:	3c01      	subs	r4, #1
 800d3f4:	e7eb      	b.n	800d3ce <quorem+0xea>
 800d3f6:	2000      	movs	r0, #0
 800d3f8:	e7ee      	b.n	800d3d8 <quorem+0xf4>
 800d3fa:	0000      	movs	r0, r0
 800d3fc:	0000      	movs	r0, r0
	...

0800d400 <_dtoa_r>:
 800d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d404:	ed2d 8b04 	vpush	{d8-d9}
 800d408:	ec57 6b10 	vmov	r6, r7, d0
 800d40c:	b093      	sub	sp, #76	; 0x4c
 800d40e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d410:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d414:	9106      	str	r1, [sp, #24]
 800d416:	ee10 aa10 	vmov	sl, s0
 800d41a:	4604      	mov	r4, r0
 800d41c:	9209      	str	r2, [sp, #36]	; 0x24
 800d41e:	930c      	str	r3, [sp, #48]	; 0x30
 800d420:	46bb      	mov	fp, r7
 800d422:	b975      	cbnz	r5, 800d442 <_dtoa_r+0x42>
 800d424:	2010      	movs	r0, #16
 800d426:	f7ff f873 	bl	800c510 <malloc>
 800d42a:	4602      	mov	r2, r0
 800d42c:	6260      	str	r0, [r4, #36]	; 0x24
 800d42e:	b920      	cbnz	r0, 800d43a <_dtoa_r+0x3a>
 800d430:	4ba7      	ldr	r3, [pc, #668]	; (800d6d0 <_dtoa_r+0x2d0>)
 800d432:	21ea      	movs	r1, #234	; 0xea
 800d434:	48a7      	ldr	r0, [pc, #668]	; (800d6d4 <_dtoa_r+0x2d4>)
 800d436:	f7ff ff37 	bl	800d2a8 <__assert_func>
 800d43a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d43e:	6005      	str	r5, [r0, #0]
 800d440:	60c5      	str	r5, [r0, #12]
 800d442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d444:	6819      	ldr	r1, [r3, #0]
 800d446:	b151      	cbz	r1, 800d45e <_dtoa_r+0x5e>
 800d448:	685a      	ldr	r2, [r3, #4]
 800d44a:	604a      	str	r2, [r1, #4]
 800d44c:	2301      	movs	r3, #1
 800d44e:	4093      	lsls	r3, r2
 800d450:	608b      	str	r3, [r1, #8]
 800d452:	4620      	mov	r0, r4
 800d454:	f001 f844 	bl	800e4e0 <_Bfree>
 800d458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d45a:	2200      	movs	r2, #0
 800d45c:	601a      	str	r2, [r3, #0]
 800d45e:	1e3b      	subs	r3, r7, #0
 800d460:	bfaa      	itet	ge
 800d462:	2300      	movge	r3, #0
 800d464:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d468:	f8c8 3000 	strge.w	r3, [r8]
 800d46c:	4b9a      	ldr	r3, [pc, #616]	; (800d6d8 <_dtoa_r+0x2d8>)
 800d46e:	bfbc      	itt	lt
 800d470:	2201      	movlt	r2, #1
 800d472:	f8c8 2000 	strlt.w	r2, [r8]
 800d476:	ea33 030b 	bics.w	r3, r3, fp
 800d47a:	d11b      	bne.n	800d4b4 <_dtoa_r+0xb4>
 800d47c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d47e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d482:	6013      	str	r3, [r2, #0]
 800d484:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d488:	4333      	orrs	r3, r6
 800d48a:	f000 8592 	beq.w	800dfb2 <_dtoa_r+0xbb2>
 800d48e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d490:	b963      	cbnz	r3, 800d4ac <_dtoa_r+0xac>
 800d492:	4b92      	ldr	r3, [pc, #584]	; (800d6dc <_dtoa_r+0x2dc>)
 800d494:	e022      	b.n	800d4dc <_dtoa_r+0xdc>
 800d496:	4b92      	ldr	r3, [pc, #584]	; (800d6e0 <_dtoa_r+0x2e0>)
 800d498:	9301      	str	r3, [sp, #4]
 800d49a:	3308      	adds	r3, #8
 800d49c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d49e:	6013      	str	r3, [r2, #0]
 800d4a0:	9801      	ldr	r0, [sp, #4]
 800d4a2:	b013      	add	sp, #76	; 0x4c
 800d4a4:	ecbd 8b04 	vpop	{d8-d9}
 800d4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ac:	4b8b      	ldr	r3, [pc, #556]	; (800d6dc <_dtoa_r+0x2dc>)
 800d4ae:	9301      	str	r3, [sp, #4]
 800d4b0:	3303      	adds	r3, #3
 800d4b2:	e7f3      	b.n	800d49c <_dtoa_r+0x9c>
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	4650      	mov	r0, sl
 800d4ba:	4659      	mov	r1, fp
 800d4bc:	f7f3 fb2c 	bl	8000b18 <__aeabi_dcmpeq>
 800d4c0:	ec4b ab19 	vmov	d9, sl, fp
 800d4c4:	4680      	mov	r8, r0
 800d4c6:	b158      	cbz	r0, 800d4e0 <_dtoa_r+0xe0>
 800d4c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	6013      	str	r3, [r2, #0]
 800d4ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f000 856b 	beq.w	800dfac <_dtoa_r+0xbac>
 800d4d6:	4883      	ldr	r0, [pc, #524]	; (800d6e4 <_dtoa_r+0x2e4>)
 800d4d8:	6018      	str	r0, [r3, #0]
 800d4da:	1e43      	subs	r3, r0, #1
 800d4dc:	9301      	str	r3, [sp, #4]
 800d4de:	e7df      	b.n	800d4a0 <_dtoa_r+0xa0>
 800d4e0:	ec4b ab10 	vmov	d0, sl, fp
 800d4e4:	aa10      	add	r2, sp, #64	; 0x40
 800d4e6:	a911      	add	r1, sp, #68	; 0x44
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f001 fae1 	bl	800eab0 <__d2b>
 800d4ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d4f2:	ee08 0a10 	vmov	s16, r0
 800d4f6:	2d00      	cmp	r5, #0
 800d4f8:	f000 8084 	beq.w	800d604 <_dtoa_r+0x204>
 800d4fc:	ee19 3a90 	vmov	r3, s19
 800d500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d504:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d508:	4656      	mov	r6, sl
 800d50a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d50e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d512:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d516:	4b74      	ldr	r3, [pc, #464]	; (800d6e8 <_dtoa_r+0x2e8>)
 800d518:	2200      	movs	r2, #0
 800d51a:	4630      	mov	r0, r6
 800d51c:	4639      	mov	r1, r7
 800d51e:	f7f2 fedb 	bl	80002d8 <__aeabi_dsub>
 800d522:	a365      	add	r3, pc, #404	; (adr r3, 800d6b8 <_dtoa_r+0x2b8>)
 800d524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d528:	f7f3 f88e 	bl	8000648 <__aeabi_dmul>
 800d52c:	a364      	add	r3, pc, #400	; (adr r3, 800d6c0 <_dtoa_r+0x2c0>)
 800d52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d532:	f7f2 fed3 	bl	80002dc <__adddf3>
 800d536:	4606      	mov	r6, r0
 800d538:	4628      	mov	r0, r5
 800d53a:	460f      	mov	r7, r1
 800d53c:	f7f3 f81a 	bl	8000574 <__aeabi_i2d>
 800d540:	a361      	add	r3, pc, #388	; (adr r3, 800d6c8 <_dtoa_r+0x2c8>)
 800d542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d546:	f7f3 f87f 	bl	8000648 <__aeabi_dmul>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	4630      	mov	r0, r6
 800d550:	4639      	mov	r1, r7
 800d552:	f7f2 fec3 	bl	80002dc <__adddf3>
 800d556:	4606      	mov	r6, r0
 800d558:	460f      	mov	r7, r1
 800d55a:	f7f3 fb25 	bl	8000ba8 <__aeabi_d2iz>
 800d55e:	2200      	movs	r2, #0
 800d560:	9000      	str	r0, [sp, #0]
 800d562:	2300      	movs	r3, #0
 800d564:	4630      	mov	r0, r6
 800d566:	4639      	mov	r1, r7
 800d568:	f7f3 fae0 	bl	8000b2c <__aeabi_dcmplt>
 800d56c:	b150      	cbz	r0, 800d584 <_dtoa_r+0x184>
 800d56e:	9800      	ldr	r0, [sp, #0]
 800d570:	f7f3 f800 	bl	8000574 <__aeabi_i2d>
 800d574:	4632      	mov	r2, r6
 800d576:	463b      	mov	r3, r7
 800d578:	f7f3 face 	bl	8000b18 <__aeabi_dcmpeq>
 800d57c:	b910      	cbnz	r0, 800d584 <_dtoa_r+0x184>
 800d57e:	9b00      	ldr	r3, [sp, #0]
 800d580:	3b01      	subs	r3, #1
 800d582:	9300      	str	r3, [sp, #0]
 800d584:	9b00      	ldr	r3, [sp, #0]
 800d586:	2b16      	cmp	r3, #22
 800d588:	d85a      	bhi.n	800d640 <_dtoa_r+0x240>
 800d58a:	9a00      	ldr	r2, [sp, #0]
 800d58c:	4b57      	ldr	r3, [pc, #348]	; (800d6ec <_dtoa_r+0x2ec>)
 800d58e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d596:	ec51 0b19 	vmov	r0, r1, d9
 800d59a:	f7f3 fac7 	bl	8000b2c <__aeabi_dcmplt>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d050      	beq.n	800d644 <_dtoa_r+0x244>
 800d5a2:	9b00      	ldr	r3, [sp, #0]
 800d5a4:	3b01      	subs	r3, #1
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5ae:	1b5d      	subs	r5, r3, r5
 800d5b0:	1e6b      	subs	r3, r5, #1
 800d5b2:	9305      	str	r3, [sp, #20]
 800d5b4:	bf45      	ittet	mi
 800d5b6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d5ba:	9304      	strmi	r3, [sp, #16]
 800d5bc:	2300      	movpl	r3, #0
 800d5be:	2300      	movmi	r3, #0
 800d5c0:	bf4c      	ite	mi
 800d5c2:	9305      	strmi	r3, [sp, #20]
 800d5c4:	9304      	strpl	r3, [sp, #16]
 800d5c6:	9b00      	ldr	r3, [sp, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	db3d      	blt.n	800d648 <_dtoa_r+0x248>
 800d5cc:	9b05      	ldr	r3, [sp, #20]
 800d5ce:	9a00      	ldr	r2, [sp, #0]
 800d5d0:	920a      	str	r2, [sp, #40]	; 0x28
 800d5d2:	4413      	add	r3, r2
 800d5d4:	9305      	str	r3, [sp, #20]
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	9307      	str	r3, [sp, #28]
 800d5da:	9b06      	ldr	r3, [sp, #24]
 800d5dc:	2b09      	cmp	r3, #9
 800d5de:	f200 8089 	bhi.w	800d6f4 <_dtoa_r+0x2f4>
 800d5e2:	2b05      	cmp	r3, #5
 800d5e4:	bfc4      	itt	gt
 800d5e6:	3b04      	subgt	r3, #4
 800d5e8:	9306      	strgt	r3, [sp, #24]
 800d5ea:	9b06      	ldr	r3, [sp, #24]
 800d5ec:	f1a3 0302 	sub.w	r3, r3, #2
 800d5f0:	bfcc      	ite	gt
 800d5f2:	2500      	movgt	r5, #0
 800d5f4:	2501      	movle	r5, #1
 800d5f6:	2b03      	cmp	r3, #3
 800d5f8:	f200 8087 	bhi.w	800d70a <_dtoa_r+0x30a>
 800d5fc:	e8df f003 	tbb	[pc, r3]
 800d600:	59383a2d 	.word	0x59383a2d
 800d604:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d608:	441d      	add	r5, r3
 800d60a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d60e:	2b20      	cmp	r3, #32
 800d610:	bfc1      	itttt	gt
 800d612:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d616:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d61a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d61e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d622:	bfda      	itte	le
 800d624:	f1c3 0320 	rsble	r3, r3, #32
 800d628:	fa06 f003 	lslle.w	r0, r6, r3
 800d62c:	4318      	orrgt	r0, r3
 800d62e:	f7f2 ff91 	bl	8000554 <__aeabi_ui2d>
 800d632:	2301      	movs	r3, #1
 800d634:	4606      	mov	r6, r0
 800d636:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d63a:	3d01      	subs	r5, #1
 800d63c:	930e      	str	r3, [sp, #56]	; 0x38
 800d63e:	e76a      	b.n	800d516 <_dtoa_r+0x116>
 800d640:	2301      	movs	r3, #1
 800d642:	e7b2      	b.n	800d5aa <_dtoa_r+0x1aa>
 800d644:	900b      	str	r0, [sp, #44]	; 0x2c
 800d646:	e7b1      	b.n	800d5ac <_dtoa_r+0x1ac>
 800d648:	9b04      	ldr	r3, [sp, #16]
 800d64a:	9a00      	ldr	r2, [sp, #0]
 800d64c:	1a9b      	subs	r3, r3, r2
 800d64e:	9304      	str	r3, [sp, #16]
 800d650:	4253      	negs	r3, r2
 800d652:	9307      	str	r3, [sp, #28]
 800d654:	2300      	movs	r3, #0
 800d656:	930a      	str	r3, [sp, #40]	; 0x28
 800d658:	e7bf      	b.n	800d5da <_dtoa_r+0x1da>
 800d65a:	2300      	movs	r3, #0
 800d65c:	9308      	str	r3, [sp, #32]
 800d65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d660:	2b00      	cmp	r3, #0
 800d662:	dc55      	bgt.n	800d710 <_dtoa_r+0x310>
 800d664:	2301      	movs	r3, #1
 800d666:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d66a:	461a      	mov	r2, r3
 800d66c:	9209      	str	r2, [sp, #36]	; 0x24
 800d66e:	e00c      	b.n	800d68a <_dtoa_r+0x28a>
 800d670:	2301      	movs	r3, #1
 800d672:	e7f3      	b.n	800d65c <_dtoa_r+0x25c>
 800d674:	2300      	movs	r3, #0
 800d676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d678:	9308      	str	r3, [sp, #32]
 800d67a:	9b00      	ldr	r3, [sp, #0]
 800d67c:	4413      	add	r3, r2
 800d67e:	9302      	str	r3, [sp, #8]
 800d680:	3301      	adds	r3, #1
 800d682:	2b01      	cmp	r3, #1
 800d684:	9303      	str	r3, [sp, #12]
 800d686:	bfb8      	it	lt
 800d688:	2301      	movlt	r3, #1
 800d68a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d68c:	2200      	movs	r2, #0
 800d68e:	6042      	str	r2, [r0, #4]
 800d690:	2204      	movs	r2, #4
 800d692:	f102 0614 	add.w	r6, r2, #20
 800d696:	429e      	cmp	r6, r3
 800d698:	6841      	ldr	r1, [r0, #4]
 800d69a:	d93d      	bls.n	800d718 <_dtoa_r+0x318>
 800d69c:	4620      	mov	r0, r4
 800d69e:	f000 fedf 	bl	800e460 <_Balloc>
 800d6a2:	9001      	str	r0, [sp, #4]
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	d13b      	bne.n	800d720 <_dtoa_r+0x320>
 800d6a8:	4b11      	ldr	r3, [pc, #68]	; (800d6f0 <_dtoa_r+0x2f0>)
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d6b0:	e6c0      	b.n	800d434 <_dtoa_r+0x34>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e7df      	b.n	800d676 <_dtoa_r+0x276>
 800d6b6:	bf00      	nop
 800d6b8:	636f4361 	.word	0x636f4361
 800d6bc:	3fd287a7 	.word	0x3fd287a7
 800d6c0:	8b60c8b3 	.word	0x8b60c8b3
 800d6c4:	3fc68a28 	.word	0x3fc68a28
 800d6c8:	509f79fb 	.word	0x509f79fb
 800d6cc:	3fd34413 	.word	0x3fd34413
 800d6d0:	0801127c 	.word	0x0801127c
 800d6d4:	08011337 	.word	0x08011337
 800d6d8:	7ff00000 	.word	0x7ff00000
 800d6dc:	08011333 	.word	0x08011333
 800d6e0:	0801132a 	.word	0x0801132a
 800d6e4:	08011259 	.word	0x08011259
 800d6e8:	3ff80000 	.word	0x3ff80000
 800d6ec:	08011488 	.word	0x08011488
 800d6f0:	08011392 	.word	0x08011392
 800d6f4:	2501      	movs	r5, #1
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	9306      	str	r3, [sp, #24]
 800d6fa:	9508      	str	r5, [sp, #32]
 800d6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d700:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d704:	2200      	movs	r2, #0
 800d706:	2312      	movs	r3, #18
 800d708:	e7b0      	b.n	800d66c <_dtoa_r+0x26c>
 800d70a:	2301      	movs	r3, #1
 800d70c:	9308      	str	r3, [sp, #32]
 800d70e:	e7f5      	b.n	800d6fc <_dtoa_r+0x2fc>
 800d710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d712:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d716:	e7b8      	b.n	800d68a <_dtoa_r+0x28a>
 800d718:	3101      	adds	r1, #1
 800d71a:	6041      	str	r1, [r0, #4]
 800d71c:	0052      	lsls	r2, r2, #1
 800d71e:	e7b8      	b.n	800d692 <_dtoa_r+0x292>
 800d720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d722:	9a01      	ldr	r2, [sp, #4]
 800d724:	601a      	str	r2, [r3, #0]
 800d726:	9b03      	ldr	r3, [sp, #12]
 800d728:	2b0e      	cmp	r3, #14
 800d72a:	f200 809d 	bhi.w	800d868 <_dtoa_r+0x468>
 800d72e:	2d00      	cmp	r5, #0
 800d730:	f000 809a 	beq.w	800d868 <_dtoa_r+0x468>
 800d734:	9b00      	ldr	r3, [sp, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	dd32      	ble.n	800d7a0 <_dtoa_r+0x3a0>
 800d73a:	4ab7      	ldr	r2, [pc, #732]	; (800da18 <_dtoa_r+0x618>)
 800d73c:	f003 030f 	and.w	r3, r3, #15
 800d740:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d744:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d748:	9b00      	ldr	r3, [sp, #0]
 800d74a:	05d8      	lsls	r0, r3, #23
 800d74c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d750:	d516      	bpl.n	800d780 <_dtoa_r+0x380>
 800d752:	4bb2      	ldr	r3, [pc, #712]	; (800da1c <_dtoa_r+0x61c>)
 800d754:	ec51 0b19 	vmov	r0, r1, d9
 800d758:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d75c:	f7f3 f89e 	bl	800089c <__aeabi_ddiv>
 800d760:	f007 070f 	and.w	r7, r7, #15
 800d764:	4682      	mov	sl, r0
 800d766:	468b      	mov	fp, r1
 800d768:	2503      	movs	r5, #3
 800d76a:	4eac      	ldr	r6, [pc, #688]	; (800da1c <_dtoa_r+0x61c>)
 800d76c:	b957      	cbnz	r7, 800d784 <_dtoa_r+0x384>
 800d76e:	4642      	mov	r2, r8
 800d770:	464b      	mov	r3, r9
 800d772:	4650      	mov	r0, sl
 800d774:	4659      	mov	r1, fp
 800d776:	f7f3 f891 	bl	800089c <__aeabi_ddiv>
 800d77a:	4682      	mov	sl, r0
 800d77c:	468b      	mov	fp, r1
 800d77e:	e028      	b.n	800d7d2 <_dtoa_r+0x3d2>
 800d780:	2502      	movs	r5, #2
 800d782:	e7f2      	b.n	800d76a <_dtoa_r+0x36a>
 800d784:	07f9      	lsls	r1, r7, #31
 800d786:	d508      	bpl.n	800d79a <_dtoa_r+0x39a>
 800d788:	4640      	mov	r0, r8
 800d78a:	4649      	mov	r1, r9
 800d78c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d790:	f7f2 ff5a 	bl	8000648 <__aeabi_dmul>
 800d794:	3501      	adds	r5, #1
 800d796:	4680      	mov	r8, r0
 800d798:	4689      	mov	r9, r1
 800d79a:	107f      	asrs	r7, r7, #1
 800d79c:	3608      	adds	r6, #8
 800d79e:	e7e5      	b.n	800d76c <_dtoa_r+0x36c>
 800d7a0:	f000 809b 	beq.w	800d8da <_dtoa_r+0x4da>
 800d7a4:	9b00      	ldr	r3, [sp, #0]
 800d7a6:	4f9d      	ldr	r7, [pc, #628]	; (800da1c <_dtoa_r+0x61c>)
 800d7a8:	425e      	negs	r6, r3
 800d7aa:	4b9b      	ldr	r3, [pc, #620]	; (800da18 <_dtoa_r+0x618>)
 800d7ac:	f006 020f 	and.w	r2, r6, #15
 800d7b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b8:	ec51 0b19 	vmov	r0, r1, d9
 800d7bc:	f7f2 ff44 	bl	8000648 <__aeabi_dmul>
 800d7c0:	1136      	asrs	r6, r6, #4
 800d7c2:	4682      	mov	sl, r0
 800d7c4:	468b      	mov	fp, r1
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	2502      	movs	r5, #2
 800d7ca:	2e00      	cmp	r6, #0
 800d7cc:	d17a      	bne.n	800d8c4 <_dtoa_r+0x4c4>
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d1d3      	bne.n	800d77a <_dtoa_r+0x37a>
 800d7d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f000 8082 	beq.w	800d8de <_dtoa_r+0x4de>
 800d7da:	4b91      	ldr	r3, [pc, #580]	; (800da20 <_dtoa_r+0x620>)
 800d7dc:	2200      	movs	r2, #0
 800d7de:	4650      	mov	r0, sl
 800d7e0:	4659      	mov	r1, fp
 800d7e2:	f7f3 f9a3 	bl	8000b2c <__aeabi_dcmplt>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	d079      	beq.n	800d8de <_dtoa_r+0x4de>
 800d7ea:	9b03      	ldr	r3, [sp, #12]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d076      	beq.n	800d8de <_dtoa_r+0x4de>
 800d7f0:	9b02      	ldr	r3, [sp, #8]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	dd36      	ble.n	800d864 <_dtoa_r+0x464>
 800d7f6:	9b00      	ldr	r3, [sp, #0]
 800d7f8:	4650      	mov	r0, sl
 800d7fa:	4659      	mov	r1, fp
 800d7fc:	1e5f      	subs	r7, r3, #1
 800d7fe:	2200      	movs	r2, #0
 800d800:	4b88      	ldr	r3, [pc, #544]	; (800da24 <_dtoa_r+0x624>)
 800d802:	f7f2 ff21 	bl	8000648 <__aeabi_dmul>
 800d806:	9e02      	ldr	r6, [sp, #8]
 800d808:	4682      	mov	sl, r0
 800d80a:	468b      	mov	fp, r1
 800d80c:	3501      	adds	r5, #1
 800d80e:	4628      	mov	r0, r5
 800d810:	f7f2 feb0 	bl	8000574 <__aeabi_i2d>
 800d814:	4652      	mov	r2, sl
 800d816:	465b      	mov	r3, fp
 800d818:	f7f2 ff16 	bl	8000648 <__aeabi_dmul>
 800d81c:	4b82      	ldr	r3, [pc, #520]	; (800da28 <_dtoa_r+0x628>)
 800d81e:	2200      	movs	r2, #0
 800d820:	f7f2 fd5c 	bl	80002dc <__adddf3>
 800d824:	46d0      	mov	r8, sl
 800d826:	46d9      	mov	r9, fp
 800d828:	4682      	mov	sl, r0
 800d82a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d82e:	2e00      	cmp	r6, #0
 800d830:	d158      	bne.n	800d8e4 <_dtoa_r+0x4e4>
 800d832:	4b7e      	ldr	r3, [pc, #504]	; (800da2c <_dtoa_r+0x62c>)
 800d834:	2200      	movs	r2, #0
 800d836:	4640      	mov	r0, r8
 800d838:	4649      	mov	r1, r9
 800d83a:	f7f2 fd4d 	bl	80002d8 <__aeabi_dsub>
 800d83e:	4652      	mov	r2, sl
 800d840:	465b      	mov	r3, fp
 800d842:	4680      	mov	r8, r0
 800d844:	4689      	mov	r9, r1
 800d846:	f7f3 f98f 	bl	8000b68 <__aeabi_dcmpgt>
 800d84a:	2800      	cmp	r0, #0
 800d84c:	f040 8295 	bne.w	800dd7a <_dtoa_r+0x97a>
 800d850:	4652      	mov	r2, sl
 800d852:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d856:	4640      	mov	r0, r8
 800d858:	4649      	mov	r1, r9
 800d85a:	f7f3 f967 	bl	8000b2c <__aeabi_dcmplt>
 800d85e:	2800      	cmp	r0, #0
 800d860:	f040 8289 	bne.w	800dd76 <_dtoa_r+0x976>
 800d864:	ec5b ab19 	vmov	sl, fp, d9
 800d868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f2c0 8148 	blt.w	800db00 <_dtoa_r+0x700>
 800d870:	9a00      	ldr	r2, [sp, #0]
 800d872:	2a0e      	cmp	r2, #14
 800d874:	f300 8144 	bgt.w	800db00 <_dtoa_r+0x700>
 800d878:	4b67      	ldr	r3, [pc, #412]	; (800da18 <_dtoa_r+0x618>)
 800d87a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d87e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d884:	2b00      	cmp	r3, #0
 800d886:	f280 80d5 	bge.w	800da34 <_dtoa_r+0x634>
 800d88a:	9b03      	ldr	r3, [sp, #12]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f300 80d1 	bgt.w	800da34 <_dtoa_r+0x634>
 800d892:	f040 826f 	bne.w	800dd74 <_dtoa_r+0x974>
 800d896:	4b65      	ldr	r3, [pc, #404]	; (800da2c <_dtoa_r+0x62c>)
 800d898:	2200      	movs	r2, #0
 800d89a:	4640      	mov	r0, r8
 800d89c:	4649      	mov	r1, r9
 800d89e:	f7f2 fed3 	bl	8000648 <__aeabi_dmul>
 800d8a2:	4652      	mov	r2, sl
 800d8a4:	465b      	mov	r3, fp
 800d8a6:	f7f3 f955 	bl	8000b54 <__aeabi_dcmpge>
 800d8aa:	9e03      	ldr	r6, [sp, #12]
 800d8ac:	4637      	mov	r7, r6
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	f040 8245 	bne.w	800dd3e <_dtoa_r+0x93e>
 800d8b4:	9d01      	ldr	r5, [sp, #4]
 800d8b6:	2331      	movs	r3, #49	; 0x31
 800d8b8:	f805 3b01 	strb.w	r3, [r5], #1
 800d8bc:	9b00      	ldr	r3, [sp, #0]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	9300      	str	r3, [sp, #0]
 800d8c2:	e240      	b.n	800dd46 <_dtoa_r+0x946>
 800d8c4:	07f2      	lsls	r2, r6, #31
 800d8c6:	d505      	bpl.n	800d8d4 <_dtoa_r+0x4d4>
 800d8c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8cc:	f7f2 febc 	bl	8000648 <__aeabi_dmul>
 800d8d0:	3501      	adds	r5, #1
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	1076      	asrs	r6, r6, #1
 800d8d6:	3708      	adds	r7, #8
 800d8d8:	e777      	b.n	800d7ca <_dtoa_r+0x3ca>
 800d8da:	2502      	movs	r5, #2
 800d8dc:	e779      	b.n	800d7d2 <_dtoa_r+0x3d2>
 800d8de:	9f00      	ldr	r7, [sp, #0]
 800d8e0:	9e03      	ldr	r6, [sp, #12]
 800d8e2:	e794      	b.n	800d80e <_dtoa_r+0x40e>
 800d8e4:	9901      	ldr	r1, [sp, #4]
 800d8e6:	4b4c      	ldr	r3, [pc, #304]	; (800da18 <_dtoa_r+0x618>)
 800d8e8:	4431      	add	r1, r6
 800d8ea:	910d      	str	r1, [sp, #52]	; 0x34
 800d8ec:	9908      	ldr	r1, [sp, #32]
 800d8ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d8f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d8f6:	2900      	cmp	r1, #0
 800d8f8:	d043      	beq.n	800d982 <_dtoa_r+0x582>
 800d8fa:	494d      	ldr	r1, [pc, #308]	; (800da30 <_dtoa_r+0x630>)
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	f7f2 ffcd 	bl	800089c <__aeabi_ddiv>
 800d902:	4652      	mov	r2, sl
 800d904:	465b      	mov	r3, fp
 800d906:	f7f2 fce7 	bl	80002d8 <__aeabi_dsub>
 800d90a:	9d01      	ldr	r5, [sp, #4]
 800d90c:	4682      	mov	sl, r0
 800d90e:	468b      	mov	fp, r1
 800d910:	4649      	mov	r1, r9
 800d912:	4640      	mov	r0, r8
 800d914:	f7f3 f948 	bl	8000ba8 <__aeabi_d2iz>
 800d918:	4606      	mov	r6, r0
 800d91a:	f7f2 fe2b 	bl	8000574 <__aeabi_i2d>
 800d91e:	4602      	mov	r2, r0
 800d920:	460b      	mov	r3, r1
 800d922:	4640      	mov	r0, r8
 800d924:	4649      	mov	r1, r9
 800d926:	f7f2 fcd7 	bl	80002d8 <__aeabi_dsub>
 800d92a:	3630      	adds	r6, #48	; 0x30
 800d92c:	f805 6b01 	strb.w	r6, [r5], #1
 800d930:	4652      	mov	r2, sl
 800d932:	465b      	mov	r3, fp
 800d934:	4680      	mov	r8, r0
 800d936:	4689      	mov	r9, r1
 800d938:	f7f3 f8f8 	bl	8000b2c <__aeabi_dcmplt>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	d163      	bne.n	800da08 <_dtoa_r+0x608>
 800d940:	4642      	mov	r2, r8
 800d942:	464b      	mov	r3, r9
 800d944:	4936      	ldr	r1, [pc, #216]	; (800da20 <_dtoa_r+0x620>)
 800d946:	2000      	movs	r0, #0
 800d948:	f7f2 fcc6 	bl	80002d8 <__aeabi_dsub>
 800d94c:	4652      	mov	r2, sl
 800d94e:	465b      	mov	r3, fp
 800d950:	f7f3 f8ec 	bl	8000b2c <__aeabi_dcmplt>
 800d954:	2800      	cmp	r0, #0
 800d956:	f040 80b5 	bne.w	800dac4 <_dtoa_r+0x6c4>
 800d95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d95c:	429d      	cmp	r5, r3
 800d95e:	d081      	beq.n	800d864 <_dtoa_r+0x464>
 800d960:	4b30      	ldr	r3, [pc, #192]	; (800da24 <_dtoa_r+0x624>)
 800d962:	2200      	movs	r2, #0
 800d964:	4650      	mov	r0, sl
 800d966:	4659      	mov	r1, fp
 800d968:	f7f2 fe6e 	bl	8000648 <__aeabi_dmul>
 800d96c:	4b2d      	ldr	r3, [pc, #180]	; (800da24 <_dtoa_r+0x624>)
 800d96e:	4682      	mov	sl, r0
 800d970:	468b      	mov	fp, r1
 800d972:	4640      	mov	r0, r8
 800d974:	4649      	mov	r1, r9
 800d976:	2200      	movs	r2, #0
 800d978:	f7f2 fe66 	bl	8000648 <__aeabi_dmul>
 800d97c:	4680      	mov	r8, r0
 800d97e:	4689      	mov	r9, r1
 800d980:	e7c6      	b.n	800d910 <_dtoa_r+0x510>
 800d982:	4650      	mov	r0, sl
 800d984:	4659      	mov	r1, fp
 800d986:	f7f2 fe5f 	bl	8000648 <__aeabi_dmul>
 800d98a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d98c:	9d01      	ldr	r5, [sp, #4]
 800d98e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d990:	4682      	mov	sl, r0
 800d992:	468b      	mov	fp, r1
 800d994:	4649      	mov	r1, r9
 800d996:	4640      	mov	r0, r8
 800d998:	f7f3 f906 	bl	8000ba8 <__aeabi_d2iz>
 800d99c:	4606      	mov	r6, r0
 800d99e:	f7f2 fde9 	bl	8000574 <__aeabi_i2d>
 800d9a2:	3630      	adds	r6, #48	; 0x30
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	4640      	mov	r0, r8
 800d9aa:	4649      	mov	r1, r9
 800d9ac:	f7f2 fc94 	bl	80002d8 <__aeabi_dsub>
 800d9b0:	f805 6b01 	strb.w	r6, [r5], #1
 800d9b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9b6:	429d      	cmp	r5, r3
 800d9b8:	4680      	mov	r8, r0
 800d9ba:	4689      	mov	r9, r1
 800d9bc:	f04f 0200 	mov.w	r2, #0
 800d9c0:	d124      	bne.n	800da0c <_dtoa_r+0x60c>
 800d9c2:	4b1b      	ldr	r3, [pc, #108]	; (800da30 <_dtoa_r+0x630>)
 800d9c4:	4650      	mov	r0, sl
 800d9c6:	4659      	mov	r1, fp
 800d9c8:	f7f2 fc88 	bl	80002dc <__adddf3>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	4640      	mov	r0, r8
 800d9d2:	4649      	mov	r1, r9
 800d9d4:	f7f3 f8c8 	bl	8000b68 <__aeabi_dcmpgt>
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	d173      	bne.n	800dac4 <_dtoa_r+0x6c4>
 800d9dc:	4652      	mov	r2, sl
 800d9de:	465b      	mov	r3, fp
 800d9e0:	4913      	ldr	r1, [pc, #76]	; (800da30 <_dtoa_r+0x630>)
 800d9e2:	2000      	movs	r0, #0
 800d9e4:	f7f2 fc78 	bl	80002d8 <__aeabi_dsub>
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	4640      	mov	r0, r8
 800d9ee:	4649      	mov	r1, r9
 800d9f0:	f7f3 f89c 	bl	8000b2c <__aeabi_dcmplt>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	f43f af35 	beq.w	800d864 <_dtoa_r+0x464>
 800d9fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d9fc:	1e6b      	subs	r3, r5, #1
 800d9fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800da00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800da04:	2b30      	cmp	r3, #48	; 0x30
 800da06:	d0f8      	beq.n	800d9fa <_dtoa_r+0x5fa>
 800da08:	9700      	str	r7, [sp, #0]
 800da0a:	e049      	b.n	800daa0 <_dtoa_r+0x6a0>
 800da0c:	4b05      	ldr	r3, [pc, #20]	; (800da24 <_dtoa_r+0x624>)
 800da0e:	f7f2 fe1b 	bl	8000648 <__aeabi_dmul>
 800da12:	4680      	mov	r8, r0
 800da14:	4689      	mov	r9, r1
 800da16:	e7bd      	b.n	800d994 <_dtoa_r+0x594>
 800da18:	08011488 	.word	0x08011488
 800da1c:	08011460 	.word	0x08011460
 800da20:	3ff00000 	.word	0x3ff00000
 800da24:	40240000 	.word	0x40240000
 800da28:	401c0000 	.word	0x401c0000
 800da2c:	40140000 	.word	0x40140000
 800da30:	3fe00000 	.word	0x3fe00000
 800da34:	9d01      	ldr	r5, [sp, #4]
 800da36:	4656      	mov	r6, sl
 800da38:	465f      	mov	r7, fp
 800da3a:	4642      	mov	r2, r8
 800da3c:	464b      	mov	r3, r9
 800da3e:	4630      	mov	r0, r6
 800da40:	4639      	mov	r1, r7
 800da42:	f7f2 ff2b 	bl	800089c <__aeabi_ddiv>
 800da46:	f7f3 f8af 	bl	8000ba8 <__aeabi_d2iz>
 800da4a:	4682      	mov	sl, r0
 800da4c:	f7f2 fd92 	bl	8000574 <__aeabi_i2d>
 800da50:	4642      	mov	r2, r8
 800da52:	464b      	mov	r3, r9
 800da54:	f7f2 fdf8 	bl	8000648 <__aeabi_dmul>
 800da58:	4602      	mov	r2, r0
 800da5a:	460b      	mov	r3, r1
 800da5c:	4630      	mov	r0, r6
 800da5e:	4639      	mov	r1, r7
 800da60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800da64:	f7f2 fc38 	bl	80002d8 <__aeabi_dsub>
 800da68:	f805 6b01 	strb.w	r6, [r5], #1
 800da6c:	9e01      	ldr	r6, [sp, #4]
 800da6e:	9f03      	ldr	r7, [sp, #12]
 800da70:	1bae      	subs	r6, r5, r6
 800da72:	42b7      	cmp	r7, r6
 800da74:	4602      	mov	r2, r0
 800da76:	460b      	mov	r3, r1
 800da78:	d135      	bne.n	800dae6 <_dtoa_r+0x6e6>
 800da7a:	f7f2 fc2f 	bl	80002dc <__adddf3>
 800da7e:	4642      	mov	r2, r8
 800da80:	464b      	mov	r3, r9
 800da82:	4606      	mov	r6, r0
 800da84:	460f      	mov	r7, r1
 800da86:	f7f3 f86f 	bl	8000b68 <__aeabi_dcmpgt>
 800da8a:	b9d0      	cbnz	r0, 800dac2 <_dtoa_r+0x6c2>
 800da8c:	4642      	mov	r2, r8
 800da8e:	464b      	mov	r3, r9
 800da90:	4630      	mov	r0, r6
 800da92:	4639      	mov	r1, r7
 800da94:	f7f3 f840 	bl	8000b18 <__aeabi_dcmpeq>
 800da98:	b110      	cbz	r0, 800daa0 <_dtoa_r+0x6a0>
 800da9a:	f01a 0f01 	tst.w	sl, #1
 800da9e:	d110      	bne.n	800dac2 <_dtoa_r+0x6c2>
 800daa0:	4620      	mov	r0, r4
 800daa2:	ee18 1a10 	vmov	r1, s16
 800daa6:	f000 fd1b 	bl	800e4e0 <_Bfree>
 800daaa:	2300      	movs	r3, #0
 800daac:	9800      	ldr	r0, [sp, #0]
 800daae:	702b      	strb	r3, [r5, #0]
 800dab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dab2:	3001      	adds	r0, #1
 800dab4:	6018      	str	r0, [r3, #0]
 800dab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f43f acf1 	beq.w	800d4a0 <_dtoa_r+0xa0>
 800dabe:	601d      	str	r5, [r3, #0]
 800dac0:	e4ee      	b.n	800d4a0 <_dtoa_r+0xa0>
 800dac2:	9f00      	ldr	r7, [sp, #0]
 800dac4:	462b      	mov	r3, r5
 800dac6:	461d      	mov	r5, r3
 800dac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dacc:	2a39      	cmp	r2, #57	; 0x39
 800dace:	d106      	bne.n	800dade <_dtoa_r+0x6de>
 800dad0:	9a01      	ldr	r2, [sp, #4]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d1f7      	bne.n	800dac6 <_dtoa_r+0x6c6>
 800dad6:	9901      	ldr	r1, [sp, #4]
 800dad8:	2230      	movs	r2, #48	; 0x30
 800dada:	3701      	adds	r7, #1
 800dadc:	700a      	strb	r2, [r1, #0]
 800dade:	781a      	ldrb	r2, [r3, #0]
 800dae0:	3201      	adds	r2, #1
 800dae2:	701a      	strb	r2, [r3, #0]
 800dae4:	e790      	b.n	800da08 <_dtoa_r+0x608>
 800dae6:	4ba6      	ldr	r3, [pc, #664]	; (800dd80 <_dtoa_r+0x980>)
 800dae8:	2200      	movs	r2, #0
 800daea:	f7f2 fdad 	bl	8000648 <__aeabi_dmul>
 800daee:	2200      	movs	r2, #0
 800daf0:	2300      	movs	r3, #0
 800daf2:	4606      	mov	r6, r0
 800daf4:	460f      	mov	r7, r1
 800daf6:	f7f3 f80f 	bl	8000b18 <__aeabi_dcmpeq>
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d09d      	beq.n	800da3a <_dtoa_r+0x63a>
 800dafe:	e7cf      	b.n	800daa0 <_dtoa_r+0x6a0>
 800db00:	9a08      	ldr	r2, [sp, #32]
 800db02:	2a00      	cmp	r2, #0
 800db04:	f000 80d7 	beq.w	800dcb6 <_dtoa_r+0x8b6>
 800db08:	9a06      	ldr	r2, [sp, #24]
 800db0a:	2a01      	cmp	r2, #1
 800db0c:	f300 80ba 	bgt.w	800dc84 <_dtoa_r+0x884>
 800db10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db12:	2a00      	cmp	r2, #0
 800db14:	f000 80b2 	beq.w	800dc7c <_dtoa_r+0x87c>
 800db18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800db1c:	9e07      	ldr	r6, [sp, #28]
 800db1e:	9d04      	ldr	r5, [sp, #16]
 800db20:	9a04      	ldr	r2, [sp, #16]
 800db22:	441a      	add	r2, r3
 800db24:	9204      	str	r2, [sp, #16]
 800db26:	9a05      	ldr	r2, [sp, #20]
 800db28:	2101      	movs	r1, #1
 800db2a:	441a      	add	r2, r3
 800db2c:	4620      	mov	r0, r4
 800db2e:	9205      	str	r2, [sp, #20]
 800db30:	f000 fd8e 	bl	800e650 <__i2b>
 800db34:	4607      	mov	r7, r0
 800db36:	2d00      	cmp	r5, #0
 800db38:	dd0c      	ble.n	800db54 <_dtoa_r+0x754>
 800db3a:	9b05      	ldr	r3, [sp, #20]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	dd09      	ble.n	800db54 <_dtoa_r+0x754>
 800db40:	42ab      	cmp	r3, r5
 800db42:	9a04      	ldr	r2, [sp, #16]
 800db44:	bfa8      	it	ge
 800db46:	462b      	movge	r3, r5
 800db48:	1ad2      	subs	r2, r2, r3
 800db4a:	9204      	str	r2, [sp, #16]
 800db4c:	9a05      	ldr	r2, [sp, #20]
 800db4e:	1aed      	subs	r5, r5, r3
 800db50:	1ad3      	subs	r3, r2, r3
 800db52:	9305      	str	r3, [sp, #20]
 800db54:	9b07      	ldr	r3, [sp, #28]
 800db56:	b31b      	cbz	r3, 800dba0 <_dtoa_r+0x7a0>
 800db58:	9b08      	ldr	r3, [sp, #32]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	f000 80af 	beq.w	800dcbe <_dtoa_r+0x8be>
 800db60:	2e00      	cmp	r6, #0
 800db62:	dd13      	ble.n	800db8c <_dtoa_r+0x78c>
 800db64:	4639      	mov	r1, r7
 800db66:	4632      	mov	r2, r6
 800db68:	4620      	mov	r0, r4
 800db6a:	f000 fe31 	bl	800e7d0 <__pow5mult>
 800db6e:	ee18 2a10 	vmov	r2, s16
 800db72:	4601      	mov	r1, r0
 800db74:	4607      	mov	r7, r0
 800db76:	4620      	mov	r0, r4
 800db78:	f000 fd80 	bl	800e67c <__multiply>
 800db7c:	ee18 1a10 	vmov	r1, s16
 800db80:	4680      	mov	r8, r0
 800db82:	4620      	mov	r0, r4
 800db84:	f000 fcac 	bl	800e4e0 <_Bfree>
 800db88:	ee08 8a10 	vmov	s16, r8
 800db8c:	9b07      	ldr	r3, [sp, #28]
 800db8e:	1b9a      	subs	r2, r3, r6
 800db90:	d006      	beq.n	800dba0 <_dtoa_r+0x7a0>
 800db92:	ee18 1a10 	vmov	r1, s16
 800db96:	4620      	mov	r0, r4
 800db98:	f000 fe1a 	bl	800e7d0 <__pow5mult>
 800db9c:	ee08 0a10 	vmov	s16, r0
 800dba0:	2101      	movs	r1, #1
 800dba2:	4620      	mov	r0, r4
 800dba4:	f000 fd54 	bl	800e650 <__i2b>
 800dba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	4606      	mov	r6, r0
 800dbae:	f340 8088 	ble.w	800dcc2 <_dtoa_r+0x8c2>
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	4601      	mov	r1, r0
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f000 fe0a 	bl	800e7d0 <__pow5mult>
 800dbbc:	9b06      	ldr	r3, [sp, #24]
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	4606      	mov	r6, r0
 800dbc2:	f340 8081 	ble.w	800dcc8 <_dtoa_r+0x8c8>
 800dbc6:	f04f 0800 	mov.w	r8, #0
 800dbca:	6933      	ldr	r3, [r6, #16]
 800dbcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dbd0:	6918      	ldr	r0, [r3, #16]
 800dbd2:	f000 fced 	bl	800e5b0 <__hi0bits>
 800dbd6:	f1c0 0020 	rsb	r0, r0, #32
 800dbda:	9b05      	ldr	r3, [sp, #20]
 800dbdc:	4418      	add	r0, r3
 800dbde:	f010 001f 	ands.w	r0, r0, #31
 800dbe2:	f000 8092 	beq.w	800dd0a <_dtoa_r+0x90a>
 800dbe6:	f1c0 0320 	rsb	r3, r0, #32
 800dbea:	2b04      	cmp	r3, #4
 800dbec:	f340 808a 	ble.w	800dd04 <_dtoa_r+0x904>
 800dbf0:	f1c0 001c 	rsb	r0, r0, #28
 800dbf4:	9b04      	ldr	r3, [sp, #16]
 800dbf6:	4403      	add	r3, r0
 800dbf8:	9304      	str	r3, [sp, #16]
 800dbfa:	9b05      	ldr	r3, [sp, #20]
 800dbfc:	4403      	add	r3, r0
 800dbfe:	4405      	add	r5, r0
 800dc00:	9305      	str	r3, [sp, #20]
 800dc02:	9b04      	ldr	r3, [sp, #16]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	dd07      	ble.n	800dc18 <_dtoa_r+0x818>
 800dc08:	ee18 1a10 	vmov	r1, s16
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f000 fe38 	bl	800e884 <__lshift>
 800dc14:	ee08 0a10 	vmov	s16, r0
 800dc18:	9b05      	ldr	r3, [sp, #20]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	dd05      	ble.n	800dc2a <_dtoa_r+0x82a>
 800dc1e:	4631      	mov	r1, r6
 800dc20:	461a      	mov	r2, r3
 800dc22:	4620      	mov	r0, r4
 800dc24:	f000 fe2e 	bl	800e884 <__lshift>
 800dc28:	4606      	mov	r6, r0
 800dc2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d06e      	beq.n	800dd0e <_dtoa_r+0x90e>
 800dc30:	ee18 0a10 	vmov	r0, s16
 800dc34:	4631      	mov	r1, r6
 800dc36:	f000 fe95 	bl	800e964 <__mcmp>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	da67      	bge.n	800dd0e <_dtoa_r+0x90e>
 800dc3e:	9b00      	ldr	r3, [sp, #0]
 800dc40:	3b01      	subs	r3, #1
 800dc42:	ee18 1a10 	vmov	r1, s16
 800dc46:	9300      	str	r3, [sp, #0]
 800dc48:	220a      	movs	r2, #10
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f000 fc69 	bl	800e524 <__multadd>
 800dc52:	9b08      	ldr	r3, [sp, #32]
 800dc54:	ee08 0a10 	vmov	s16, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	f000 81b1 	beq.w	800dfc0 <_dtoa_r+0xbc0>
 800dc5e:	2300      	movs	r3, #0
 800dc60:	4639      	mov	r1, r7
 800dc62:	220a      	movs	r2, #10
 800dc64:	4620      	mov	r0, r4
 800dc66:	f000 fc5d 	bl	800e524 <__multadd>
 800dc6a:	9b02      	ldr	r3, [sp, #8]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	4607      	mov	r7, r0
 800dc70:	f300 808e 	bgt.w	800dd90 <_dtoa_r+0x990>
 800dc74:	9b06      	ldr	r3, [sp, #24]
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	dc51      	bgt.n	800dd1e <_dtoa_r+0x91e>
 800dc7a:	e089      	b.n	800dd90 <_dtoa_r+0x990>
 800dc7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dc82:	e74b      	b.n	800db1c <_dtoa_r+0x71c>
 800dc84:	9b03      	ldr	r3, [sp, #12]
 800dc86:	1e5e      	subs	r6, r3, #1
 800dc88:	9b07      	ldr	r3, [sp, #28]
 800dc8a:	42b3      	cmp	r3, r6
 800dc8c:	bfbf      	itttt	lt
 800dc8e:	9b07      	ldrlt	r3, [sp, #28]
 800dc90:	9607      	strlt	r6, [sp, #28]
 800dc92:	1af2      	sublt	r2, r6, r3
 800dc94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dc96:	bfb6      	itet	lt
 800dc98:	189b      	addlt	r3, r3, r2
 800dc9a:	1b9e      	subge	r6, r3, r6
 800dc9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dc9e:	9b03      	ldr	r3, [sp, #12]
 800dca0:	bfb8      	it	lt
 800dca2:	2600      	movlt	r6, #0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	bfb7      	itett	lt
 800dca8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dcac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dcb0:	1a9d      	sublt	r5, r3, r2
 800dcb2:	2300      	movlt	r3, #0
 800dcb4:	e734      	b.n	800db20 <_dtoa_r+0x720>
 800dcb6:	9e07      	ldr	r6, [sp, #28]
 800dcb8:	9d04      	ldr	r5, [sp, #16]
 800dcba:	9f08      	ldr	r7, [sp, #32]
 800dcbc:	e73b      	b.n	800db36 <_dtoa_r+0x736>
 800dcbe:	9a07      	ldr	r2, [sp, #28]
 800dcc0:	e767      	b.n	800db92 <_dtoa_r+0x792>
 800dcc2:	9b06      	ldr	r3, [sp, #24]
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	dc18      	bgt.n	800dcfa <_dtoa_r+0x8fa>
 800dcc8:	f1ba 0f00 	cmp.w	sl, #0
 800dccc:	d115      	bne.n	800dcfa <_dtoa_r+0x8fa>
 800dcce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dcd2:	b993      	cbnz	r3, 800dcfa <_dtoa_r+0x8fa>
 800dcd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dcd8:	0d1b      	lsrs	r3, r3, #20
 800dcda:	051b      	lsls	r3, r3, #20
 800dcdc:	b183      	cbz	r3, 800dd00 <_dtoa_r+0x900>
 800dcde:	9b04      	ldr	r3, [sp, #16]
 800dce0:	3301      	adds	r3, #1
 800dce2:	9304      	str	r3, [sp, #16]
 800dce4:	9b05      	ldr	r3, [sp, #20]
 800dce6:	3301      	adds	r3, #1
 800dce8:	9305      	str	r3, [sp, #20]
 800dcea:	f04f 0801 	mov.w	r8, #1
 800dcee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f47f af6a 	bne.w	800dbca <_dtoa_r+0x7ca>
 800dcf6:	2001      	movs	r0, #1
 800dcf8:	e76f      	b.n	800dbda <_dtoa_r+0x7da>
 800dcfa:	f04f 0800 	mov.w	r8, #0
 800dcfe:	e7f6      	b.n	800dcee <_dtoa_r+0x8ee>
 800dd00:	4698      	mov	r8, r3
 800dd02:	e7f4      	b.n	800dcee <_dtoa_r+0x8ee>
 800dd04:	f43f af7d 	beq.w	800dc02 <_dtoa_r+0x802>
 800dd08:	4618      	mov	r0, r3
 800dd0a:	301c      	adds	r0, #28
 800dd0c:	e772      	b.n	800dbf4 <_dtoa_r+0x7f4>
 800dd0e:	9b03      	ldr	r3, [sp, #12]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	dc37      	bgt.n	800dd84 <_dtoa_r+0x984>
 800dd14:	9b06      	ldr	r3, [sp, #24]
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	dd34      	ble.n	800dd84 <_dtoa_r+0x984>
 800dd1a:	9b03      	ldr	r3, [sp, #12]
 800dd1c:	9302      	str	r3, [sp, #8]
 800dd1e:	9b02      	ldr	r3, [sp, #8]
 800dd20:	b96b      	cbnz	r3, 800dd3e <_dtoa_r+0x93e>
 800dd22:	4631      	mov	r1, r6
 800dd24:	2205      	movs	r2, #5
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 fbfc 	bl	800e524 <__multadd>
 800dd2c:	4601      	mov	r1, r0
 800dd2e:	4606      	mov	r6, r0
 800dd30:	ee18 0a10 	vmov	r0, s16
 800dd34:	f000 fe16 	bl	800e964 <__mcmp>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	f73f adbb 	bgt.w	800d8b4 <_dtoa_r+0x4b4>
 800dd3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd40:	9d01      	ldr	r5, [sp, #4]
 800dd42:	43db      	mvns	r3, r3
 800dd44:	9300      	str	r3, [sp, #0]
 800dd46:	f04f 0800 	mov.w	r8, #0
 800dd4a:	4631      	mov	r1, r6
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	f000 fbc7 	bl	800e4e0 <_Bfree>
 800dd52:	2f00      	cmp	r7, #0
 800dd54:	f43f aea4 	beq.w	800daa0 <_dtoa_r+0x6a0>
 800dd58:	f1b8 0f00 	cmp.w	r8, #0
 800dd5c:	d005      	beq.n	800dd6a <_dtoa_r+0x96a>
 800dd5e:	45b8      	cmp	r8, r7
 800dd60:	d003      	beq.n	800dd6a <_dtoa_r+0x96a>
 800dd62:	4641      	mov	r1, r8
 800dd64:	4620      	mov	r0, r4
 800dd66:	f000 fbbb 	bl	800e4e0 <_Bfree>
 800dd6a:	4639      	mov	r1, r7
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	f000 fbb7 	bl	800e4e0 <_Bfree>
 800dd72:	e695      	b.n	800daa0 <_dtoa_r+0x6a0>
 800dd74:	2600      	movs	r6, #0
 800dd76:	4637      	mov	r7, r6
 800dd78:	e7e1      	b.n	800dd3e <_dtoa_r+0x93e>
 800dd7a:	9700      	str	r7, [sp, #0]
 800dd7c:	4637      	mov	r7, r6
 800dd7e:	e599      	b.n	800d8b4 <_dtoa_r+0x4b4>
 800dd80:	40240000 	.word	0x40240000
 800dd84:	9b08      	ldr	r3, [sp, #32]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	f000 80ca 	beq.w	800df20 <_dtoa_r+0xb20>
 800dd8c:	9b03      	ldr	r3, [sp, #12]
 800dd8e:	9302      	str	r3, [sp, #8]
 800dd90:	2d00      	cmp	r5, #0
 800dd92:	dd05      	ble.n	800dda0 <_dtoa_r+0x9a0>
 800dd94:	4639      	mov	r1, r7
 800dd96:	462a      	mov	r2, r5
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f000 fd73 	bl	800e884 <__lshift>
 800dd9e:	4607      	mov	r7, r0
 800dda0:	f1b8 0f00 	cmp.w	r8, #0
 800dda4:	d05b      	beq.n	800de5e <_dtoa_r+0xa5e>
 800dda6:	6879      	ldr	r1, [r7, #4]
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f000 fb59 	bl	800e460 <_Balloc>
 800ddae:	4605      	mov	r5, r0
 800ddb0:	b928      	cbnz	r0, 800ddbe <_dtoa_r+0x9be>
 800ddb2:	4b87      	ldr	r3, [pc, #540]	; (800dfd0 <_dtoa_r+0xbd0>)
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ddba:	f7ff bb3b 	b.w	800d434 <_dtoa_r+0x34>
 800ddbe:	693a      	ldr	r2, [r7, #16]
 800ddc0:	3202      	adds	r2, #2
 800ddc2:	0092      	lsls	r2, r2, #2
 800ddc4:	f107 010c 	add.w	r1, r7, #12
 800ddc8:	300c      	adds	r0, #12
 800ddca:	f7fe fbb1 	bl	800c530 <memcpy>
 800ddce:	2201      	movs	r2, #1
 800ddd0:	4629      	mov	r1, r5
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f000 fd56 	bl	800e884 <__lshift>
 800ddd8:	9b01      	ldr	r3, [sp, #4]
 800ddda:	f103 0901 	add.w	r9, r3, #1
 800ddde:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dde2:	4413      	add	r3, r2
 800dde4:	9305      	str	r3, [sp, #20]
 800dde6:	f00a 0301 	and.w	r3, sl, #1
 800ddea:	46b8      	mov	r8, r7
 800ddec:	9304      	str	r3, [sp, #16]
 800ddee:	4607      	mov	r7, r0
 800ddf0:	4631      	mov	r1, r6
 800ddf2:	ee18 0a10 	vmov	r0, s16
 800ddf6:	f7ff fa75 	bl	800d2e4 <quorem>
 800ddfa:	4641      	mov	r1, r8
 800ddfc:	9002      	str	r0, [sp, #8]
 800ddfe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800de02:	ee18 0a10 	vmov	r0, s16
 800de06:	f000 fdad 	bl	800e964 <__mcmp>
 800de0a:	463a      	mov	r2, r7
 800de0c:	9003      	str	r0, [sp, #12]
 800de0e:	4631      	mov	r1, r6
 800de10:	4620      	mov	r0, r4
 800de12:	f000 fdc3 	bl	800e99c <__mdiff>
 800de16:	68c2      	ldr	r2, [r0, #12]
 800de18:	f109 3bff 	add.w	fp, r9, #4294967295
 800de1c:	4605      	mov	r5, r0
 800de1e:	bb02      	cbnz	r2, 800de62 <_dtoa_r+0xa62>
 800de20:	4601      	mov	r1, r0
 800de22:	ee18 0a10 	vmov	r0, s16
 800de26:	f000 fd9d 	bl	800e964 <__mcmp>
 800de2a:	4602      	mov	r2, r0
 800de2c:	4629      	mov	r1, r5
 800de2e:	4620      	mov	r0, r4
 800de30:	9207      	str	r2, [sp, #28]
 800de32:	f000 fb55 	bl	800e4e0 <_Bfree>
 800de36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800de3a:	ea43 0102 	orr.w	r1, r3, r2
 800de3e:	9b04      	ldr	r3, [sp, #16]
 800de40:	430b      	orrs	r3, r1
 800de42:	464d      	mov	r5, r9
 800de44:	d10f      	bne.n	800de66 <_dtoa_r+0xa66>
 800de46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de4a:	d02a      	beq.n	800dea2 <_dtoa_r+0xaa2>
 800de4c:	9b03      	ldr	r3, [sp, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	dd02      	ble.n	800de58 <_dtoa_r+0xa58>
 800de52:	9b02      	ldr	r3, [sp, #8]
 800de54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800de58:	f88b a000 	strb.w	sl, [fp]
 800de5c:	e775      	b.n	800dd4a <_dtoa_r+0x94a>
 800de5e:	4638      	mov	r0, r7
 800de60:	e7ba      	b.n	800ddd8 <_dtoa_r+0x9d8>
 800de62:	2201      	movs	r2, #1
 800de64:	e7e2      	b.n	800de2c <_dtoa_r+0xa2c>
 800de66:	9b03      	ldr	r3, [sp, #12]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	db04      	blt.n	800de76 <_dtoa_r+0xa76>
 800de6c:	9906      	ldr	r1, [sp, #24]
 800de6e:	430b      	orrs	r3, r1
 800de70:	9904      	ldr	r1, [sp, #16]
 800de72:	430b      	orrs	r3, r1
 800de74:	d122      	bne.n	800debc <_dtoa_r+0xabc>
 800de76:	2a00      	cmp	r2, #0
 800de78:	ddee      	ble.n	800de58 <_dtoa_r+0xa58>
 800de7a:	ee18 1a10 	vmov	r1, s16
 800de7e:	2201      	movs	r2, #1
 800de80:	4620      	mov	r0, r4
 800de82:	f000 fcff 	bl	800e884 <__lshift>
 800de86:	4631      	mov	r1, r6
 800de88:	ee08 0a10 	vmov	s16, r0
 800de8c:	f000 fd6a 	bl	800e964 <__mcmp>
 800de90:	2800      	cmp	r0, #0
 800de92:	dc03      	bgt.n	800de9c <_dtoa_r+0xa9c>
 800de94:	d1e0      	bne.n	800de58 <_dtoa_r+0xa58>
 800de96:	f01a 0f01 	tst.w	sl, #1
 800de9a:	d0dd      	beq.n	800de58 <_dtoa_r+0xa58>
 800de9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dea0:	d1d7      	bne.n	800de52 <_dtoa_r+0xa52>
 800dea2:	2339      	movs	r3, #57	; 0x39
 800dea4:	f88b 3000 	strb.w	r3, [fp]
 800dea8:	462b      	mov	r3, r5
 800deaa:	461d      	mov	r5, r3
 800deac:	3b01      	subs	r3, #1
 800deae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800deb2:	2a39      	cmp	r2, #57	; 0x39
 800deb4:	d071      	beq.n	800df9a <_dtoa_r+0xb9a>
 800deb6:	3201      	adds	r2, #1
 800deb8:	701a      	strb	r2, [r3, #0]
 800deba:	e746      	b.n	800dd4a <_dtoa_r+0x94a>
 800debc:	2a00      	cmp	r2, #0
 800debe:	dd07      	ble.n	800ded0 <_dtoa_r+0xad0>
 800dec0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dec4:	d0ed      	beq.n	800dea2 <_dtoa_r+0xaa2>
 800dec6:	f10a 0301 	add.w	r3, sl, #1
 800deca:	f88b 3000 	strb.w	r3, [fp]
 800dece:	e73c      	b.n	800dd4a <_dtoa_r+0x94a>
 800ded0:	9b05      	ldr	r3, [sp, #20]
 800ded2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ded6:	4599      	cmp	r9, r3
 800ded8:	d047      	beq.n	800df6a <_dtoa_r+0xb6a>
 800deda:	ee18 1a10 	vmov	r1, s16
 800dede:	2300      	movs	r3, #0
 800dee0:	220a      	movs	r2, #10
 800dee2:	4620      	mov	r0, r4
 800dee4:	f000 fb1e 	bl	800e524 <__multadd>
 800dee8:	45b8      	cmp	r8, r7
 800deea:	ee08 0a10 	vmov	s16, r0
 800deee:	f04f 0300 	mov.w	r3, #0
 800def2:	f04f 020a 	mov.w	r2, #10
 800def6:	4641      	mov	r1, r8
 800def8:	4620      	mov	r0, r4
 800defa:	d106      	bne.n	800df0a <_dtoa_r+0xb0a>
 800defc:	f000 fb12 	bl	800e524 <__multadd>
 800df00:	4680      	mov	r8, r0
 800df02:	4607      	mov	r7, r0
 800df04:	f109 0901 	add.w	r9, r9, #1
 800df08:	e772      	b.n	800ddf0 <_dtoa_r+0x9f0>
 800df0a:	f000 fb0b 	bl	800e524 <__multadd>
 800df0e:	4639      	mov	r1, r7
 800df10:	4680      	mov	r8, r0
 800df12:	2300      	movs	r3, #0
 800df14:	220a      	movs	r2, #10
 800df16:	4620      	mov	r0, r4
 800df18:	f000 fb04 	bl	800e524 <__multadd>
 800df1c:	4607      	mov	r7, r0
 800df1e:	e7f1      	b.n	800df04 <_dtoa_r+0xb04>
 800df20:	9b03      	ldr	r3, [sp, #12]
 800df22:	9302      	str	r3, [sp, #8]
 800df24:	9d01      	ldr	r5, [sp, #4]
 800df26:	ee18 0a10 	vmov	r0, s16
 800df2a:	4631      	mov	r1, r6
 800df2c:	f7ff f9da 	bl	800d2e4 <quorem>
 800df30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800df34:	9b01      	ldr	r3, [sp, #4]
 800df36:	f805 ab01 	strb.w	sl, [r5], #1
 800df3a:	1aea      	subs	r2, r5, r3
 800df3c:	9b02      	ldr	r3, [sp, #8]
 800df3e:	4293      	cmp	r3, r2
 800df40:	dd09      	ble.n	800df56 <_dtoa_r+0xb56>
 800df42:	ee18 1a10 	vmov	r1, s16
 800df46:	2300      	movs	r3, #0
 800df48:	220a      	movs	r2, #10
 800df4a:	4620      	mov	r0, r4
 800df4c:	f000 faea 	bl	800e524 <__multadd>
 800df50:	ee08 0a10 	vmov	s16, r0
 800df54:	e7e7      	b.n	800df26 <_dtoa_r+0xb26>
 800df56:	9b02      	ldr	r3, [sp, #8]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	bfc8      	it	gt
 800df5c:	461d      	movgt	r5, r3
 800df5e:	9b01      	ldr	r3, [sp, #4]
 800df60:	bfd8      	it	le
 800df62:	2501      	movle	r5, #1
 800df64:	441d      	add	r5, r3
 800df66:	f04f 0800 	mov.w	r8, #0
 800df6a:	ee18 1a10 	vmov	r1, s16
 800df6e:	2201      	movs	r2, #1
 800df70:	4620      	mov	r0, r4
 800df72:	f000 fc87 	bl	800e884 <__lshift>
 800df76:	4631      	mov	r1, r6
 800df78:	ee08 0a10 	vmov	s16, r0
 800df7c:	f000 fcf2 	bl	800e964 <__mcmp>
 800df80:	2800      	cmp	r0, #0
 800df82:	dc91      	bgt.n	800dea8 <_dtoa_r+0xaa8>
 800df84:	d102      	bne.n	800df8c <_dtoa_r+0xb8c>
 800df86:	f01a 0f01 	tst.w	sl, #1
 800df8a:	d18d      	bne.n	800dea8 <_dtoa_r+0xaa8>
 800df8c:	462b      	mov	r3, r5
 800df8e:	461d      	mov	r5, r3
 800df90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df94:	2a30      	cmp	r2, #48	; 0x30
 800df96:	d0fa      	beq.n	800df8e <_dtoa_r+0xb8e>
 800df98:	e6d7      	b.n	800dd4a <_dtoa_r+0x94a>
 800df9a:	9a01      	ldr	r2, [sp, #4]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d184      	bne.n	800deaa <_dtoa_r+0xaaa>
 800dfa0:	9b00      	ldr	r3, [sp, #0]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	9300      	str	r3, [sp, #0]
 800dfa6:	2331      	movs	r3, #49	; 0x31
 800dfa8:	7013      	strb	r3, [r2, #0]
 800dfaa:	e6ce      	b.n	800dd4a <_dtoa_r+0x94a>
 800dfac:	4b09      	ldr	r3, [pc, #36]	; (800dfd4 <_dtoa_r+0xbd4>)
 800dfae:	f7ff ba95 	b.w	800d4dc <_dtoa_r+0xdc>
 800dfb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f47f aa6e 	bne.w	800d496 <_dtoa_r+0x96>
 800dfba:	4b07      	ldr	r3, [pc, #28]	; (800dfd8 <_dtoa_r+0xbd8>)
 800dfbc:	f7ff ba8e 	b.w	800d4dc <_dtoa_r+0xdc>
 800dfc0:	9b02      	ldr	r3, [sp, #8]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	dcae      	bgt.n	800df24 <_dtoa_r+0xb24>
 800dfc6:	9b06      	ldr	r3, [sp, #24]
 800dfc8:	2b02      	cmp	r3, #2
 800dfca:	f73f aea8 	bgt.w	800dd1e <_dtoa_r+0x91e>
 800dfce:	e7a9      	b.n	800df24 <_dtoa_r+0xb24>
 800dfd0:	08011392 	.word	0x08011392
 800dfd4:	08011258 	.word	0x08011258
 800dfd8:	0801132a 	.word	0x0801132a

0800dfdc <__sflush_r>:
 800dfdc:	898a      	ldrh	r2, [r1, #12]
 800dfde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe2:	4605      	mov	r5, r0
 800dfe4:	0710      	lsls	r0, r2, #28
 800dfe6:	460c      	mov	r4, r1
 800dfe8:	d458      	bmi.n	800e09c <__sflush_r+0xc0>
 800dfea:	684b      	ldr	r3, [r1, #4]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	dc05      	bgt.n	800dffc <__sflush_r+0x20>
 800dff0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	dc02      	bgt.n	800dffc <__sflush_r+0x20>
 800dff6:	2000      	movs	r0, #0
 800dff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dffe:	2e00      	cmp	r6, #0
 800e000:	d0f9      	beq.n	800dff6 <__sflush_r+0x1a>
 800e002:	2300      	movs	r3, #0
 800e004:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e008:	682f      	ldr	r7, [r5, #0]
 800e00a:	602b      	str	r3, [r5, #0]
 800e00c:	d032      	beq.n	800e074 <__sflush_r+0x98>
 800e00e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e010:	89a3      	ldrh	r3, [r4, #12]
 800e012:	075a      	lsls	r2, r3, #29
 800e014:	d505      	bpl.n	800e022 <__sflush_r+0x46>
 800e016:	6863      	ldr	r3, [r4, #4]
 800e018:	1ac0      	subs	r0, r0, r3
 800e01a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e01c:	b10b      	cbz	r3, 800e022 <__sflush_r+0x46>
 800e01e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e020:	1ac0      	subs	r0, r0, r3
 800e022:	2300      	movs	r3, #0
 800e024:	4602      	mov	r2, r0
 800e026:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e028:	6a21      	ldr	r1, [r4, #32]
 800e02a:	4628      	mov	r0, r5
 800e02c:	47b0      	blx	r6
 800e02e:	1c43      	adds	r3, r0, #1
 800e030:	89a3      	ldrh	r3, [r4, #12]
 800e032:	d106      	bne.n	800e042 <__sflush_r+0x66>
 800e034:	6829      	ldr	r1, [r5, #0]
 800e036:	291d      	cmp	r1, #29
 800e038:	d82c      	bhi.n	800e094 <__sflush_r+0xb8>
 800e03a:	4a2a      	ldr	r2, [pc, #168]	; (800e0e4 <__sflush_r+0x108>)
 800e03c:	40ca      	lsrs	r2, r1
 800e03e:	07d6      	lsls	r6, r2, #31
 800e040:	d528      	bpl.n	800e094 <__sflush_r+0xb8>
 800e042:	2200      	movs	r2, #0
 800e044:	6062      	str	r2, [r4, #4]
 800e046:	04d9      	lsls	r1, r3, #19
 800e048:	6922      	ldr	r2, [r4, #16]
 800e04a:	6022      	str	r2, [r4, #0]
 800e04c:	d504      	bpl.n	800e058 <__sflush_r+0x7c>
 800e04e:	1c42      	adds	r2, r0, #1
 800e050:	d101      	bne.n	800e056 <__sflush_r+0x7a>
 800e052:	682b      	ldr	r3, [r5, #0]
 800e054:	b903      	cbnz	r3, 800e058 <__sflush_r+0x7c>
 800e056:	6560      	str	r0, [r4, #84]	; 0x54
 800e058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e05a:	602f      	str	r7, [r5, #0]
 800e05c:	2900      	cmp	r1, #0
 800e05e:	d0ca      	beq.n	800dff6 <__sflush_r+0x1a>
 800e060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e064:	4299      	cmp	r1, r3
 800e066:	d002      	beq.n	800e06e <__sflush_r+0x92>
 800e068:	4628      	mov	r0, r5
 800e06a:	f7fe fa8d 	bl	800c588 <_free_r>
 800e06e:	2000      	movs	r0, #0
 800e070:	6360      	str	r0, [r4, #52]	; 0x34
 800e072:	e7c1      	b.n	800dff8 <__sflush_r+0x1c>
 800e074:	6a21      	ldr	r1, [r4, #32]
 800e076:	2301      	movs	r3, #1
 800e078:	4628      	mov	r0, r5
 800e07a:	47b0      	blx	r6
 800e07c:	1c41      	adds	r1, r0, #1
 800e07e:	d1c7      	bne.n	800e010 <__sflush_r+0x34>
 800e080:	682b      	ldr	r3, [r5, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d0c4      	beq.n	800e010 <__sflush_r+0x34>
 800e086:	2b1d      	cmp	r3, #29
 800e088:	d001      	beq.n	800e08e <__sflush_r+0xb2>
 800e08a:	2b16      	cmp	r3, #22
 800e08c:	d101      	bne.n	800e092 <__sflush_r+0xb6>
 800e08e:	602f      	str	r7, [r5, #0]
 800e090:	e7b1      	b.n	800dff6 <__sflush_r+0x1a>
 800e092:	89a3      	ldrh	r3, [r4, #12]
 800e094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e098:	81a3      	strh	r3, [r4, #12]
 800e09a:	e7ad      	b.n	800dff8 <__sflush_r+0x1c>
 800e09c:	690f      	ldr	r7, [r1, #16]
 800e09e:	2f00      	cmp	r7, #0
 800e0a0:	d0a9      	beq.n	800dff6 <__sflush_r+0x1a>
 800e0a2:	0793      	lsls	r3, r2, #30
 800e0a4:	680e      	ldr	r6, [r1, #0]
 800e0a6:	bf08      	it	eq
 800e0a8:	694b      	ldreq	r3, [r1, #20]
 800e0aa:	600f      	str	r7, [r1, #0]
 800e0ac:	bf18      	it	ne
 800e0ae:	2300      	movne	r3, #0
 800e0b0:	eba6 0807 	sub.w	r8, r6, r7
 800e0b4:	608b      	str	r3, [r1, #8]
 800e0b6:	f1b8 0f00 	cmp.w	r8, #0
 800e0ba:	dd9c      	ble.n	800dff6 <__sflush_r+0x1a>
 800e0bc:	6a21      	ldr	r1, [r4, #32]
 800e0be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0c0:	4643      	mov	r3, r8
 800e0c2:	463a      	mov	r2, r7
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	47b0      	blx	r6
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	dc06      	bgt.n	800e0da <__sflush_r+0xfe>
 800e0cc:	89a3      	ldrh	r3, [r4, #12]
 800e0ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0d2:	81a3      	strh	r3, [r4, #12]
 800e0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d8:	e78e      	b.n	800dff8 <__sflush_r+0x1c>
 800e0da:	4407      	add	r7, r0
 800e0dc:	eba8 0800 	sub.w	r8, r8, r0
 800e0e0:	e7e9      	b.n	800e0b6 <__sflush_r+0xda>
 800e0e2:	bf00      	nop
 800e0e4:	20400001 	.word	0x20400001

0800e0e8 <_fflush_r>:
 800e0e8:	b538      	push	{r3, r4, r5, lr}
 800e0ea:	690b      	ldr	r3, [r1, #16]
 800e0ec:	4605      	mov	r5, r0
 800e0ee:	460c      	mov	r4, r1
 800e0f0:	b913      	cbnz	r3, 800e0f8 <_fflush_r+0x10>
 800e0f2:	2500      	movs	r5, #0
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	bd38      	pop	{r3, r4, r5, pc}
 800e0f8:	b118      	cbz	r0, 800e102 <_fflush_r+0x1a>
 800e0fa:	6983      	ldr	r3, [r0, #24]
 800e0fc:	b90b      	cbnz	r3, 800e102 <_fflush_r+0x1a>
 800e0fe:	f000 f887 	bl	800e210 <__sinit>
 800e102:	4b14      	ldr	r3, [pc, #80]	; (800e154 <_fflush_r+0x6c>)
 800e104:	429c      	cmp	r4, r3
 800e106:	d11b      	bne.n	800e140 <_fflush_r+0x58>
 800e108:	686c      	ldr	r4, [r5, #4]
 800e10a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d0ef      	beq.n	800e0f2 <_fflush_r+0xa>
 800e112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e114:	07d0      	lsls	r0, r2, #31
 800e116:	d404      	bmi.n	800e122 <_fflush_r+0x3a>
 800e118:	0599      	lsls	r1, r3, #22
 800e11a:	d402      	bmi.n	800e122 <_fflush_r+0x3a>
 800e11c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e11e:	f000 f92c 	bl	800e37a <__retarget_lock_acquire_recursive>
 800e122:	4628      	mov	r0, r5
 800e124:	4621      	mov	r1, r4
 800e126:	f7ff ff59 	bl	800dfdc <__sflush_r>
 800e12a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e12c:	07da      	lsls	r2, r3, #31
 800e12e:	4605      	mov	r5, r0
 800e130:	d4e0      	bmi.n	800e0f4 <_fflush_r+0xc>
 800e132:	89a3      	ldrh	r3, [r4, #12]
 800e134:	059b      	lsls	r3, r3, #22
 800e136:	d4dd      	bmi.n	800e0f4 <_fflush_r+0xc>
 800e138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e13a:	f000 f91f 	bl	800e37c <__retarget_lock_release_recursive>
 800e13e:	e7d9      	b.n	800e0f4 <_fflush_r+0xc>
 800e140:	4b05      	ldr	r3, [pc, #20]	; (800e158 <_fflush_r+0x70>)
 800e142:	429c      	cmp	r4, r3
 800e144:	d101      	bne.n	800e14a <_fflush_r+0x62>
 800e146:	68ac      	ldr	r4, [r5, #8]
 800e148:	e7df      	b.n	800e10a <_fflush_r+0x22>
 800e14a:	4b04      	ldr	r3, [pc, #16]	; (800e15c <_fflush_r+0x74>)
 800e14c:	429c      	cmp	r4, r3
 800e14e:	bf08      	it	eq
 800e150:	68ec      	ldreq	r4, [r5, #12]
 800e152:	e7da      	b.n	800e10a <_fflush_r+0x22>
 800e154:	080113c4 	.word	0x080113c4
 800e158:	080113e4 	.word	0x080113e4
 800e15c:	080113a4 	.word	0x080113a4

0800e160 <std>:
 800e160:	2300      	movs	r3, #0
 800e162:	b510      	push	{r4, lr}
 800e164:	4604      	mov	r4, r0
 800e166:	e9c0 3300 	strd	r3, r3, [r0]
 800e16a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e16e:	6083      	str	r3, [r0, #8]
 800e170:	8181      	strh	r1, [r0, #12]
 800e172:	6643      	str	r3, [r0, #100]	; 0x64
 800e174:	81c2      	strh	r2, [r0, #14]
 800e176:	6183      	str	r3, [r0, #24]
 800e178:	4619      	mov	r1, r3
 800e17a:	2208      	movs	r2, #8
 800e17c:	305c      	adds	r0, #92	; 0x5c
 800e17e:	f7fe f9e5 	bl	800c54c <memset>
 800e182:	4b05      	ldr	r3, [pc, #20]	; (800e198 <std+0x38>)
 800e184:	6263      	str	r3, [r4, #36]	; 0x24
 800e186:	4b05      	ldr	r3, [pc, #20]	; (800e19c <std+0x3c>)
 800e188:	62a3      	str	r3, [r4, #40]	; 0x28
 800e18a:	4b05      	ldr	r3, [pc, #20]	; (800e1a0 <std+0x40>)
 800e18c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e18e:	4b05      	ldr	r3, [pc, #20]	; (800e1a4 <std+0x44>)
 800e190:	6224      	str	r4, [r4, #32]
 800e192:	6323      	str	r3, [r4, #48]	; 0x30
 800e194:	bd10      	pop	{r4, pc}
 800e196:	bf00      	nop
 800e198:	0800f0d5 	.word	0x0800f0d5
 800e19c:	0800f0f7 	.word	0x0800f0f7
 800e1a0:	0800f12f 	.word	0x0800f12f
 800e1a4:	0800f153 	.word	0x0800f153

0800e1a8 <_cleanup_r>:
 800e1a8:	4901      	ldr	r1, [pc, #4]	; (800e1b0 <_cleanup_r+0x8>)
 800e1aa:	f000 b8c1 	b.w	800e330 <_fwalk_reent>
 800e1ae:	bf00      	nop
 800e1b0:	0800e0e9 	.word	0x0800e0e9

0800e1b4 <__sfmoreglue>:
 800e1b4:	b570      	push	{r4, r5, r6, lr}
 800e1b6:	2268      	movs	r2, #104	; 0x68
 800e1b8:	1e4d      	subs	r5, r1, #1
 800e1ba:	4355      	muls	r5, r2
 800e1bc:	460e      	mov	r6, r1
 800e1be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e1c2:	f7fe fa4d 	bl	800c660 <_malloc_r>
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	b140      	cbz	r0, 800e1dc <__sfmoreglue+0x28>
 800e1ca:	2100      	movs	r1, #0
 800e1cc:	e9c0 1600 	strd	r1, r6, [r0]
 800e1d0:	300c      	adds	r0, #12
 800e1d2:	60a0      	str	r0, [r4, #8]
 800e1d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e1d8:	f7fe f9b8 	bl	800c54c <memset>
 800e1dc:	4620      	mov	r0, r4
 800e1de:	bd70      	pop	{r4, r5, r6, pc}

0800e1e0 <__sfp_lock_acquire>:
 800e1e0:	4801      	ldr	r0, [pc, #4]	; (800e1e8 <__sfp_lock_acquire+0x8>)
 800e1e2:	f000 b8ca 	b.w	800e37a <__retarget_lock_acquire_recursive>
 800e1e6:	bf00      	nop
 800e1e8:	20005251 	.word	0x20005251

0800e1ec <__sfp_lock_release>:
 800e1ec:	4801      	ldr	r0, [pc, #4]	; (800e1f4 <__sfp_lock_release+0x8>)
 800e1ee:	f000 b8c5 	b.w	800e37c <__retarget_lock_release_recursive>
 800e1f2:	bf00      	nop
 800e1f4:	20005251 	.word	0x20005251

0800e1f8 <__sinit_lock_acquire>:
 800e1f8:	4801      	ldr	r0, [pc, #4]	; (800e200 <__sinit_lock_acquire+0x8>)
 800e1fa:	f000 b8be 	b.w	800e37a <__retarget_lock_acquire_recursive>
 800e1fe:	bf00      	nop
 800e200:	20005252 	.word	0x20005252

0800e204 <__sinit_lock_release>:
 800e204:	4801      	ldr	r0, [pc, #4]	; (800e20c <__sinit_lock_release+0x8>)
 800e206:	f000 b8b9 	b.w	800e37c <__retarget_lock_release_recursive>
 800e20a:	bf00      	nop
 800e20c:	20005252 	.word	0x20005252

0800e210 <__sinit>:
 800e210:	b510      	push	{r4, lr}
 800e212:	4604      	mov	r4, r0
 800e214:	f7ff fff0 	bl	800e1f8 <__sinit_lock_acquire>
 800e218:	69a3      	ldr	r3, [r4, #24]
 800e21a:	b11b      	cbz	r3, 800e224 <__sinit+0x14>
 800e21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e220:	f7ff bff0 	b.w	800e204 <__sinit_lock_release>
 800e224:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e228:	6523      	str	r3, [r4, #80]	; 0x50
 800e22a:	4b13      	ldr	r3, [pc, #76]	; (800e278 <__sinit+0x68>)
 800e22c:	4a13      	ldr	r2, [pc, #76]	; (800e27c <__sinit+0x6c>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	62a2      	str	r2, [r4, #40]	; 0x28
 800e232:	42a3      	cmp	r3, r4
 800e234:	bf04      	itt	eq
 800e236:	2301      	moveq	r3, #1
 800e238:	61a3      	streq	r3, [r4, #24]
 800e23a:	4620      	mov	r0, r4
 800e23c:	f000 f820 	bl	800e280 <__sfp>
 800e240:	6060      	str	r0, [r4, #4]
 800e242:	4620      	mov	r0, r4
 800e244:	f000 f81c 	bl	800e280 <__sfp>
 800e248:	60a0      	str	r0, [r4, #8]
 800e24a:	4620      	mov	r0, r4
 800e24c:	f000 f818 	bl	800e280 <__sfp>
 800e250:	2200      	movs	r2, #0
 800e252:	60e0      	str	r0, [r4, #12]
 800e254:	2104      	movs	r1, #4
 800e256:	6860      	ldr	r0, [r4, #4]
 800e258:	f7ff ff82 	bl	800e160 <std>
 800e25c:	68a0      	ldr	r0, [r4, #8]
 800e25e:	2201      	movs	r2, #1
 800e260:	2109      	movs	r1, #9
 800e262:	f7ff ff7d 	bl	800e160 <std>
 800e266:	68e0      	ldr	r0, [r4, #12]
 800e268:	2202      	movs	r2, #2
 800e26a:	2112      	movs	r1, #18
 800e26c:	f7ff ff78 	bl	800e160 <std>
 800e270:	2301      	movs	r3, #1
 800e272:	61a3      	str	r3, [r4, #24]
 800e274:	e7d2      	b.n	800e21c <__sinit+0xc>
 800e276:	bf00      	nop
 800e278:	08011244 	.word	0x08011244
 800e27c:	0800e1a9 	.word	0x0800e1a9

0800e280 <__sfp>:
 800e280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e282:	4607      	mov	r7, r0
 800e284:	f7ff ffac 	bl	800e1e0 <__sfp_lock_acquire>
 800e288:	4b1e      	ldr	r3, [pc, #120]	; (800e304 <__sfp+0x84>)
 800e28a:	681e      	ldr	r6, [r3, #0]
 800e28c:	69b3      	ldr	r3, [r6, #24]
 800e28e:	b913      	cbnz	r3, 800e296 <__sfp+0x16>
 800e290:	4630      	mov	r0, r6
 800e292:	f7ff ffbd 	bl	800e210 <__sinit>
 800e296:	3648      	adds	r6, #72	; 0x48
 800e298:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e29c:	3b01      	subs	r3, #1
 800e29e:	d503      	bpl.n	800e2a8 <__sfp+0x28>
 800e2a0:	6833      	ldr	r3, [r6, #0]
 800e2a2:	b30b      	cbz	r3, 800e2e8 <__sfp+0x68>
 800e2a4:	6836      	ldr	r6, [r6, #0]
 800e2a6:	e7f7      	b.n	800e298 <__sfp+0x18>
 800e2a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e2ac:	b9d5      	cbnz	r5, 800e2e4 <__sfp+0x64>
 800e2ae:	4b16      	ldr	r3, [pc, #88]	; (800e308 <__sfp+0x88>)
 800e2b0:	60e3      	str	r3, [r4, #12]
 800e2b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e2b6:	6665      	str	r5, [r4, #100]	; 0x64
 800e2b8:	f000 f85e 	bl	800e378 <__retarget_lock_init_recursive>
 800e2bc:	f7ff ff96 	bl	800e1ec <__sfp_lock_release>
 800e2c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e2c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e2c8:	6025      	str	r5, [r4, #0]
 800e2ca:	61a5      	str	r5, [r4, #24]
 800e2cc:	2208      	movs	r2, #8
 800e2ce:	4629      	mov	r1, r5
 800e2d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e2d4:	f7fe f93a 	bl	800c54c <memset>
 800e2d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e2dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2e4:	3468      	adds	r4, #104	; 0x68
 800e2e6:	e7d9      	b.n	800e29c <__sfp+0x1c>
 800e2e8:	2104      	movs	r1, #4
 800e2ea:	4638      	mov	r0, r7
 800e2ec:	f7ff ff62 	bl	800e1b4 <__sfmoreglue>
 800e2f0:	4604      	mov	r4, r0
 800e2f2:	6030      	str	r0, [r6, #0]
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	d1d5      	bne.n	800e2a4 <__sfp+0x24>
 800e2f8:	f7ff ff78 	bl	800e1ec <__sfp_lock_release>
 800e2fc:	230c      	movs	r3, #12
 800e2fe:	603b      	str	r3, [r7, #0]
 800e300:	e7ee      	b.n	800e2e0 <__sfp+0x60>
 800e302:	bf00      	nop
 800e304:	08011244 	.word	0x08011244
 800e308:	ffff0001 	.word	0xffff0001

0800e30c <fiprintf>:
 800e30c:	b40e      	push	{r1, r2, r3}
 800e30e:	b503      	push	{r0, r1, lr}
 800e310:	4601      	mov	r1, r0
 800e312:	ab03      	add	r3, sp, #12
 800e314:	4805      	ldr	r0, [pc, #20]	; (800e32c <fiprintf+0x20>)
 800e316:	f853 2b04 	ldr.w	r2, [r3], #4
 800e31a:	6800      	ldr	r0, [r0, #0]
 800e31c:	9301      	str	r3, [sp, #4]
 800e31e:	f000 fda9 	bl	800ee74 <_vfiprintf_r>
 800e322:	b002      	add	sp, #8
 800e324:	f85d eb04 	ldr.w	lr, [sp], #4
 800e328:	b003      	add	sp, #12
 800e32a:	4770      	bx	lr
 800e32c:	2000000c 	.word	0x2000000c

0800e330 <_fwalk_reent>:
 800e330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e334:	4606      	mov	r6, r0
 800e336:	4688      	mov	r8, r1
 800e338:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e33c:	2700      	movs	r7, #0
 800e33e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e342:	f1b9 0901 	subs.w	r9, r9, #1
 800e346:	d505      	bpl.n	800e354 <_fwalk_reent+0x24>
 800e348:	6824      	ldr	r4, [r4, #0]
 800e34a:	2c00      	cmp	r4, #0
 800e34c:	d1f7      	bne.n	800e33e <_fwalk_reent+0xe>
 800e34e:	4638      	mov	r0, r7
 800e350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e354:	89ab      	ldrh	r3, [r5, #12]
 800e356:	2b01      	cmp	r3, #1
 800e358:	d907      	bls.n	800e36a <_fwalk_reent+0x3a>
 800e35a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e35e:	3301      	adds	r3, #1
 800e360:	d003      	beq.n	800e36a <_fwalk_reent+0x3a>
 800e362:	4629      	mov	r1, r5
 800e364:	4630      	mov	r0, r6
 800e366:	47c0      	blx	r8
 800e368:	4307      	orrs	r7, r0
 800e36a:	3568      	adds	r5, #104	; 0x68
 800e36c:	e7e9      	b.n	800e342 <_fwalk_reent+0x12>
	...

0800e370 <_localeconv_r>:
 800e370:	4800      	ldr	r0, [pc, #0]	; (800e374 <_localeconv_r+0x4>)
 800e372:	4770      	bx	lr
 800e374:	20000160 	.word	0x20000160

0800e378 <__retarget_lock_init_recursive>:
 800e378:	4770      	bx	lr

0800e37a <__retarget_lock_acquire_recursive>:
 800e37a:	4770      	bx	lr

0800e37c <__retarget_lock_release_recursive>:
 800e37c:	4770      	bx	lr

0800e37e <__swhatbuf_r>:
 800e37e:	b570      	push	{r4, r5, r6, lr}
 800e380:	460e      	mov	r6, r1
 800e382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e386:	2900      	cmp	r1, #0
 800e388:	b096      	sub	sp, #88	; 0x58
 800e38a:	4614      	mov	r4, r2
 800e38c:	461d      	mov	r5, r3
 800e38e:	da08      	bge.n	800e3a2 <__swhatbuf_r+0x24>
 800e390:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e394:	2200      	movs	r2, #0
 800e396:	602a      	str	r2, [r5, #0]
 800e398:	061a      	lsls	r2, r3, #24
 800e39a:	d410      	bmi.n	800e3be <__swhatbuf_r+0x40>
 800e39c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3a0:	e00e      	b.n	800e3c0 <__swhatbuf_r+0x42>
 800e3a2:	466a      	mov	r2, sp
 800e3a4:	f000 ff04 	bl	800f1b0 <_fstat_r>
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	dbf1      	blt.n	800e390 <__swhatbuf_r+0x12>
 800e3ac:	9a01      	ldr	r2, [sp, #4]
 800e3ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e3b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e3b6:	425a      	negs	r2, r3
 800e3b8:	415a      	adcs	r2, r3
 800e3ba:	602a      	str	r2, [r5, #0]
 800e3bc:	e7ee      	b.n	800e39c <__swhatbuf_r+0x1e>
 800e3be:	2340      	movs	r3, #64	; 0x40
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	6023      	str	r3, [r4, #0]
 800e3c4:	b016      	add	sp, #88	; 0x58
 800e3c6:	bd70      	pop	{r4, r5, r6, pc}

0800e3c8 <__smakebuf_r>:
 800e3c8:	898b      	ldrh	r3, [r1, #12]
 800e3ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3cc:	079d      	lsls	r5, r3, #30
 800e3ce:	4606      	mov	r6, r0
 800e3d0:	460c      	mov	r4, r1
 800e3d2:	d507      	bpl.n	800e3e4 <__smakebuf_r+0x1c>
 800e3d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e3d8:	6023      	str	r3, [r4, #0]
 800e3da:	6123      	str	r3, [r4, #16]
 800e3dc:	2301      	movs	r3, #1
 800e3de:	6163      	str	r3, [r4, #20]
 800e3e0:	b002      	add	sp, #8
 800e3e2:	bd70      	pop	{r4, r5, r6, pc}
 800e3e4:	ab01      	add	r3, sp, #4
 800e3e6:	466a      	mov	r2, sp
 800e3e8:	f7ff ffc9 	bl	800e37e <__swhatbuf_r>
 800e3ec:	9900      	ldr	r1, [sp, #0]
 800e3ee:	4605      	mov	r5, r0
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	f7fe f935 	bl	800c660 <_malloc_r>
 800e3f6:	b948      	cbnz	r0, 800e40c <__smakebuf_r+0x44>
 800e3f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3fc:	059a      	lsls	r2, r3, #22
 800e3fe:	d4ef      	bmi.n	800e3e0 <__smakebuf_r+0x18>
 800e400:	f023 0303 	bic.w	r3, r3, #3
 800e404:	f043 0302 	orr.w	r3, r3, #2
 800e408:	81a3      	strh	r3, [r4, #12]
 800e40a:	e7e3      	b.n	800e3d4 <__smakebuf_r+0xc>
 800e40c:	4b0d      	ldr	r3, [pc, #52]	; (800e444 <__smakebuf_r+0x7c>)
 800e40e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e410:	89a3      	ldrh	r3, [r4, #12]
 800e412:	6020      	str	r0, [r4, #0]
 800e414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e418:	81a3      	strh	r3, [r4, #12]
 800e41a:	9b00      	ldr	r3, [sp, #0]
 800e41c:	6163      	str	r3, [r4, #20]
 800e41e:	9b01      	ldr	r3, [sp, #4]
 800e420:	6120      	str	r0, [r4, #16]
 800e422:	b15b      	cbz	r3, 800e43c <__smakebuf_r+0x74>
 800e424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e428:	4630      	mov	r0, r6
 800e42a:	f000 fed3 	bl	800f1d4 <_isatty_r>
 800e42e:	b128      	cbz	r0, 800e43c <__smakebuf_r+0x74>
 800e430:	89a3      	ldrh	r3, [r4, #12]
 800e432:	f023 0303 	bic.w	r3, r3, #3
 800e436:	f043 0301 	orr.w	r3, r3, #1
 800e43a:	81a3      	strh	r3, [r4, #12]
 800e43c:	89a0      	ldrh	r0, [r4, #12]
 800e43e:	4305      	orrs	r5, r0
 800e440:	81a5      	strh	r5, [r4, #12]
 800e442:	e7cd      	b.n	800e3e0 <__smakebuf_r+0x18>
 800e444:	0800e1a9 	.word	0x0800e1a9

0800e448 <__malloc_lock>:
 800e448:	4801      	ldr	r0, [pc, #4]	; (800e450 <__malloc_lock+0x8>)
 800e44a:	f7ff bf96 	b.w	800e37a <__retarget_lock_acquire_recursive>
 800e44e:	bf00      	nop
 800e450:	20005250 	.word	0x20005250

0800e454 <__malloc_unlock>:
 800e454:	4801      	ldr	r0, [pc, #4]	; (800e45c <__malloc_unlock+0x8>)
 800e456:	f7ff bf91 	b.w	800e37c <__retarget_lock_release_recursive>
 800e45a:	bf00      	nop
 800e45c:	20005250 	.word	0x20005250

0800e460 <_Balloc>:
 800e460:	b570      	push	{r4, r5, r6, lr}
 800e462:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e464:	4604      	mov	r4, r0
 800e466:	460d      	mov	r5, r1
 800e468:	b976      	cbnz	r6, 800e488 <_Balloc+0x28>
 800e46a:	2010      	movs	r0, #16
 800e46c:	f7fe f850 	bl	800c510 <malloc>
 800e470:	4602      	mov	r2, r0
 800e472:	6260      	str	r0, [r4, #36]	; 0x24
 800e474:	b920      	cbnz	r0, 800e480 <_Balloc+0x20>
 800e476:	4b18      	ldr	r3, [pc, #96]	; (800e4d8 <_Balloc+0x78>)
 800e478:	4818      	ldr	r0, [pc, #96]	; (800e4dc <_Balloc+0x7c>)
 800e47a:	2166      	movs	r1, #102	; 0x66
 800e47c:	f7fe ff14 	bl	800d2a8 <__assert_func>
 800e480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e484:	6006      	str	r6, [r0, #0]
 800e486:	60c6      	str	r6, [r0, #12]
 800e488:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e48a:	68f3      	ldr	r3, [r6, #12]
 800e48c:	b183      	cbz	r3, 800e4b0 <_Balloc+0x50>
 800e48e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e496:	b9b8      	cbnz	r0, 800e4c8 <_Balloc+0x68>
 800e498:	2101      	movs	r1, #1
 800e49a:	fa01 f605 	lsl.w	r6, r1, r5
 800e49e:	1d72      	adds	r2, r6, #5
 800e4a0:	0092      	lsls	r2, r2, #2
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	f7fe f85a 	bl	800c55c <_calloc_r>
 800e4a8:	b160      	cbz	r0, 800e4c4 <_Balloc+0x64>
 800e4aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e4ae:	e00e      	b.n	800e4ce <_Balloc+0x6e>
 800e4b0:	2221      	movs	r2, #33	; 0x21
 800e4b2:	2104      	movs	r1, #4
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	f7fe f851 	bl	800c55c <_calloc_r>
 800e4ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4bc:	60f0      	str	r0, [r6, #12]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1e4      	bne.n	800e48e <_Balloc+0x2e>
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	bd70      	pop	{r4, r5, r6, pc}
 800e4c8:	6802      	ldr	r2, [r0, #0]
 800e4ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4d4:	e7f7      	b.n	800e4c6 <_Balloc+0x66>
 800e4d6:	bf00      	nop
 800e4d8:	0801127c 	.word	0x0801127c
 800e4dc:	08011404 	.word	0x08011404

0800e4e0 <_Bfree>:
 800e4e0:	b570      	push	{r4, r5, r6, lr}
 800e4e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4e4:	4605      	mov	r5, r0
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	b976      	cbnz	r6, 800e508 <_Bfree+0x28>
 800e4ea:	2010      	movs	r0, #16
 800e4ec:	f7fe f810 	bl	800c510 <malloc>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	6268      	str	r0, [r5, #36]	; 0x24
 800e4f4:	b920      	cbnz	r0, 800e500 <_Bfree+0x20>
 800e4f6:	4b09      	ldr	r3, [pc, #36]	; (800e51c <_Bfree+0x3c>)
 800e4f8:	4809      	ldr	r0, [pc, #36]	; (800e520 <_Bfree+0x40>)
 800e4fa:	218a      	movs	r1, #138	; 0x8a
 800e4fc:	f7fe fed4 	bl	800d2a8 <__assert_func>
 800e500:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e504:	6006      	str	r6, [r0, #0]
 800e506:	60c6      	str	r6, [r0, #12]
 800e508:	b13c      	cbz	r4, 800e51a <_Bfree+0x3a>
 800e50a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e50c:	6862      	ldr	r2, [r4, #4]
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e514:	6021      	str	r1, [r4, #0]
 800e516:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e51a:	bd70      	pop	{r4, r5, r6, pc}
 800e51c:	0801127c 	.word	0x0801127c
 800e520:	08011404 	.word	0x08011404

0800e524 <__multadd>:
 800e524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e528:	690d      	ldr	r5, [r1, #16]
 800e52a:	4607      	mov	r7, r0
 800e52c:	460c      	mov	r4, r1
 800e52e:	461e      	mov	r6, r3
 800e530:	f101 0c14 	add.w	ip, r1, #20
 800e534:	2000      	movs	r0, #0
 800e536:	f8dc 3000 	ldr.w	r3, [ip]
 800e53a:	b299      	uxth	r1, r3
 800e53c:	fb02 6101 	mla	r1, r2, r1, r6
 800e540:	0c1e      	lsrs	r6, r3, #16
 800e542:	0c0b      	lsrs	r3, r1, #16
 800e544:	fb02 3306 	mla	r3, r2, r6, r3
 800e548:	b289      	uxth	r1, r1
 800e54a:	3001      	adds	r0, #1
 800e54c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e550:	4285      	cmp	r5, r0
 800e552:	f84c 1b04 	str.w	r1, [ip], #4
 800e556:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e55a:	dcec      	bgt.n	800e536 <__multadd+0x12>
 800e55c:	b30e      	cbz	r6, 800e5a2 <__multadd+0x7e>
 800e55e:	68a3      	ldr	r3, [r4, #8]
 800e560:	42ab      	cmp	r3, r5
 800e562:	dc19      	bgt.n	800e598 <__multadd+0x74>
 800e564:	6861      	ldr	r1, [r4, #4]
 800e566:	4638      	mov	r0, r7
 800e568:	3101      	adds	r1, #1
 800e56a:	f7ff ff79 	bl	800e460 <_Balloc>
 800e56e:	4680      	mov	r8, r0
 800e570:	b928      	cbnz	r0, 800e57e <__multadd+0x5a>
 800e572:	4602      	mov	r2, r0
 800e574:	4b0c      	ldr	r3, [pc, #48]	; (800e5a8 <__multadd+0x84>)
 800e576:	480d      	ldr	r0, [pc, #52]	; (800e5ac <__multadd+0x88>)
 800e578:	21b5      	movs	r1, #181	; 0xb5
 800e57a:	f7fe fe95 	bl	800d2a8 <__assert_func>
 800e57e:	6922      	ldr	r2, [r4, #16]
 800e580:	3202      	adds	r2, #2
 800e582:	f104 010c 	add.w	r1, r4, #12
 800e586:	0092      	lsls	r2, r2, #2
 800e588:	300c      	adds	r0, #12
 800e58a:	f7fd ffd1 	bl	800c530 <memcpy>
 800e58e:	4621      	mov	r1, r4
 800e590:	4638      	mov	r0, r7
 800e592:	f7ff ffa5 	bl	800e4e0 <_Bfree>
 800e596:	4644      	mov	r4, r8
 800e598:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e59c:	3501      	adds	r5, #1
 800e59e:	615e      	str	r6, [r3, #20]
 800e5a0:	6125      	str	r5, [r4, #16]
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a8:	08011392 	.word	0x08011392
 800e5ac:	08011404 	.word	0x08011404

0800e5b0 <__hi0bits>:
 800e5b0:	0c03      	lsrs	r3, r0, #16
 800e5b2:	041b      	lsls	r3, r3, #16
 800e5b4:	b9d3      	cbnz	r3, 800e5ec <__hi0bits+0x3c>
 800e5b6:	0400      	lsls	r0, r0, #16
 800e5b8:	2310      	movs	r3, #16
 800e5ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e5be:	bf04      	itt	eq
 800e5c0:	0200      	lsleq	r0, r0, #8
 800e5c2:	3308      	addeq	r3, #8
 800e5c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e5c8:	bf04      	itt	eq
 800e5ca:	0100      	lsleq	r0, r0, #4
 800e5cc:	3304      	addeq	r3, #4
 800e5ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e5d2:	bf04      	itt	eq
 800e5d4:	0080      	lsleq	r0, r0, #2
 800e5d6:	3302      	addeq	r3, #2
 800e5d8:	2800      	cmp	r0, #0
 800e5da:	db05      	blt.n	800e5e8 <__hi0bits+0x38>
 800e5dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e5e0:	f103 0301 	add.w	r3, r3, #1
 800e5e4:	bf08      	it	eq
 800e5e6:	2320      	moveq	r3, #32
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	4770      	bx	lr
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	e7e4      	b.n	800e5ba <__hi0bits+0xa>

0800e5f0 <__lo0bits>:
 800e5f0:	6803      	ldr	r3, [r0, #0]
 800e5f2:	f013 0207 	ands.w	r2, r3, #7
 800e5f6:	4601      	mov	r1, r0
 800e5f8:	d00b      	beq.n	800e612 <__lo0bits+0x22>
 800e5fa:	07da      	lsls	r2, r3, #31
 800e5fc:	d423      	bmi.n	800e646 <__lo0bits+0x56>
 800e5fe:	0798      	lsls	r0, r3, #30
 800e600:	bf49      	itett	mi
 800e602:	085b      	lsrmi	r3, r3, #1
 800e604:	089b      	lsrpl	r3, r3, #2
 800e606:	2001      	movmi	r0, #1
 800e608:	600b      	strmi	r3, [r1, #0]
 800e60a:	bf5c      	itt	pl
 800e60c:	600b      	strpl	r3, [r1, #0]
 800e60e:	2002      	movpl	r0, #2
 800e610:	4770      	bx	lr
 800e612:	b298      	uxth	r0, r3
 800e614:	b9a8      	cbnz	r0, 800e642 <__lo0bits+0x52>
 800e616:	0c1b      	lsrs	r3, r3, #16
 800e618:	2010      	movs	r0, #16
 800e61a:	b2da      	uxtb	r2, r3
 800e61c:	b90a      	cbnz	r2, 800e622 <__lo0bits+0x32>
 800e61e:	3008      	adds	r0, #8
 800e620:	0a1b      	lsrs	r3, r3, #8
 800e622:	071a      	lsls	r2, r3, #28
 800e624:	bf04      	itt	eq
 800e626:	091b      	lsreq	r3, r3, #4
 800e628:	3004      	addeq	r0, #4
 800e62a:	079a      	lsls	r2, r3, #30
 800e62c:	bf04      	itt	eq
 800e62e:	089b      	lsreq	r3, r3, #2
 800e630:	3002      	addeq	r0, #2
 800e632:	07da      	lsls	r2, r3, #31
 800e634:	d403      	bmi.n	800e63e <__lo0bits+0x4e>
 800e636:	085b      	lsrs	r3, r3, #1
 800e638:	f100 0001 	add.w	r0, r0, #1
 800e63c:	d005      	beq.n	800e64a <__lo0bits+0x5a>
 800e63e:	600b      	str	r3, [r1, #0]
 800e640:	4770      	bx	lr
 800e642:	4610      	mov	r0, r2
 800e644:	e7e9      	b.n	800e61a <__lo0bits+0x2a>
 800e646:	2000      	movs	r0, #0
 800e648:	4770      	bx	lr
 800e64a:	2020      	movs	r0, #32
 800e64c:	4770      	bx	lr
	...

0800e650 <__i2b>:
 800e650:	b510      	push	{r4, lr}
 800e652:	460c      	mov	r4, r1
 800e654:	2101      	movs	r1, #1
 800e656:	f7ff ff03 	bl	800e460 <_Balloc>
 800e65a:	4602      	mov	r2, r0
 800e65c:	b928      	cbnz	r0, 800e66a <__i2b+0x1a>
 800e65e:	4b05      	ldr	r3, [pc, #20]	; (800e674 <__i2b+0x24>)
 800e660:	4805      	ldr	r0, [pc, #20]	; (800e678 <__i2b+0x28>)
 800e662:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e666:	f7fe fe1f 	bl	800d2a8 <__assert_func>
 800e66a:	2301      	movs	r3, #1
 800e66c:	6144      	str	r4, [r0, #20]
 800e66e:	6103      	str	r3, [r0, #16]
 800e670:	bd10      	pop	{r4, pc}
 800e672:	bf00      	nop
 800e674:	08011392 	.word	0x08011392
 800e678:	08011404 	.word	0x08011404

0800e67c <__multiply>:
 800e67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e680:	4691      	mov	r9, r2
 800e682:	690a      	ldr	r2, [r1, #16]
 800e684:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e688:	429a      	cmp	r2, r3
 800e68a:	bfb8      	it	lt
 800e68c:	460b      	movlt	r3, r1
 800e68e:	460c      	mov	r4, r1
 800e690:	bfbc      	itt	lt
 800e692:	464c      	movlt	r4, r9
 800e694:	4699      	movlt	r9, r3
 800e696:	6927      	ldr	r7, [r4, #16]
 800e698:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e69c:	68a3      	ldr	r3, [r4, #8]
 800e69e:	6861      	ldr	r1, [r4, #4]
 800e6a0:	eb07 060a 	add.w	r6, r7, sl
 800e6a4:	42b3      	cmp	r3, r6
 800e6a6:	b085      	sub	sp, #20
 800e6a8:	bfb8      	it	lt
 800e6aa:	3101      	addlt	r1, #1
 800e6ac:	f7ff fed8 	bl	800e460 <_Balloc>
 800e6b0:	b930      	cbnz	r0, 800e6c0 <__multiply+0x44>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	4b44      	ldr	r3, [pc, #272]	; (800e7c8 <__multiply+0x14c>)
 800e6b6:	4845      	ldr	r0, [pc, #276]	; (800e7cc <__multiply+0x150>)
 800e6b8:	f240 115d 	movw	r1, #349	; 0x15d
 800e6bc:	f7fe fdf4 	bl	800d2a8 <__assert_func>
 800e6c0:	f100 0514 	add.w	r5, r0, #20
 800e6c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e6c8:	462b      	mov	r3, r5
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	4543      	cmp	r3, r8
 800e6ce:	d321      	bcc.n	800e714 <__multiply+0x98>
 800e6d0:	f104 0314 	add.w	r3, r4, #20
 800e6d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e6d8:	f109 0314 	add.w	r3, r9, #20
 800e6dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e6e0:	9202      	str	r2, [sp, #8]
 800e6e2:	1b3a      	subs	r2, r7, r4
 800e6e4:	3a15      	subs	r2, #21
 800e6e6:	f022 0203 	bic.w	r2, r2, #3
 800e6ea:	3204      	adds	r2, #4
 800e6ec:	f104 0115 	add.w	r1, r4, #21
 800e6f0:	428f      	cmp	r7, r1
 800e6f2:	bf38      	it	cc
 800e6f4:	2204      	movcc	r2, #4
 800e6f6:	9201      	str	r2, [sp, #4]
 800e6f8:	9a02      	ldr	r2, [sp, #8]
 800e6fa:	9303      	str	r3, [sp, #12]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d80c      	bhi.n	800e71a <__multiply+0x9e>
 800e700:	2e00      	cmp	r6, #0
 800e702:	dd03      	ble.n	800e70c <__multiply+0x90>
 800e704:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d05a      	beq.n	800e7c2 <__multiply+0x146>
 800e70c:	6106      	str	r6, [r0, #16]
 800e70e:	b005      	add	sp, #20
 800e710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e714:	f843 2b04 	str.w	r2, [r3], #4
 800e718:	e7d8      	b.n	800e6cc <__multiply+0x50>
 800e71a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e71e:	f1ba 0f00 	cmp.w	sl, #0
 800e722:	d024      	beq.n	800e76e <__multiply+0xf2>
 800e724:	f104 0e14 	add.w	lr, r4, #20
 800e728:	46a9      	mov	r9, r5
 800e72a:	f04f 0c00 	mov.w	ip, #0
 800e72e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e732:	f8d9 1000 	ldr.w	r1, [r9]
 800e736:	fa1f fb82 	uxth.w	fp, r2
 800e73a:	b289      	uxth	r1, r1
 800e73c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e740:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e744:	f8d9 2000 	ldr.w	r2, [r9]
 800e748:	4461      	add	r1, ip
 800e74a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e74e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e752:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e756:	b289      	uxth	r1, r1
 800e758:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e75c:	4577      	cmp	r7, lr
 800e75e:	f849 1b04 	str.w	r1, [r9], #4
 800e762:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e766:	d8e2      	bhi.n	800e72e <__multiply+0xb2>
 800e768:	9a01      	ldr	r2, [sp, #4]
 800e76a:	f845 c002 	str.w	ip, [r5, r2]
 800e76e:	9a03      	ldr	r2, [sp, #12]
 800e770:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e774:	3304      	adds	r3, #4
 800e776:	f1b9 0f00 	cmp.w	r9, #0
 800e77a:	d020      	beq.n	800e7be <__multiply+0x142>
 800e77c:	6829      	ldr	r1, [r5, #0]
 800e77e:	f104 0c14 	add.w	ip, r4, #20
 800e782:	46ae      	mov	lr, r5
 800e784:	f04f 0a00 	mov.w	sl, #0
 800e788:	f8bc b000 	ldrh.w	fp, [ip]
 800e78c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e790:	fb09 220b 	mla	r2, r9, fp, r2
 800e794:	4492      	add	sl, r2
 800e796:	b289      	uxth	r1, r1
 800e798:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e79c:	f84e 1b04 	str.w	r1, [lr], #4
 800e7a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e7a4:	f8be 1000 	ldrh.w	r1, [lr]
 800e7a8:	0c12      	lsrs	r2, r2, #16
 800e7aa:	fb09 1102 	mla	r1, r9, r2, r1
 800e7ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e7b2:	4567      	cmp	r7, ip
 800e7b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e7b8:	d8e6      	bhi.n	800e788 <__multiply+0x10c>
 800e7ba:	9a01      	ldr	r2, [sp, #4]
 800e7bc:	50a9      	str	r1, [r5, r2]
 800e7be:	3504      	adds	r5, #4
 800e7c0:	e79a      	b.n	800e6f8 <__multiply+0x7c>
 800e7c2:	3e01      	subs	r6, #1
 800e7c4:	e79c      	b.n	800e700 <__multiply+0x84>
 800e7c6:	bf00      	nop
 800e7c8:	08011392 	.word	0x08011392
 800e7cc:	08011404 	.word	0x08011404

0800e7d0 <__pow5mult>:
 800e7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7d4:	4615      	mov	r5, r2
 800e7d6:	f012 0203 	ands.w	r2, r2, #3
 800e7da:	4606      	mov	r6, r0
 800e7dc:	460f      	mov	r7, r1
 800e7de:	d007      	beq.n	800e7f0 <__pow5mult+0x20>
 800e7e0:	4c25      	ldr	r4, [pc, #148]	; (800e878 <__pow5mult+0xa8>)
 800e7e2:	3a01      	subs	r2, #1
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7ea:	f7ff fe9b 	bl	800e524 <__multadd>
 800e7ee:	4607      	mov	r7, r0
 800e7f0:	10ad      	asrs	r5, r5, #2
 800e7f2:	d03d      	beq.n	800e870 <__pow5mult+0xa0>
 800e7f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e7f6:	b97c      	cbnz	r4, 800e818 <__pow5mult+0x48>
 800e7f8:	2010      	movs	r0, #16
 800e7fa:	f7fd fe89 	bl	800c510 <malloc>
 800e7fe:	4602      	mov	r2, r0
 800e800:	6270      	str	r0, [r6, #36]	; 0x24
 800e802:	b928      	cbnz	r0, 800e810 <__pow5mult+0x40>
 800e804:	4b1d      	ldr	r3, [pc, #116]	; (800e87c <__pow5mult+0xac>)
 800e806:	481e      	ldr	r0, [pc, #120]	; (800e880 <__pow5mult+0xb0>)
 800e808:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e80c:	f7fe fd4c 	bl	800d2a8 <__assert_func>
 800e810:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e814:	6004      	str	r4, [r0, #0]
 800e816:	60c4      	str	r4, [r0, #12]
 800e818:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e81c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e820:	b94c      	cbnz	r4, 800e836 <__pow5mult+0x66>
 800e822:	f240 2171 	movw	r1, #625	; 0x271
 800e826:	4630      	mov	r0, r6
 800e828:	f7ff ff12 	bl	800e650 <__i2b>
 800e82c:	2300      	movs	r3, #0
 800e82e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e832:	4604      	mov	r4, r0
 800e834:	6003      	str	r3, [r0, #0]
 800e836:	f04f 0900 	mov.w	r9, #0
 800e83a:	07eb      	lsls	r3, r5, #31
 800e83c:	d50a      	bpl.n	800e854 <__pow5mult+0x84>
 800e83e:	4639      	mov	r1, r7
 800e840:	4622      	mov	r2, r4
 800e842:	4630      	mov	r0, r6
 800e844:	f7ff ff1a 	bl	800e67c <__multiply>
 800e848:	4639      	mov	r1, r7
 800e84a:	4680      	mov	r8, r0
 800e84c:	4630      	mov	r0, r6
 800e84e:	f7ff fe47 	bl	800e4e0 <_Bfree>
 800e852:	4647      	mov	r7, r8
 800e854:	106d      	asrs	r5, r5, #1
 800e856:	d00b      	beq.n	800e870 <__pow5mult+0xa0>
 800e858:	6820      	ldr	r0, [r4, #0]
 800e85a:	b938      	cbnz	r0, 800e86c <__pow5mult+0x9c>
 800e85c:	4622      	mov	r2, r4
 800e85e:	4621      	mov	r1, r4
 800e860:	4630      	mov	r0, r6
 800e862:	f7ff ff0b 	bl	800e67c <__multiply>
 800e866:	6020      	str	r0, [r4, #0]
 800e868:	f8c0 9000 	str.w	r9, [r0]
 800e86c:	4604      	mov	r4, r0
 800e86e:	e7e4      	b.n	800e83a <__pow5mult+0x6a>
 800e870:	4638      	mov	r0, r7
 800e872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e876:	bf00      	nop
 800e878:	08011550 	.word	0x08011550
 800e87c:	0801127c 	.word	0x0801127c
 800e880:	08011404 	.word	0x08011404

0800e884 <__lshift>:
 800e884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e888:	460c      	mov	r4, r1
 800e88a:	6849      	ldr	r1, [r1, #4]
 800e88c:	6923      	ldr	r3, [r4, #16]
 800e88e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e892:	68a3      	ldr	r3, [r4, #8]
 800e894:	4607      	mov	r7, r0
 800e896:	4691      	mov	r9, r2
 800e898:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e89c:	f108 0601 	add.w	r6, r8, #1
 800e8a0:	42b3      	cmp	r3, r6
 800e8a2:	db0b      	blt.n	800e8bc <__lshift+0x38>
 800e8a4:	4638      	mov	r0, r7
 800e8a6:	f7ff fddb 	bl	800e460 <_Balloc>
 800e8aa:	4605      	mov	r5, r0
 800e8ac:	b948      	cbnz	r0, 800e8c2 <__lshift+0x3e>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	4b2a      	ldr	r3, [pc, #168]	; (800e95c <__lshift+0xd8>)
 800e8b2:	482b      	ldr	r0, [pc, #172]	; (800e960 <__lshift+0xdc>)
 800e8b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e8b8:	f7fe fcf6 	bl	800d2a8 <__assert_func>
 800e8bc:	3101      	adds	r1, #1
 800e8be:	005b      	lsls	r3, r3, #1
 800e8c0:	e7ee      	b.n	800e8a0 <__lshift+0x1c>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	f100 0114 	add.w	r1, r0, #20
 800e8c8:	f100 0210 	add.w	r2, r0, #16
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	4553      	cmp	r3, sl
 800e8d0:	db37      	blt.n	800e942 <__lshift+0xbe>
 800e8d2:	6920      	ldr	r0, [r4, #16]
 800e8d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8d8:	f104 0314 	add.w	r3, r4, #20
 800e8dc:	f019 091f 	ands.w	r9, r9, #31
 800e8e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e8e8:	d02f      	beq.n	800e94a <__lshift+0xc6>
 800e8ea:	f1c9 0e20 	rsb	lr, r9, #32
 800e8ee:	468a      	mov	sl, r1
 800e8f0:	f04f 0c00 	mov.w	ip, #0
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	fa02 f209 	lsl.w	r2, r2, r9
 800e8fa:	ea42 020c 	orr.w	r2, r2, ip
 800e8fe:	f84a 2b04 	str.w	r2, [sl], #4
 800e902:	f853 2b04 	ldr.w	r2, [r3], #4
 800e906:	4298      	cmp	r0, r3
 800e908:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e90c:	d8f2      	bhi.n	800e8f4 <__lshift+0x70>
 800e90e:	1b03      	subs	r3, r0, r4
 800e910:	3b15      	subs	r3, #21
 800e912:	f023 0303 	bic.w	r3, r3, #3
 800e916:	3304      	adds	r3, #4
 800e918:	f104 0215 	add.w	r2, r4, #21
 800e91c:	4290      	cmp	r0, r2
 800e91e:	bf38      	it	cc
 800e920:	2304      	movcc	r3, #4
 800e922:	f841 c003 	str.w	ip, [r1, r3]
 800e926:	f1bc 0f00 	cmp.w	ip, #0
 800e92a:	d001      	beq.n	800e930 <__lshift+0xac>
 800e92c:	f108 0602 	add.w	r6, r8, #2
 800e930:	3e01      	subs	r6, #1
 800e932:	4638      	mov	r0, r7
 800e934:	612e      	str	r6, [r5, #16]
 800e936:	4621      	mov	r1, r4
 800e938:	f7ff fdd2 	bl	800e4e0 <_Bfree>
 800e93c:	4628      	mov	r0, r5
 800e93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e942:	f842 0f04 	str.w	r0, [r2, #4]!
 800e946:	3301      	adds	r3, #1
 800e948:	e7c1      	b.n	800e8ce <__lshift+0x4a>
 800e94a:	3904      	subs	r1, #4
 800e94c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e950:	f841 2f04 	str.w	r2, [r1, #4]!
 800e954:	4298      	cmp	r0, r3
 800e956:	d8f9      	bhi.n	800e94c <__lshift+0xc8>
 800e958:	e7ea      	b.n	800e930 <__lshift+0xac>
 800e95a:	bf00      	nop
 800e95c:	08011392 	.word	0x08011392
 800e960:	08011404 	.word	0x08011404

0800e964 <__mcmp>:
 800e964:	b530      	push	{r4, r5, lr}
 800e966:	6902      	ldr	r2, [r0, #16]
 800e968:	690c      	ldr	r4, [r1, #16]
 800e96a:	1b12      	subs	r2, r2, r4
 800e96c:	d10e      	bne.n	800e98c <__mcmp+0x28>
 800e96e:	f100 0314 	add.w	r3, r0, #20
 800e972:	3114      	adds	r1, #20
 800e974:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e978:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e97c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e980:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e984:	42a5      	cmp	r5, r4
 800e986:	d003      	beq.n	800e990 <__mcmp+0x2c>
 800e988:	d305      	bcc.n	800e996 <__mcmp+0x32>
 800e98a:	2201      	movs	r2, #1
 800e98c:	4610      	mov	r0, r2
 800e98e:	bd30      	pop	{r4, r5, pc}
 800e990:	4283      	cmp	r3, r0
 800e992:	d3f3      	bcc.n	800e97c <__mcmp+0x18>
 800e994:	e7fa      	b.n	800e98c <__mcmp+0x28>
 800e996:	f04f 32ff 	mov.w	r2, #4294967295
 800e99a:	e7f7      	b.n	800e98c <__mcmp+0x28>

0800e99c <__mdiff>:
 800e99c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a0:	460c      	mov	r4, r1
 800e9a2:	4606      	mov	r6, r0
 800e9a4:	4611      	mov	r1, r2
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	4690      	mov	r8, r2
 800e9aa:	f7ff ffdb 	bl	800e964 <__mcmp>
 800e9ae:	1e05      	subs	r5, r0, #0
 800e9b0:	d110      	bne.n	800e9d4 <__mdiff+0x38>
 800e9b2:	4629      	mov	r1, r5
 800e9b4:	4630      	mov	r0, r6
 800e9b6:	f7ff fd53 	bl	800e460 <_Balloc>
 800e9ba:	b930      	cbnz	r0, 800e9ca <__mdiff+0x2e>
 800e9bc:	4b3a      	ldr	r3, [pc, #232]	; (800eaa8 <__mdiff+0x10c>)
 800e9be:	4602      	mov	r2, r0
 800e9c0:	f240 2132 	movw	r1, #562	; 0x232
 800e9c4:	4839      	ldr	r0, [pc, #228]	; (800eaac <__mdiff+0x110>)
 800e9c6:	f7fe fc6f 	bl	800d2a8 <__assert_func>
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9d4:	bfa4      	itt	ge
 800e9d6:	4643      	movge	r3, r8
 800e9d8:	46a0      	movge	r8, r4
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e9e0:	bfa6      	itte	ge
 800e9e2:	461c      	movge	r4, r3
 800e9e4:	2500      	movge	r5, #0
 800e9e6:	2501      	movlt	r5, #1
 800e9e8:	f7ff fd3a 	bl	800e460 <_Balloc>
 800e9ec:	b920      	cbnz	r0, 800e9f8 <__mdiff+0x5c>
 800e9ee:	4b2e      	ldr	r3, [pc, #184]	; (800eaa8 <__mdiff+0x10c>)
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e9f6:	e7e5      	b.n	800e9c4 <__mdiff+0x28>
 800e9f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e9fc:	6926      	ldr	r6, [r4, #16]
 800e9fe:	60c5      	str	r5, [r0, #12]
 800ea00:	f104 0914 	add.w	r9, r4, #20
 800ea04:	f108 0514 	add.w	r5, r8, #20
 800ea08:	f100 0e14 	add.w	lr, r0, #20
 800ea0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ea10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ea14:	f108 0210 	add.w	r2, r8, #16
 800ea18:	46f2      	mov	sl, lr
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ea24:	fa1f f883 	uxth.w	r8, r3
 800ea28:	fa11 f18b 	uxtah	r1, r1, fp
 800ea2c:	0c1b      	lsrs	r3, r3, #16
 800ea2e:	eba1 0808 	sub.w	r8, r1, r8
 800ea32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ea36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ea3a:	fa1f f888 	uxth.w	r8, r8
 800ea3e:	1419      	asrs	r1, r3, #16
 800ea40:	454e      	cmp	r6, r9
 800ea42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ea46:	f84a 3b04 	str.w	r3, [sl], #4
 800ea4a:	d8e7      	bhi.n	800ea1c <__mdiff+0x80>
 800ea4c:	1b33      	subs	r3, r6, r4
 800ea4e:	3b15      	subs	r3, #21
 800ea50:	f023 0303 	bic.w	r3, r3, #3
 800ea54:	3304      	adds	r3, #4
 800ea56:	3415      	adds	r4, #21
 800ea58:	42a6      	cmp	r6, r4
 800ea5a:	bf38      	it	cc
 800ea5c:	2304      	movcc	r3, #4
 800ea5e:	441d      	add	r5, r3
 800ea60:	4473      	add	r3, lr
 800ea62:	469e      	mov	lr, r3
 800ea64:	462e      	mov	r6, r5
 800ea66:	4566      	cmp	r6, ip
 800ea68:	d30e      	bcc.n	800ea88 <__mdiff+0xec>
 800ea6a:	f10c 0203 	add.w	r2, ip, #3
 800ea6e:	1b52      	subs	r2, r2, r5
 800ea70:	f022 0203 	bic.w	r2, r2, #3
 800ea74:	3d03      	subs	r5, #3
 800ea76:	45ac      	cmp	ip, r5
 800ea78:	bf38      	it	cc
 800ea7a:	2200      	movcc	r2, #0
 800ea7c:	441a      	add	r2, r3
 800ea7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ea82:	b17b      	cbz	r3, 800eaa4 <__mdiff+0x108>
 800ea84:	6107      	str	r7, [r0, #16]
 800ea86:	e7a3      	b.n	800e9d0 <__mdiff+0x34>
 800ea88:	f856 8b04 	ldr.w	r8, [r6], #4
 800ea8c:	fa11 f288 	uxtah	r2, r1, r8
 800ea90:	1414      	asrs	r4, r2, #16
 800ea92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ea96:	b292      	uxth	r2, r2
 800ea98:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ea9c:	f84e 2b04 	str.w	r2, [lr], #4
 800eaa0:	1421      	asrs	r1, r4, #16
 800eaa2:	e7e0      	b.n	800ea66 <__mdiff+0xca>
 800eaa4:	3f01      	subs	r7, #1
 800eaa6:	e7ea      	b.n	800ea7e <__mdiff+0xe2>
 800eaa8:	08011392 	.word	0x08011392
 800eaac:	08011404 	.word	0x08011404

0800eab0 <__d2b>:
 800eab0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eab4:	4689      	mov	r9, r1
 800eab6:	2101      	movs	r1, #1
 800eab8:	ec57 6b10 	vmov	r6, r7, d0
 800eabc:	4690      	mov	r8, r2
 800eabe:	f7ff fccf 	bl	800e460 <_Balloc>
 800eac2:	4604      	mov	r4, r0
 800eac4:	b930      	cbnz	r0, 800ead4 <__d2b+0x24>
 800eac6:	4602      	mov	r2, r0
 800eac8:	4b25      	ldr	r3, [pc, #148]	; (800eb60 <__d2b+0xb0>)
 800eaca:	4826      	ldr	r0, [pc, #152]	; (800eb64 <__d2b+0xb4>)
 800eacc:	f240 310a 	movw	r1, #778	; 0x30a
 800ead0:	f7fe fbea 	bl	800d2a8 <__assert_func>
 800ead4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ead8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eadc:	bb35      	cbnz	r5, 800eb2c <__d2b+0x7c>
 800eade:	2e00      	cmp	r6, #0
 800eae0:	9301      	str	r3, [sp, #4]
 800eae2:	d028      	beq.n	800eb36 <__d2b+0x86>
 800eae4:	4668      	mov	r0, sp
 800eae6:	9600      	str	r6, [sp, #0]
 800eae8:	f7ff fd82 	bl	800e5f0 <__lo0bits>
 800eaec:	9900      	ldr	r1, [sp, #0]
 800eaee:	b300      	cbz	r0, 800eb32 <__d2b+0x82>
 800eaf0:	9a01      	ldr	r2, [sp, #4]
 800eaf2:	f1c0 0320 	rsb	r3, r0, #32
 800eaf6:	fa02 f303 	lsl.w	r3, r2, r3
 800eafa:	430b      	orrs	r3, r1
 800eafc:	40c2      	lsrs	r2, r0
 800eafe:	6163      	str	r3, [r4, #20]
 800eb00:	9201      	str	r2, [sp, #4]
 800eb02:	9b01      	ldr	r3, [sp, #4]
 800eb04:	61a3      	str	r3, [r4, #24]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	bf14      	ite	ne
 800eb0a:	2202      	movne	r2, #2
 800eb0c:	2201      	moveq	r2, #1
 800eb0e:	6122      	str	r2, [r4, #16]
 800eb10:	b1d5      	cbz	r5, 800eb48 <__d2b+0x98>
 800eb12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eb16:	4405      	add	r5, r0
 800eb18:	f8c9 5000 	str.w	r5, [r9]
 800eb1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eb20:	f8c8 0000 	str.w	r0, [r8]
 800eb24:	4620      	mov	r0, r4
 800eb26:	b003      	add	sp, #12
 800eb28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb30:	e7d5      	b.n	800eade <__d2b+0x2e>
 800eb32:	6161      	str	r1, [r4, #20]
 800eb34:	e7e5      	b.n	800eb02 <__d2b+0x52>
 800eb36:	a801      	add	r0, sp, #4
 800eb38:	f7ff fd5a 	bl	800e5f0 <__lo0bits>
 800eb3c:	9b01      	ldr	r3, [sp, #4]
 800eb3e:	6163      	str	r3, [r4, #20]
 800eb40:	2201      	movs	r2, #1
 800eb42:	6122      	str	r2, [r4, #16]
 800eb44:	3020      	adds	r0, #32
 800eb46:	e7e3      	b.n	800eb10 <__d2b+0x60>
 800eb48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eb50:	f8c9 0000 	str.w	r0, [r9]
 800eb54:	6918      	ldr	r0, [r3, #16]
 800eb56:	f7ff fd2b 	bl	800e5b0 <__hi0bits>
 800eb5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb5e:	e7df      	b.n	800eb20 <__d2b+0x70>
 800eb60:	08011392 	.word	0x08011392
 800eb64:	08011404 	.word	0x08011404

0800eb68 <__ssputs_r>:
 800eb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb6c:	688e      	ldr	r6, [r1, #8]
 800eb6e:	429e      	cmp	r6, r3
 800eb70:	4682      	mov	sl, r0
 800eb72:	460c      	mov	r4, r1
 800eb74:	4690      	mov	r8, r2
 800eb76:	461f      	mov	r7, r3
 800eb78:	d838      	bhi.n	800ebec <__ssputs_r+0x84>
 800eb7a:	898a      	ldrh	r2, [r1, #12]
 800eb7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb80:	d032      	beq.n	800ebe8 <__ssputs_r+0x80>
 800eb82:	6825      	ldr	r5, [r4, #0]
 800eb84:	6909      	ldr	r1, [r1, #16]
 800eb86:	eba5 0901 	sub.w	r9, r5, r1
 800eb8a:	6965      	ldr	r5, [r4, #20]
 800eb8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb94:	3301      	adds	r3, #1
 800eb96:	444b      	add	r3, r9
 800eb98:	106d      	asrs	r5, r5, #1
 800eb9a:	429d      	cmp	r5, r3
 800eb9c:	bf38      	it	cc
 800eb9e:	461d      	movcc	r5, r3
 800eba0:	0553      	lsls	r3, r2, #21
 800eba2:	d531      	bpl.n	800ec08 <__ssputs_r+0xa0>
 800eba4:	4629      	mov	r1, r5
 800eba6:	f7fd fd5b 	bl	800c660 <_malloc_r>
 800ebaa:	4606      	mov	r6, r0
 800ebac:	b950      	cbnz	r0, 800ebc4 <__ssputs_r+0x5c>
 800ebae:	230c      	movs	r3, #12
 800ebb0:	f8ca 3000 	str.w	r3, [sl]
 800ebb4:	89a3      	ldrh	r3, [r4, #12]
 800ebb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebba:	81a3      	strh	r3, [r4, #12]
 800ebbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebc4:	6921      	ldr	r1, [r4, #16]
 800ebc6:	464a      	mov	r2, r9
 800ebc8:	f7fd fcb2 	bl	800c530 <memcpy>
 800ebcc:	89a3      	ldrh	r3, [r4, #12]
 800ebce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ebd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebd6:	81a3      	strh	r3, [r4, #12]
 800ebd8:	6126      	str	r6, [r4, #16]
 800ebda:	6165      	str	r5, [r4, #20]
 800ebdc:	444e      	add	r6, r9
 800ebde:	eba5 0509 	sub.w	r5, r5, r9
 800ebe2:	6026      	str	r6, [r4, #0]
 800ebe4:	60a5      	str	r5, [r4, #8]
 800ebe6:	463e      	mov	r6, r7
 800ebe8:	42be      	cmp	r6, r7
 800ebea:	d900      	bls.n	800ebee <__ssputs_r+0x86>
 800ebec:	463e      	mov	r6, r7
 800ebee:	6820      	ldr	r0, [r4, #0]
 800ebf0:	4632      	mov	r2, r6
 800ebf2:	4641      	mov	r1, r8
 800ebf4:	f000 fb22 	bl	800f23c <memmove>
 800ebf8:	68a3      	ldr	r3, [r4, #8]
 800ebfa:	1b9b      	subs	r3, r3, r6
 800ebfc:	60a3      	str	r3, [r4, #8]
 800ebfe:	6823      	ldr	r3, [r4, #0]
 800ec00:	4433      	add	r3, r6
 800ec02:	6023      	str	r3, [r4, #0]
 800ec04:	2000      	movs	r0, #0
 800ec06:	e7db      	b.n	800ebc0 <__ssputs_r+0x58>
 800ec08:	462a      	mov	r2, r5
 800ec0a:	f000 fb31 	bl	800f270 <_realloc_r>
 800ec0e:	4606      	mov	r6, r0
 800ec10:	2800      	cmp	r0, #0
 800ec12:	d1e1      	bne.n	800ebd8 <__ssputs_r+0x70>
 800ec14:	6921      	ldr	r1, [r4, #16]
 800ec16:	4650      	mov	r0, sl
 800ec18:	f7fd fcb6 	bl	800c588 <_free_r>
 800ec1c:	e7c7      	b.n	800ebae <__ssputs_r+0x46>
	...

0800ec20 <_svfiprintf_r>:
 800ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec24:	4698      	mov	r8, r3
 800ec26:	898b      	ldrh	r3, [r1, #12]
 800ec28:	061b      	lsls	r3, r3, #24
 800ec2a:	b09d      	sub	sp, #116	; 0x74
 800ec2c:	4607      	mov	r7, r0
 800ec2e:	460d      	mov	r5, r1
 800ec30:	4614      	mov	r4, r2
 800ec32:	d50e      	bpl.n	800ec52 <_svfiprintf_r+0x32>
 800ec34:	690b      	ldr	r3, [r1, #16]
 800ec36:	b963      	cbnz	r3, 800ec52 <_svfiprintf_r+0x32>
 800ec38:	2140      	movs	r1, #64	; 0x40
 800ec3a:	f7fd fd11 	bl	800c660 <_malloc_r>
 800ec3e:	6028      	str	r0, [r5, #0]
 800ec40:	6128      	str	r0, [r5, #16]
 800ec42:	b920      	cbnz	r0, 800ec4e <_svfiprintf_r+0x2e>
 800ec44:	230c      	movs	r3, #12
 800ec46:	603b      	str	r3, [r7, #0]
 800ec48:	f04f 30ff 	mov.w	r0, #4294967295
 800ec4c:	e0d1      	b.n	800edf2 <_svfiprintf_r+0x1d2>
 800ec4e:	2340      	movs	r3, #64	; 0x40
 800ec50:	616b      	str	r3, [r5, #20]
 800ec52:	2300      	movs	r3, #0
 800ec54:	9309      	str	r3, [sp, #36]	; 0x24
 800ec56:	2320      	movs	r3, #32
 800ec58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec60:	2330      	movs	r3, #48	; 0x30
 800ec62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ee0c <_svfiprintf_r+0x1ec>
 800ec66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec6a:	f04f 0901 	mov.w	r9, #1
 800ec6e:	4623      	mov	r3, r4
 800ec70:	469a      	mov	sl, r3
 800ec72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec76:	b10a      	cbz	r2, 800ec7c <_svfiprintf_r+0x5c>
 800ec78:	2a25      	cmp	r2, #37	; 0x25
 800ec7a:	d1f9      	bne.n	800ec70 <_svfiprintf_r+0x50>
 800ec7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ec80:	d00b      	beq.n	800ec9a <_svfiprintf_r+0x7a>
 800ec82:	465b      	mov	r3, fp
 800ec84:	4622      	mov	r2, r4
 800ec86:	4629      	mov	r1, r5
 800ec88:	4638      	mov	r0, r7
 800ec8a:	f7ff ff6d 	bl	800eb68 <__ssputs_r>
 800ec8e:	3001      	adds	r0, #1
 800ec90:	f000 80aa 	beq.w	800ede8 <_svfiprintf_r+0x1c8>
 800ec94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec96:	445a      	add	r2, fp
 800ec98:	9209      	str	r2, [sp, #36]	; 0x24
 800ec9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f000 80a2 	beq.w	800ede8 <_svfiprintf_r+0x1c8>
 800eca4:	2300      	movs	r3, #0
 800eca6:	f04f 32ff 	mov.w	r2, #4294967295
 800ecaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecae:	f10a 0a01 	add.w	sl, sl, #1
 800ecb2:	9304      	str	r3, [sp, #16]
 800ecb4:	9307      	str	r3, [sp, #28]
 800ecb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ecba:	931a      	str	r3, [sp, #104]	; 0x68
 800ecbc:	4654      	mov	r4, sl
 800ecbe:	2205      	movs	r2, #5
 800ecc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecc4:	4851      	ldr	r0, [pc, #324]	; (800ee0c <_svfiprintf_r+0x1ec>)
 800ecc6:	f7f1 fab3 	bl	8000230 <memchr>
 800ecca:	9a04      	ldr	r2, [sp, #16]
 800eccc:	b9d8      	cbnz	r0, 800ed06 <_svfiprintf_r+0xe6>
 800ecce:	06d0      	lsls	r0, r2, #27
 800ecd0:	bf44      	itt	mi
 800ecd2:	2320      	movmi	r3, #32
 800ecd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecd8:	0711      	lsls	r1, r2, #28
 800ecda:	bf44      	itt	mi
 800ecdc:	232b      	movmi	r3, #43	; 0x2b
 800ecde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ece2:	f89a 3000 	ldrb.w	r3, [sl]
 800ece6:	2b2a      	cmp	r3, #42	; 0x2a
 800ece8:	d015      	beq.n	800ed16 <_svfiprintf_r+0xf6>
 800ecea:	9a07      	ldr	r2, [sp, #28]
 800ecec:	4654      	mov	r4, sl
 800ecee:	2000      	movs	r0, #0
 800ecf0:	f04f 0c0a 	mov.w	ip, #10
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecfa:	3b30      	subs	r3, #48	; 0x30
 800ecfc:	2b09      	cmp	r3, #9
 800ecfe:	d94e      	bls.n	800ed9e <_svfiprintf_r+0x17e>
 800ed00:	b1b0      	cbz	r0, 800ed30 <_svfiprintf_r+0x110>
 800ed02:	9207      	str	r2, [sp, #28]
 800ed04:	e014      	b.n	800ed30 <_svfiprintf_r+0x110>
 800ed06:	eba0 0308 	sub.w	r3, r0, r8
 800ed0a:	fa09 f303 	lsl.w	r3, r9, r3
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	9304      	str	r3, [sp, #16]
 800ed12:	46a2      	mov	sl, r4
 800ed14:	e7d2      	b.n	800ecbc <_svfiprintf_r+0x9c>
 800ed16:	9b03      	ldr	r3, [sp, #12]
 800ed18:	1d19      	adds	r1, r3, #4
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	9103      	str	r1, [sp, #12]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	bfbb      	ittet	lt
 800ed22:	425b      	neglt	r3, r3
 800ed24:	f042 0202 	orrlt.w	r2, r2, #2
 800ed28:	9307      	strge	r3, [sp, #28]
 800ed2a:	9307      	strlt	r3, [sp, #28]
 800ed2c:	bfb8      	it	lt
 800ed2e:	9204      	strlt	r2, [sp, #16]
 800ed30:	7823      	ldrb	r3, [r4, #0]
 800ed32:	2b2e      	cmp	r3, #46	; 0x2e
 800ed34:	d10c      	bne.n	800ed50 <_svfiprintf_r+0x130>
 800ed36:	7863      	ldrb	r3, [r4, #1]
 800ed38:	2b2a      	cmp	r3, #42	; 0x2a
 800ed3a:	d135      	bne.n	800eda8 <_svfiprintf_r+0x188>
 800ed3c:	9b03      	ldr	r3, [sp, #12]
 800ed3e:	1d1a      	adds	r2, r3, #4
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	9203      	str	r2, [sp, #12]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	bfb8      	it	lt
 800ed48:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed4c:	3402      	adds	r4, #2
 800ed4e:	9305      	str	r3, [sp, #20]
 800ed50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ee1c <_svfiprintf_r+0x1fc>
 800ed54:	7821      	ldrb	r1, [r4, #0]
 800ed56:	2203      	movs	r2, #3
 800ed58:	4650      	mov	r0, sl
 800ed5a:	f7f1 fa69 	bl	8000230 <memchr>
 800ed5e:	b140      	cbz	r0, 800ed72 <_svfiprintf_r+0x152>
 800ed60:	2340      	movs	r3, #64	; 0x40
 800ed62:	eba0 000a 	sub.w	r0, r0, sl
 800ed66:	fa03 f000 	lsl.w	r0, r3, r0
 800ed6a:	9b04      	ldr	r3, [sp, #16]
 800ed6c:	4303      	orrs	r3, r0
 800ed6e:	3401      	adds	r4, #1
 800ed70:	9304      	str	r3, [sp, #16]
 800ed72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed76:	4826      	ldr	r0, [pc, #152]	; (800ee10 <_svfiprintf_r+0x1f0>)
 800ed78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed7c:	2206      	movs	r2, #6
 800ed7e:	f7f1 fa57 	bl	8000230 <memchr>
 800ed82:	2800      	cmp	r0, #0
 800ed84:	d038      	beq.n	800edf8 <_svfiprintf_r+0x1d8>
 800ed86:	4b23      	ldr	r3, [pc, #140]	; (800ee14 <_svfiprintf_r+0x1f4>)
 800ed88:	bb1b      	cbnz	r3, 800edd2 <_svfiprintf_r+0x1b2>
 800ed8a:	9b03      	ldr	r3, [sp, #12]
 800ed8c:	3307      	adds	r3, #7
 800ed8e:	f023 0307 	bic.w	r3, r3, #7
 800ed92:	3308      	adds	r3, #8
 800ed94:	9303      	str	r3, [sp, #12]
 800ed96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed98:	4433      	add	r3, r6
 800ed9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed9c:	e767      	b.n	800ec6e <_svfiprintf_r+0x4e>
 800ed9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800eda2:	460c      	mov	r4, r1
 800eda4:	2001      	movs	r0, #1
 800eda6:	e7a5      	b.n	800ecf4 <_svfiprintf_r+0xd4>
 800eda8:	2300      	movs	r3, #0
 800edaa:	3401      	adds	r4, #1
 800edac:	9305      	str	r3, [sp, #20]
 800edae:	4619      	mov	r1, r3
 800edb0:	f04f 0c0a 	mov.w	ip, #10
 800edb4:	4620      	mov	r0, r4
 800edb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edba:	3a30      	subs	r2, #48	; 0x30
 800edbc:	2a09      	cmp	r2, #9
 800edbe:	d903      	bls.n	800edc8 <_svfiprintf_r+0x1a8>
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d0c5      	beq.n	800ed50 <_svfiprintf_r+0x130>
 800edc4:	9105      	str	r1, [sp, #20]
 800edc6:	e7c3      	b.n	800ed50 <_svfiprintf_r+0x130>
 800edc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800edcc:	4604      	mov	r4, r0
 800edce:	2301      	movs	r3, #1
 800edd0:	e7f0      	b.n	800edb4 <_svfiprintf_r+0x194>
 800edd2:	ab03      	add	r3, sp, #12
 800edd4:	9300      	str	r3, [sp, #0]
 800edd6:	462a      	mov	r2, r5
 800edd8:	4b0f      	ldr	r3, [pc, #60]	; (800ee18 <_svfiprintf_r+0x1f8>)
 800edda:	a904      	add	r1, sp, #16
 800eddc:	4638      	mov	r0, r7
 800edde:	f7fd fd53 	bl	800c888 <_printf_float>
 800ede2:	1c42      	adds	r2, r0, #1
 800ede4:	4606      	mov	r6, r0
 800ede6:	d1d6      	bne.n	800ed96 <_svfiprintf_r+0x176>
 800ede8:	89ab      	ldrh	r3, [r5, #12]
 800edea:	065b      	lsls	r3, r3, #25
 800edec:	f53f af2c 	bmi.w	800ec48 <_svfiprintf_r+0x28>
 800edf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edf2:	b01d      	add	sp, #116	; 0x74
 800edf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edf8:	ab03      	add	r3, sp, #12
 800edfa:	9300      	str	r3, [sp, #0]
 800edfc:	462a      	mov	r2, r5
 800edfe:	4b06      	ldr	r3, [pc, #24]	; (800ee18 <_svfiprintf_r+0x1f8>)
 800ee00:	a904      	add	r1, sp, #16
 800ee02:	4638      	mov	r0, r7
 800ee04:	f7fd ffe4 	bl	800cdd0 <_printf_i>
 800ee08:	e7eb      	b.n	800ede2 <_svfiprintf_r+0x1c2>
 800ee0a:	bf00      	nop
 800ee0c:	0801155c 	.word	0x0801155c
 800ee10:	08011566 	.word	0x08011566
 800ee14:	0800c889 	.word	0x0800c889
 800ee18:	0800eb69 	.word	0x0800eb69
 800ee1c:	08011562 	.word	0x08011562

0800ee20 <__sfputc_r>:
 800ee20:	6893      	ldr	r3, [r2, #8]
 800ee22:	3b01      	subs	r3, #1
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	b410      	push	{r4}
 800ee28:	6093      	str	r3, [r2, #8]
 800ee2a:	da08      	bge.n	800ee3e <__sfputc_r+0x1e>
 800ee2c:	6994      	ldr	r4, [r2, #24]
 800ee2e:	42a3      	cmp	r3, r4
 800ee30:	db01      	blt.n	800ee36 <__sfputc_r+0x16>
 800ee32:	290a      	cmp	r1, #10
 800ee34:	d103      	bne.n	800ee3e <__sfputc_r+0x1e>
 800ee36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee3a:	f7fe b975 	b.w	800d128 <__swbuf_r>
 800ee3e:	6813      	ldr	r3, [r2, #0]
 800ee40:	1c58      	adds	r0, r3, #1
 800ee42:	6010      	str	r0, [r2, #0]
 800ee44:	7019      	strb	r1, [r3, #0]
 800ee46:	4608      	mov	r0, r1
 800ee48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee4c:	4770      	bx	lr

0800ee4e <__sfputs_r>:
 800ee4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee50:	4606      	mov	r6, r0
 800ee52:	460f      	mov	r7, r1
 800ee54:	4614      	mov	r4, r2
 800ee56:	18d5      	adds	r5, r2, r3
 800ee58:	42ac      	cmp	r4, r5
 800ee5a:	d101      	bne.n	800ee60 <__sfputs_r+0x12>
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	e007      	b.n	800ee70 <__sfputs_r+0x22>
 800ee60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee64:	463a      	mov	r2, r7
 800ee66:	4630      	mov	r0, r6
 800ee68:	f7ff ffda 	bl	800ee20 <__sfputc_r>
 800ee6c:	1c43      	adds	r3, r0, #1
 800ee6e:	d1f3      	bne.n	800ee58 <__sfputs_r+0xa>
 800ee70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee74 <_vfiprintf_r>:
 800ee74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee78:	460d      	mov	r5, r1
 800ee7a:	b09d      	sub	sp, #116	; 0x74
 800ee7c:	4614      	mov	r4, r2
 800ee7e:	4698      	mov	r8, r3
 800ee80:	4606      	mov	r6, r0
 800ee82:	b118      	cbz	r0, 800ee8c <_vfiprintf_r+0x18>
 800ee84:	6983      	ldr	r3, [r0, #24]
 800ee86:	b90b      	cbnz	r3, 800ee8c <_vfiprintf_r+0x18>
 800ee88:	f7ff f9c2 	bl	800e210 <__sinit>
 800ee8c:	4b89      	ldr	r3, [pc, #548]	; (800f0b4 <_vfiprintf_r+0x240>)
 800ee8e:	429d      	cmp	r5, r3
 800ee90:	d11b      	bne.n	800eeca <_vfiprintf_r+0x56>
 800ee92:	6875      	ldr	r5, [r6, #4]
 800ee94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee96:	07d9      	lsls	r1, r3, #31
 800ee98:	d405      	bmi.n	800eea6 <_vfiprintf_r+0x32>
 800ee9a:	89ab      	ldrh	r3, [r5, #12]
 800ee9c:	059a      	lsls	r2, r3, #22
 800ee9e:	d402      	bmi.n	800eea6 <_vfiprintf_r+0x32>
 800eea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eea2:	f7ff fa6a 	bl	800e37a <__retarget_lock_acquire_recursive>
 800eea6:	89ab      	ldrh	r3, [r5, #12]
 800eea8:	071b      	lsls	r3, r3, #28
 800eeaa:	d501      	bpl.n	800eeb0 <_vfiprintf_r+0x3c>
 800eeac:	692b      	ldr	r3, [r5, #16]
 800eeae:	b9eb      	cbnz	r3, 800eeec <_vfiprintf_r+0x78>
 800eeb0:	4629      	mov	r1, r5
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	f7fe f98a 	bl	800d1cc <__swsetup_r>
 800eeb8:	b1c0      	cbz	r0, 800eeec <_vfiprintf_r+0x78>
 800eeba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eebc:	07dc      	lsls	r4, r3, #31
 800eebe:	d50e      	bpl.n	800eede <_vfiprintf_r+0x6a>
 800eec0:	f04f 30ff 	mov.w	r0, #4294967295
 800eec4:	b01d      	add	sp, #116	; 0x74
 800eec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeca:	4b7b      	ldr	r3, [pc, #492]	; (800f0b8 <_vfiprintf_r+0x244>)
 800eecc:	429d      	cmp	r5, r3
 800eece:	d101      	bne.n	800eed4 <_vfiprintf_r+0x60>
 800eed0:	68b5      	ldr	r5, [r6, #8]
 800eed2:	e7df      	b.n	800ee94 <_vfiprintf_r+0x20>
 800eed4:	4b79      	ldr	r3, [pc, #484]	; (800f0bc <_vfiprintf_r+0x248>)
 800eed6:	429d      	cmp	r5, r3
 800eed8:	bf08      	it	eq
 800eeda:	68f5      	ldreq	r5, [r6, #12]
 800eedc:	e7da      	b.n	800ee94 <_vfiprintf_r+0x20>
 800eede:	89ab      	ldrh	r3, [r5, #12]
 800eee0:	0598      	lsls	r0, r3, #22
 800eee2:	d4ed      	bmi.n	800eec0 <_vfiprintf_r+0x4c>
 800eee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eee6:	f7ff fa49 	bl	800e37c <__retarget_lock_release_recursive>
 800eeea:	e7e9      	b.n	800eec0 <_vfiprintf_r+0x4c>
 800eeec:	2300      	movs	r3, #0
 800eeee:	9309      	str	r3, [sp, #36]	; 0x24
 800eef0:	2320      	movs	r3, #32
 800eef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eef6:	f8cd 800c 	str.w	r8, [sp, #12]
 800eefa:	2330      	movs	r3, #48	; 0x30
 800eefc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f0c0 <_vfiprintf_r+0x24c>
 800ef00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef04:	f04f 0901 	mov.w	r9, #1
 800ef08:	4623      	mov	r3, r4
 800ef0a:	469a      	mov	sl, r3
 800ef0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef10:	b10a      	cbz	r2, 800ef16 <_vfiprintf_r+0xa2>
 800ef12:	2a25      	cmp	r2, #37	; 0x25
 800ef14:	d1f9      	bne.n	800ef0a <_vfiprintf_r+0x96>
 800ef16:	ebba 0b04 	subs.w	fp, sl, r4
 800ef1a:	d00b      	beq.n	800ef34 <_vfiprintf_r+0xc0>
 800ef1c:	465b      	mov	r3, fp
 800ef1e:	4622      	mov	r2, r4
 800ef20:	4629      	mov	r1, r5
 800ef22:	4630      	mov	r0, r6
 800ef24:	f7ff ff93 	bl	800ee4e <__sfputs_r>
 800ef28:	3001      	adds	r0, #1
 800ef2a:	f000 80aa 	beq.w	800f082 <_vfiprintf_r+0x20e>
 800ef2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef30:	445a      	add	r2, fp
 800ef32:	9209      	str	r2, [sp, #36]	; 0x24
 800ef34:	f89a 3000 	ldrb.w	r3, [sl]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	f000 80a2 	beq.w	800f082 <_vfiprintf_r+0x20e>
 800ef3e:	2300      	movs	r3, #0
 800ef40:	f04f 32ff 	mov.w	r2, #4294967295
 800ef44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef48:	f10a 0a01 	add.w	sl, sl, #1
 800ef4c:	9304      	str	r3, [sp, #16]
 800ef4e:	9307      	str	r3, [sp, #28]
 800ef50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef54:	931a      	str	r3, [sp, #104]	; 0x68
 800ef56:	4654      	mov	r4, sl
 800ef58:	2205      	movs	r2, #5
 800ef5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef5e:	4858      	ldr	r0, [pc, #352]	; (800f0c0 <_vfiprintf_r+0x24c>)
 800ef60:	f7f1 f966 	bl	8000230 <memchr>
 800ef64:	9a04      	ldr	r2, [sp, #16]
 800ef66:	b9d8      	cbnz	r0, 800efa0 <_vfiprintf_r+0x12c>
 800ef68:	06d1      	lsls	r1, r2, #27
 800ef6a:	bf44      	itt	mi
 800ef6c:	2320      	movmi	r3, #32
 800ef6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef72:	0713      	lsls	r3, r2, #28
 800ef74:	bf44      	itt	mi
 800ef76:	232b      	movmi	r3, #43	; 0x2b
 800ef78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ef80:	2b2a      	cmp	r3, #42	; 0x2a
 800ef82:	d015      	beq.n	800efb0 <_vfiprintf_r+0x13c>
 800ef84:	9a07      	ldr	r2, [sp, #28]
 800ef86:	4654      	mov	r4, sl
 800ef88:	2000      	movs	r0, #0
 800ef8a:	f04f 0c0a 	mov.w	ip, #10
 800ef8e:	4621      	mov	r1, r4
 800ef90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef94:	3b30      	subs	r3, #48	; 0x30
 800ef96:	2b09      	cmp	r3, #9
 800ef98:	d94e      	bls.n	800f038 <_vfiprintf_r+0x1c4>
 800ef9a:	b1b0      	cbz	r0, 800efca <_vfiprintf_r+0x156>
 800ef9c:	9207      	str	r2, [sp, #28]
 800ef9e:	e014      	b.n	800efca <_vfiprintf_r+0x156>
 800efa0:	eba0 0308 	sub.w	r3, r0, r8
 800efa4:	fa09 f303 	lsl.w	r3, r9, r3
 800efa8:	4313      	orrs	r3, r2
 800efaa:	9304      	str	r3, [sp, #16]
 800efac:	46a2      	mov	sl, r4
 800efae:	e7d2      	b.n	800ef56 <_vfiprintf_r+0xe2>
 800efb0:	9b03      	ldr	r3, [sp, #12]
 800efb2:	1d19      	adds	r1, r3, #4
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	9103      	str	r1, [sp, #12]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	bfbb      	ittet	lt
 800efbc:	425b      	neglt	r3, r3
 800efbe:	f042 0202 	orrlt.w	r2, r2, #2
 800efc2:	9307      	strge	r3, [sp, #28]
 800efc4:	9307      	strlt	r3, [sp, #28]
 800efc6:	bfb8      	it	lt
 800efc8:	9204      	strlt	r2, [sp, #16]
 800efca:	7823      	ldrb	r3, [r4, #0]
 800efcc:	2b2e      	cmp	r3, #46	; 0x2e
 800efce:	d10c      	bne.n	800efea <_vfiprintf_r+0x176>
 800efd0:	7863      	ldrb	r3, [r4, #1]
 800efd2:	2b2a      	cmp	r3, #42	; 0x2a
 800efd4:	d135      	bne.n	800f042 <_vfiprintf_r+0x1ce>
 800efd6:	9b03      	ldr	r3, [sp, #12]
 800efd8:	1d1a      	adds	r2, r3, #4
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	9203      	str	r2, [sp, #12]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	bfb8      	it	lt
 800efe2:	f04f 33ff 	movlt.w	r3, #4294967295
 800efe6:	3402      	adds	r4, #2
 800efe8:	9305      	str	r3, [sp, #20]
 800efea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f0d0 <_vfiprintf_r+0x25c>
 800efee:	7821      	ldrb	r1, [r4, #0]
 800eff0:	2203      	movs	r2, #3
 800eff2:	4650      	mov	r0, sl
 800eff4:	f7f1 f91c 	bl	8000230 <memchr>
 800eff8:	b140      	cbz	r0, 800f00c <_vfiprintf_r+0x198>
 800effa:	2340      	movs	r3, #64	; 0x40
 800effc:	eba0 000a 	sub.w	r0, r0, sl
 800f000:	fa03 f000 	lsl.w	r0, r3, r0
 800f004:	9b04      	ldr	r3, [sp, #16]
 800f006:	4303      	orrs	r3, r0
 800f008:	3401      	adds	r4, #1
 800f00a:	9304      	str	r3, [sp, #16]
 800f00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f010:	482c      	ldr	r0, [pc, #176]	; (800f0c4 <_vfiprintf_r+0x250>)
 800f012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f016:	2206      	movs	r2, #6
 800f018:	f7f1 f90a 	bl	8000230 <memchr>
 800f01c:	2800      	cmp	r0, #0
 800f01e:	d03f      	beq.n	800f0a0 <_vfiprintf_r+0x22c>
 800f020:	4b29      	ldr	r3, [pc, #164]	; (800f0c8 <_vfiprintf_r+0x254>)
 800f022:	bb1b      	cbnz	r3, 800f06c <_vfiprintf_r+0x1f8>
 800f024:	9b03      	ldr	r3, [sp, #12]
 800f026:	3307      	adds	r3, #7
 800f028:	f023 0307 	bic.w	r3, r3, #7
 800f02c:	3308      	adds	r3, #8
 800f02e:	9303      	str	r3, [sp, #12]
 800f030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f032:	443b      	add	r3, r7
 800f034:	9309      	str	r3, [sp, #36]	; 0x24
 800f036:	e767      	b.n	800ef08 <_vfiprintf_r+0x94>
 800f038:	fb0c 3202 	mla	r2, ip, r2, r3
 800f03c:	460c      	mov	r4, r1
 800f03e:	2001      	movs	r0, #1
 800f040:	e7a5      	b.n	800ef8e <_vfiprintf_r+0x11a>
 800f042:	2300      	movs	r3, #0
 800f044:	3401      	adds	r4, #1
 800f046:	9305      	str	r3, [sp, #20]
 800f048:	4619      	mov	r1, r3
 800f04a:	f04f 0c0a 	mov.w	ip, #10
 800f04e:	4620      	mov	r0, r4
 800f050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f054:	3a30      	subs	r2, #48	; 0x30
 800f056:	2a09      	cmp	r2, #9
 800f058:	d903      	bls.n	800f062 <_vfiprintf_r+0x1ee>
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d0c5      	beq.n	800efea <_vfiprintf_r+0x176>
 800f05e:	9105      	str	r1, [sp, #20]
 800f060:	e7c3      	b.n	800efea <_vfiprintf_r+0x176>
 800f062:	fb0c 2101 	mla	r1, ip, r1, r2
 800f066:	4604      	mov	r4, r0
 800f068:	2301      	movs	r3, #1
 800f06a:	e7f0      	b.n	800f04e <_vfiprintf_r+0x1da>
 800f06c:	ab03      	add	r3, sp, #12
 800f06e:	9300      	str	r3, [sp, #0]
 800f070:	462a      	mov	r2, r5
 800f072:	4b16      	ldr	r3, [pc, #88]	; (800f0cc <_vfiprintf_r+0x258>)
 800f074:	a904      	add	r1, sp, #16
 800f076:	4630      	mov	r0, r6
 800f078:	f7fd fc06 	bl	800c888 <_printf_float>
 800f07c:	4607      	mov	r7, r0
 800f07e:	1c78      	adds	r0, r7, #1
 800f080:	d1d6      	bne.n	800f030 <_vfiprintf_r+0x1bc>
 800f082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f084:	07d9      	lsls	r1, r3, #31
 800f086:	d405      	bmi.n	800f094 <_vfiprintf_r+0x220>
 800f088:	89ab      	ldrh	r3, [r5, #12]
 800f08a:	059a      	lsls	r2, r3, #22
 800f08c:	d402      	bmi.n	800f094 <_vfiprintf_r+0x220>
 800f08e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f090:	f7ff f974 	bl	800e37c <__retarget_lock_release_recursive>
 800f094:	89ab      	ldrh	r3, [r5, #12]
 800f096:	065b      	lsls	r3, r3, #25
 800f098:	f53f af12 	bmi.w	800eec0 <_vfiprintf_r+0x4c>
 800f09c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f09e:	e711      	b.n	800eec4 <_vfiprintf_r+0x50>
 800f0a0:	ab03      	add	r3, sp, #12
 800f0a2:	9300      	str	r3, [sp, #0]
 800f0a4:	462a      	mov	r2, r5
 800f0a6:	4b09      	ldr	r3, [pc, #36]	; (800f0cc <_vfiprintf_r+0x258>)
 800f0a8:	a904      	add	r1, sp, #16
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	f7fd fe90 	bl	800cdd0 <_printf_i>
 800f0b0:	e7e4      	b.n	800f07c <_vfiprintf_r+0x208>
 800f0b2:	bf00      	nop
 800f0b4:	080113c4 	.word	0x080113c4
 800f0b8:	080113e4 	.word	0x080113e4
 800f0bc:	080113a4 	.word	0x080113a4
 800f0c0:	0801155c 	.word	0x0801155c
 800f0c4:	08011566 	.word	0x08011566
 800f0c8:	0800c889 	.word	0x0800c889
 800f0cc:	0800ee4f 	.word	0x0800ee4f
 800f0d0:	08011562 	.word	0x08011562

0800f0d4 <__sread>:
 800f0d4:	b510      	push	{r4, lr}
 800f0d6:	460c      	mov	r4, r1
 800f0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0dc:	f000 f8f8 	bl	800f2d0 <_read_r>
 800f0e0:	2800      	cmp	r0, #0
 800f0e2:	bfab      	itete	ge
 800f0e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0e6:	89a3      	ldrhlt	r3, [r4, #12]
 800f0e8:	181b      	addge	r3, r3, r0
 800f0ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f0ee:	bfac      	ite	ge
 800f0f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f0f2:	81a3      	strhlt	r3, [r4, #12]
 800f0f4:	bd10      	pop	{r4, pc}

0800f0f6 <__swrite>:
 800f0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0fa:	461f      	mov	r7, r3
 800f0fc:	898b      	ldrh	r3, [r1, #12]
 800f0fe:	05db      	lsls	r3, r3, #23
 800f100:	4605      	mov	r5, r0
 800f102:	460c      	mov	r4, r1
 800f104:	4616      	mov	r6, r2
 800f106:	d505      	bpl.n	800f114 <__swrite+0x1e>
 800f108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f10c:	2302      	movs	r3, #2
 800f10e:	2200      	movs	r2, #0
 800f110:	f000 f870 	bl	800f1f4 <_lseek_r>
 800f114:	89a3      	ldrh	r3, [r4, #12]
 800f116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f11a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f11e:	81a3      	strh	r3, [r4, #12]
 800f120:	4632      	mov	r2, r6
 800f122:	463b      	mov	r3, r7
 800f124:	4628      	mov	r0, r5
 800f126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f12a:	f000 b817 	b.w	800f15c <_write_r>

0800f12e <__sseek>:
 800f12e:	b510      	push	{r4, lr}
 800f130:	460c      	mov	r4, r1
 800f132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f136:	f000 f85d 	bl	800f1f4 <_lseek_r>
 800f13a:	1c43      	adds	r3, r0, #1
 800f13c:	89a3      	ldrh	r3, [r4, #12]
 800f13e:	bf15      	itete	ne
 800f140:	6560      	strne	r0, [r4, #84]	; 0x54
 800f142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f14a:	81a3      	strheq	r3, [r4, #12]
 800f14c:	bf18      	it	ne
 800f14e:	81a3      	strhne	r3, [r4, #12]
 800f150:	bd10      	pop	{r4, pc}

0800f152 <__sclose>:
 800f152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f156:	f000 b81b 	b.w	800f190 <_close_r>
	...

0800f15c <_write_r>:
 800f15c:	b538      	push	{r3, r4, r5, lr}
 800f15e:	4d07      	ldr	r5, [pc, #28]	; (800f17c <_write_r+0x20>)
 800f160:	4604      	mov	r4, r0
 800f162:	4608      	mov	r0, r1
 800f164:	4611      	mov	r1, r2
 800f166:	2200      	movs	r2, #0
 800f168:	602a      	str	r2, [r5, #0]
 800f16a:	461a      	mov	r2, r3
 800f16c:	f7f8 fa3f 	bl	80075ee <_write>
 800f170:	1c43      	adds	r3, r0, #1
 800f172:	d102      	bne.n	800f17a <_write_r+0x1e>
 800f174:	682b      	ldr	r3, [r5, #0]
 800f176:	b103      	cbz	r3, 800f17a <_write_r+0x1e>
 800f178:	6023      	str	r3, [r4, #0]
 800f17a:	bd38      	pop	{r3, r4, r5, pc}
 800f17c:	20005254 	.word	0x20005254

0800f180 <abort>:
 800f180:	b508      	push	{r3, lr}
 800f182:	2006      	movs	r0, #6
 800f184:	f000 f8de 	bl	800f344 <raise>
 800f188:	2001      	movs	r0, #1
 800f18a:	f7f8 fa09 	bl	80075a0 <_exit>
	...

0800f190 <_close_r>:
 800f190:	b538      	push	{r3, r4, r5, lr}
 800f192:	4d06      	ldr	r5, [pc, #24]	; (800f1ac <_close_r+0x1c>)
 800f194:	2300      	movs	r3, #0
 800f196:	4604      	mov	r4, r0
 800f198:	4608      	mov	r0, r1
 800f19a:	602b      	str	r3, [r5, #0]
 800f19c:	f7f8 fa43 	bl	8007626 <_close>
 800f1a0:	1c43      	adds	r3, r0, #1
 800f1a2:	d102      	bne.n	800f1aa <_close_r+0x1a>
 800f1a4:	682b      	ldr	r3, [r5, #0]
 800f1a6:	b103      	cbz	r3, 800f1aa <_close_r+0x1a>
 800f1a8:	6023      	str	r3, [r4, #0]
 800f1aa:	bd38      	pop	{r3, r4, r5, pc}
 800f1ac:	20005254 	.word	0x20005254

0800f1b0 <_fstat_r>:
 800f1b0:	b538      	push	{r3, r4, r5, lr}
 800f1b2:	4d07      	ldr	r5, [pc, #28]	; (800f1d0 <_fstat_r+0x20>)
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	4604      	mov	r4, r0
 800f1b8:	4608      	mov	r0, r1
 800f1ba:	4611      	mov	r1, r2
 800f1bc:	602b      	str	r3, [r5, #0]
 800f1be:	f7f8 fa3e 	bl	800763e <_fstat>
 800f1c2:	1c43      	adds	r3, r0, #1
 800f1c4:	d102      	bne.n	800f1cc <_fstat_r+0x1c>
 800f1c6:	682b      	ldr	r3, [r5, #0]
 800f1c8:	b103      	cbz	r3, 800f1cc <_fstat_r+0x1c>
 800f1ca:	6023      	str	r3, [r4, #0]
 800f1cc:	bd38      	pop	{r3, r4, r5, pc}
 800f1ce:	bf00      	nop
 800f1d0:	20005254 	.word	0x20005254

0800f1d4 <_isatty_r>:
 800f1d4:	b538      	push	{r3, r4, r5, lr}
 800f1d6:	4d06      	ldr	r5, [pc, #24]	; (800f1f0 <_isatty_r+0x1c>)
 800f1d8:	2300      	movs	r3, #0
 800f1da:	4604      	mov	r4, r0
 800f1dc:	4608      	mov	r0, r1
 800f1de:	602b      	str	r3, [r5, #0]
 800f1e0:	f7f8 fa3d 	bl	800765e <_isatty>
 800f1e4:	1c43      	adds	r3, r0, #1
 800f1e6:	d102      	bne.n	800f1ee <_isatty_r+0x1a>
 800f1e8:	682b      	ldr	r3, [r5, #0]
 800f1ea:	b103      	cbz	r3, 800f1ee <_isatty_r+0x1a>
 800f1ec:	6023      	str	r3, [r4, #0]
 800f1ee:	bd38      	pop	{r3, r4, r5, pc}
 800f1f0:	20005254 	.word	0x20005254

0800f1f4 <_lseek_r>:
 800f1f4:	b538      	push	{r3, r4, r5, lr}
 800f1f6:	4d07      	ldr	r5, [pc, #28]	; (800f214 <_lseek_r+0x20>)
 800f1f8:	4604      	mov	r4, r0
 800f1fa:	4608      	mov	r0, r1
 800f1fc:	4611      	mov	r1, r2
 800f1fe:	2200      	movs	r2, #0
 800f200:	602a      	str	r2, [r5, #0]
 800f202:	461a      	mov	r2, r3
 800f204:	f7f8 fa36 	bl	8007674 <_lseek>
 800f208:	1c43      	adds	r3, r0, #1
 800f20a:	d102      	bne.n	800f212 <_lseek_r+0x1e>
 800f20c:	682b      	ldr	r3, [r5, #0]
 800f20e:	b103      	cbz	r3, 800f212 <_lseek_r+0x1e>
 800f210:	6023      	str	r3, [r4, #0]
 800f212:	bd38      	pop	{r3, r4, r5, pc}
 800f214:	20005254 	.word	0x20005254

0800f218 <__ascii_mbtowc>:
 800f218:	b082      	sub	sp, #8
 800f21a:	b901      	cbnz	r1, 800f21e <__ascii_mbtowc+0x6>
 800f21c:	a901      	add	r1, sp, #4
 800f21e:	b142      	cbz	r2, 800f232 <__ascii_mbtowc+0x1a>
 800f220:	b14b      	cbz	r3, 800f236 <__ascii_mbtowc+0x1e>
 800f222:	7813      	ldrb	r3, [r2, #0]
 800f224:	600b      	str	r3, [r1, #0]
 800f226:	7812      	ldrb	r2, [r2, #0]
 800f228:	1e10      	subs	r0, r2, #0
 800f22a:	bf18      	it	ne
 800f22c:	2001      	movne	r0, #1
 800f22e:	b002      	add	sp, #8
 800f230:	4770      	bx	lr
 800f232:	4610      	mov	r0, r2
 800f234:	e7fb      	b.n	800f22e <__ascii_mbtowc+0x16>
 800f236:	f06f 0001 	mvn.w	r0, #1
 800f23a:	e7f8      	b.n	800f22e <__ascii_mbtowc+0x16>

0800f23c <memmove>:
 800f23c:	4288      	cmp	r0, r1
 800f23e:	b510      	push	{r4, lr}
 800f240:	eb01 0402 	add.w	r4, r1, r2
 800f244:	d902      	bls.n	800f24c <memmove+0x10>
 800f246:	4284      	cmp	r4, r0
 800f248:	4623      	mov	r3, r4
 800f24a:	d807      	bhi.n	800f25c <memmove+0x20>
 800f24c:	1e43      	subs	r3, r0, #1
 800f24e:	42a1      	cmp	r1, r4
 800f250:	d008      	beq.n	800f264 <memmove+0x28>
 800f252:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f256:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f25a:	e7f8      	b.n	800f24e <memmove+0x12>
 800f25c:	4402      	add	r2, r0
 800f25e:	4601      	mov	r1, r0
 800f260:	428a      	cmp	r2, r1
 800f262:	d100      	bne.n	800f266 <memmove+0x2a>
 800f264:	bd10      	pop	{r4, pc}
 800f266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f26a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f26e:	e7f7      	b.n	800f260 <memmove+0x24>

0800f270 <_realloc_r>:
 800f270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f274:	4680      	mov	r8, r0
 800f276:	4614      	mov	r4, r2
 800f278:	460e      	mov	r6, r1
 800f27a:	b921      	cbnz	r1, 800f286 <_realloc_r+0x16>
 800f27c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f280:	4611      	mov	r1, r2
 800f282:	f7fd b9ed 	b.w	800c660 <_malloc_r>
 800f286:	b92a      	cbnz	r2, 800f294 <_realloc_r+0x24>
 800f288:	f7fd f97e 	bl	800c588 <_free_r>
 800f28c:	4625      	mov	r5, r4
 800f28e:	4628      	mov	r0, r5
 800f290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f294:	f000 f87f 	bl	800f396 <_malloc_usable_size_r>
 800f298:	4284      	cmp	r4, r0
 800f29a:	4607      	mov	r7, r0
 800f29c:	d802      	bhi.n	800f2a4 <_realloc_r+0x34>
 800f29e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f2a2:	d812      	bhi.n	800f2ca <_realloc_r+0x5a>
 800f2a4:	4621      	mov	r1, r4
 800f2a6:	4640      	mov	r0, r8
 800f2a8:	f7fd f9da 	bl	800c660 <_malloc_r>
 800f2ac:	4605      	mov	r5, r0
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	d0ed      	beq.n	800f28e <_realloc_r+0x1e>
 800f2b2:	42bc      	cmp	r4, r7
 800f2b4:	4622      	mov	r2, r4
 800f2b6:	4631      	mov	r1, r6
 800f2b8:	bf28      	it	cs
 800f2ba:	463a      	movcs	r2, r7
 800f2bc:	f7fd f938 	bl	800c530 <memcpy>
 800f2c0:	4631      	mov	r1, r6
 800f2c2:	4640      	mov	r0, r8
 800f2c4:	f7fd f960 	bl	800c588 <_free_r>
 800f2c8:	e7e1      	b.n	800f28e <_realloc_r+0x1e>
 800f2ca:	4635      	mov	r5, r6
 800f2cc:	e7df      	b.n	800f28e <_realloc_r+0x1e>
	...

0800f2d0 <_read_r>:
 800f2d0:	b538      	push	{r3, r4, r5, lr}
 800f2d2:	4d07      	ldr	r5, [pc, #28]	; (800f2f0 <_read_r+0x20>)
 800f2d4:	4604      	mov	r4, r0
 800f2d6:	4608      	mov	r0, r1
 800f2d8:	4611      	mov	r1, r2
 800f2da:	2200      	movs	r2, #0
 800f2dc:	602a      	str	r2, [r5, #0]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	f7f8 f968 	bl	80075b4 <_read>
 800f2e4:	1c43      	adds	r3, r0, #1
 800f2e6:	d102      	bne.n	800f2ee <_read_r+0x1e>
 800f2e8:	682b      	ldr	r3, [r5, #0]
 800f2ea:	b103      	cbz	r3, 800f2ee <_read_r+0x1e>
 800f2ec:	6023      	str	r3, [r4, #0]
 800f2ee:	bd38      	pop	{r3, r4, r5, pc}
 800f2f0:	20005254 	.word	0x20005254

0800f2f4 <_raise_r>:
 800f2f4:	291f      	cmp	r1, #31
 800f2f6:	b538      	push	{r3, r4, r5, lr}
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	460d      	mov	r5, r1
 800f2fc:	d904      	bls.n	800f308 <_raise_r+0x14>
 800f2fe:	2316      	movs	r3, #22
 800f300:	6003      	str	r3, [r0, #0]
 800f302:	f04f 30ff 	mov.w	r0, #4294967295
 800f306:	bd38      	pop	{r3, r4, r5, pc}
 800f308:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f30a:	b112      	cbz	r2, 800f312 <_raise_r+0x1e>
 800f30c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f310:	b94b      	cbnz	r3, 800f326 <_raise_r+0x32>
 800f312:	4620      	mov	r0, r4
 800f314:	f000 f830 	bl	800f378 <_getpid_r>
 800f318:	462a      	mov	r2, r5
 800f31a:	4601      	mov	r1, r0
 800f31c:	4620      	mov	r0, r4
 800f31e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f322:	f000 b817 	b.w	800f354 <_kill_r>
 800f326:	2b01      	cmp	r3, #1
 800f328:	d00a      	beq.n	800f340 <_raise_r+0x4c>
 800f32a:	1c59      	adds	r1, r3, #1
 800f32c:	d103      	bne.n	800f336 <_raise_r+0x42>
 800f32e:	2316      	movs	r3, #22
 800f330:	6003      	str	r3, [r0, #0]
 800f332:	2001      	movs	r0, #1
 800f334:	e7e7      	b.n	800f306 <_raise_r+0x12>
 800f336:	2400      	movs	r4, #0
 800f338:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f33c:	4628      	mov	r0, r5
 800f33e:	4798      	blx	r3
 800f340:	2000      	movs	r0, #0
 800f342:	e7e0      	b.n	800f306 <_raise_r+0x12>

0800f344 <raise>:
 800f344:	4b02      	ldr	r3, [pc, #8]	; (800f350 <raise+0xc>)
 800f346:	4601      	mov	r1, r0
 800f348:	6818      	ldr	r0, [r3, #0]
 800f34a:	f7ff bfd3 	b.w	800f2f4 <_raise_r>
 800f34e:	bf00      	nop
 800f350:	2000000c 	.word	0x2000000c

0800f354 <_kill_r>:
 800f354:	b538      	push	{r3, r4, r5, lr}
 800f356:	4d07      	ldr	r5, [pc, #28]	; (800f374 <_kill_r+0x20>)
 800f358:	2300      	movs	r3, #0
 800f35a:	4604      	mov	r4, r0
 800f35c:	4608      	mov	r0, r1
 800f35e:	4611      	mov	r1, r2
 800f360:	602b      	str	r3, [r5, #0]
 800f362:	f7f8 f90d 	bl	8007580 <_kill>
 800f366:	1c43      	adds	r3, r0, #1
 800f368:	d102      	bne.n	800f370 <_kill_r+0x1c>
 800f36a:	682b      	ldr	r3, [r5, #0]
 800f36c:	b103      	cbz	r3, 800f370 <_kill_r+0x1c>
 800f36e:	6023      	str	r3, [r4, #0]
 800f370:	bd38      	pop	{r3, r4, r5, pc}
 800f372:	bf00      	nop
 800f374:	20005254 	.word	0x20005254

0800f378 <_getpid_r>:
 800f378:	f7f8 b8fa 	b.w	8007570 <_getpid>

0800f37c <__ascii_wctomb>:
 800f37c:	b149      	cbz	r1, 800f392 <__ascii_wctomb+0x16>
 800f37e:	2aff      	cmp	r2, #255	; 0xff
 800f380:	bf85      	ittet	hi
 800f382:	238a      	movhi	r3, #138	; 0x8a
 800f384:	6003      	strhi	r3, [r0, #0]
 800f386:	700a      	strbls	r2, [r1, #0]
 800f388:	f04f 30ff 	movhi.w	r0, #4294967295
 800f38c:	bf98      	it	ls
 800f38e:	2001      	movls	r0, #1
 800f390:	4770      	bx	lr
 800f392:	4608      	mov	r0, r1
 800f394:	4770      	bx	lr

0800f396 <_malloc_usable_size_r>:
 800f396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f39a:	1f18      	subs	r0, r3, #4
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	bfbc      	itt	lt
 800f3a0:	580b      	ldrlt	r3, [r1, r0]
 800f3a2:	18c0      	addlt	r0, r0, r3
 800f3a4:	4770      	bx	lr
	...

0800f3a8 <exp>:
 800f3a8:	b538      	push	{r3, r4, r5, lr}
 800f3aa:	ed2d 8b02 	vpush	{d8}
 800f3ae:	ec55 4b10 	vmov	r4, r5, d0
 800f3b2:	f000 f929 	bl	800f608 <__ieee754_exp>
 800f3b6:	eeb0 8a40 	vmov.f32	s16, s0
 800f3ba:	eef0 8a60 	vmov.f32	s17, s1
 800f3be:	ec45 4b10 	vmov	d0, r4, r5
 800f3c2:	f001 fbb2 	bl	8010b2a <finite>
 800f3c6:	b168      	cbz	r0, 800f3e4 <exp+0x3c>
 800f3c8:	a317      	add	r3, pc, #92	; (adr r3, 800f428 <exp+0x80>)
 800f3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	4629      	mov	r1, r5
 800f3d2:	f7f1 fbc9 	bl	8000b68 <__aeabi_dcmpgt>
 800f3d6:	b160      	cbz	r0, 800f3f2 <exp+0x4a>
 800f3d8:	f7fd f870 	bl	800c4bc <__errno>
 800f3dc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800f418 <exp+0x70>
 800f3e0:	2322      	movs	r3, #34	; 0x22
 800f3e2:	6003      	str	r3, [r0, #0]
 800f3e4:	eeb0 0a48 	vmov.f32	s0, s16
 800f3e8:	eef0 0a68 	vmov.f32	s1, s17
 800f3ec:	ecbd 8b02 	vpop	{d8}
 800f3f0:	bd38      	pop	{r3, r4, r5, pc}
 800f3f2:	a30f      	add	r3, pc, #60	; (adr r3, 800f430 <exp+0x88>)
 800f3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f8:	4620      	mov	r0, r4
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	f7f1 fb96 	bl	8000b2c <__aeabi_dcmplt>
 800f400:	2800      	cmp	r0, #0
 800f402:	d0ef      	beq.n	800f3e4 <exp+0x3c>
 800f404:	f7fd f85a 	bl	800c4bc <__errno>
 800f408:	2322      	movs	r3, #34	; 0x22
 800f40a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800f420 <exp+0x78>
 800f40e:	6003      	str	r3, [r0, #0]
 800f410:	e7e8      	b.n	800f3e4 <exp+0x3c>
 800f412:	bf00      	nop
 800f414:	f3af 8000 	nop.w
 800f418:	00000000 	.word	0x00000000
 800f41c:	7ff00000 	.word	0x7ff00000
	...
 800f428:	fefa39ef 	.word	0xfefa39ef
 800f42c:	40862e42 	.word	0x40862e42
 800f430:	d52d3051 	.word	0xd52d3051
 800f434:	c0874910 	.word	0xc0874910

0800f438 <pow>:
 800f438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f43a:	ed2d 8b02 	vpush	{d8}
 800f43e:	eeb0 8a40 	vmov.f32	s16, s0
 800f442:	eef0 8a60 	vmov.f32	s17, s1
 800f446:	ec55 4b11 	vmov	r4, r5, d1
 800f44a:	f000 fa61 	bl	800f910 <__ieee754_pow>
 800f44e:	4622      	mov	r2, r4
 800f450:	462b      	mov	r3, r5
 800f452:	4620      	mov	r0, r4
 800f454:	4629      	mov	r1, r5
 800f456:	ec57 6b10 	vmov	r6, r7, d0
 800f45a:	f7f1 fb8f 	bl	8000b7c <__aeabi_dcmpun>
 800f45e:	2800      	cmp	r0, #0
 800f460:	d13b      	bne.n	800f4da <pow+0xa2>
 800f462:	ec51 0b18 	vmov	r0, r1, d8
 800f466:	2200      	movs	r2, #0
 800f468:	2300      	movs	r3, #0
 800f46a:	f7f1 fb55 	bl	8000b18 <__aeabi_dcmpeq>
 800f46e:	b1b8      	cbz	r0, 800f4a0 <pow+0x68>
 800f470:	2200      	movs	r2, #0
 800f472:	2300      	movs	r3, #0
 800f474:	4620      	mov	r0, r4
 800f476:	4629      	mov	r1, r5
 800f478:	f7f1 fb4e 	bl	8000b18 <__aeabi_dcmpeq>
 800f47c:	2800      	cmp	r0, #0
 800f47e:	d146      	bne.n	800f50e <pow+0xd6>
 800f480:	ec45 4b10 	vmov	d0, r4, r5
 800f484:	f001 fb51 	bl	8010b2a <finite>
 800f488:	b338      	cbz	r0, 800f4da <pow+0xa2>
 800f48a:	2200      	movs	r2, #0
 800f48c:	2300      	movs	r3, #0
 800f48e:	4620      	mov	r0, r4
 800f490:	4629      	mov	r1, r5
 800f492:	f7f1 fb4b 	bl	8000b2c <__aeabi_dcmplt>
 800f496:	b300      	cbz	r0, 800f4da <pow+0xa2>
 800f498:	f7fd f810 	bl	800c4bc <__errno>
 800f49c:	2322      	movs	r3, #34	; 0x22
 800f49e:	e01b      	b.n	800f4d8 <pow+0xa0>
 800f4a0:	ec47 6b10 	vmov	d0, r6, r7
 800f4a4:	f001 fb41 	bl	8010b2a <finite>
 800f4a8:	b9e0      	cbnz	r0, 800f4e4 <pow+0xac>
 800f4aa:	eeb0 0a48 	vmov.f32	s0, s16
 800f4ae:	eef0 0a68 	vmov.f32	s1, s17
 800f4b2:	f001 fb3a 	bl	8010b2a <finite>
 800f4b6:	b1a8      	cbz	r0, 800f4e4 <pow+0xac>
 800f4b8:	ec45 4b10 	vmov	d0, r4, r5
 800f4bc:	f001 fb35 	bl	8010b2a <finite>
 800f4c0:	b180      	cbz	r0, 800f4e4 <pow+0xac>
 800f4c2:	4632      	mov	r2, r6
 800f4c4:	463b      	mov	r3, r7
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	4639      	mov	r1, r7
 800f4ca:	f7f1 fb57 	bl	8000b7c <__aeabi_dcmpun>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d0e2      	beq.n	800f498 <pow+0x60>
 800f4d2:	f7fc fff3 	bl	800c4bc <__errno>
 800f4d6:	2321      	movs	r3, #33	; 0x21
 800f4d8:	6003      	str	r3, [r0, #0]
 800f4da:	ecbd 8b02 	vpop	{d8}
 800f4de:	ec47 6b10 	vmov	d0, r6, r7
 800f4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	4630      	mov	r0, r6
 800f4ea:	4639      	mov	r1, r7
 800f4ec:	f7f1 fb14 	bl	8000b18 <__aeabi_dcmpeq>
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	d0f2      	beq.n	800f4da <pow+0xa2>
 800f4f4:	eeb0 0a48 	vmov.f32	s0, s16
 800f4f8:	eef0 0a68 	vmov.f32	s1, s17
 800f4fc:	f001 fb15 	bl	8010b2a <finite>
 800f500:	2800      	cmp	r0, #0
 800f502:	d0ea      	beq.n	800f4da <pow+0xa2>
 800f504:	ec45 4b10 	vmov	d0, r4, r5
 800f508:	f001 fb0f 	bl	8010b2a <finite>
 800f50c:	e7c3      	b.n	800f496 <pow+0x5e>
 800f50e:	4f01      	ldr	r7, [pc, #4]	; (800f514 <pow+0xdc>)
 800f510:	2600      	movs	r6, #0
 800f512:	e7e2      	b.n	800f4da <pow+0xa2>
 800f514:	3ff00000 	.word	0x3ff00000

0800f518 <powf>:
 800f518:	b508      	push	{r3, lr}
 800f51a:	ed2d 8b04 	vpush	{d8-d9}
 800f51e:	eeb0 8a60 	vmov.f32	s16, s1
 800f522:	eeb0 9a40 	vmov.f32	s18, s0
 800f526:	f000 ffd3 	bl	80104d0 <__ieee754_powf>
 800f52a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f532:	eef0 8a40 	vmov.f32	s17, s0
 800f536:	d63e      	bvs.n	800f5b6 <powf+0x9e>
 800f538:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f53c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f540:	d112      	bne.n	800f568 <powf+0x50>
 800f542:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f54a:	d039      	beq.n	800f5c0 <powf+0xa8>
 800f54c:	eeb0 0a48 	vmov.f32	s0, s16
 800f550:	f001 fb83 	bl	8010c5a <finitef>
 800f554:	b378      	cbz	r0, 800f5b6 <powf+0x9e>
 800f556:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f55e:	d52a      	bpl.n	800f5b6 <powf+0x9e>
 800f560:	f7fc ffac 	bl	800c4bc <__errno>
 800f564:	2322      	movs	r3, #34	; 0x22
 800f566:	e014      	b.n	800f592 <powf+0x7a>
 800f568:	f001 fb77 	bl	8010c5a <finitef>
 800f56c:	b998      	cbnz	r0, 800f596 <powf+0x7e>
 800f56e:	eeb0 0a49 	vmov.f32	s0, s18
 800f572:	f001 fb72 	bl	8010c5a <finitef>
 800f576:	b170      	cbz	r0, 800f596 <powf+0x7e>
 800f578:	eeb0 0a48 	vmov.f32	s0, s16
 800f57c:	f001 fb6d 	bl	8010c5a <finitef>
 800f580:	b148      	cbz	r0, 800f596 <powf+0x7e>
 800f582:	eef4 8a68 	vcmp.f32	s17, s17
 800f586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f58a:	d7e9      	bvc.n	800f560 <powf+0x48>
 800f58c:	f7fc ff96 	bl	800c4bc <__errno>
 800f590:	2321      	movs	r3, #33	; 0x21
 800f592:	6003      	str	r3, [r0, #0]
 800f594:	e00f      	b.n	800f5b6 <powf+0x9e>
 800f596:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f59e:	d10a      	bne.n	800f5b6 <powf+0x9e>
 800f5a0:	eeb0 0a49 	vmov.f32	s0, s18
 800f5a4:	f001 fb59 	bl	8010c5a <finitef>
 800f5a8:	b128      	cbz	r0, 800f5b6 <powf+0x9e>
 800f5aa:	eeb0 0a48 	vmov.f32	s0, s16
 800f5ae:	f001 fb54 	bl	8010c5a <finitef>
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	d1d4      	bne.n	800f560 <powf+0x48>
 800f5b6:	eeb0 0a68 	vmov.f32	s0, s17
 800f5ba:	ecbd 8b04 	vpop	{d8-d9}
 800f5be:	bd08      	pop	{r3, pc}
 800f5c0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f5c4:	e7f7      	b.n	800f5b6 <powf+0x9e>
	...

0800f5c8 <sqrtf>:
 800f5c8:	b508      	push	{r3, lr}
 800f5ca:	ed2d 8b02 	vpush	{d8}
 800f5ce:	eeb0 8a40 	vmov.f32	s16, s0
 800f5d2:	f001 fa4b 	bl	8010a6c <__ieee754_sqrtf>
 800f5d6:	eeb4 8a48 	vcmp.f32	s16, s16
 800f5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5de:	d60c      	bvs.n	800f5fa <sqrtf+0x32>
 800f5e0:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f600 <sqrtf+0x38>
 800f5e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ec:	d505      	bpl.n	800f5fa <sqrtf+0x32>
 800f5ee:	f7fc ff65 	bl	800c4bc <__errno>
 800f5f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f5f6:	2321      	movs	r3, #33	; 0x21
 800f5f8:	6003      	str	r3, [r0, #0]
 800f5fa:	ecbd 8b02 	vpop	{d8}
 800f5fe:	bd08      	pop	{r3, pc}
	...

0800f608 <__ieee754_exp>:
 800f608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f60c:	ec55 4b10 	vmov	r4, r5, d0
 800f610:	49b5      	ldr	r1, [pc, #724]	; (800f8e8 <__ieee754_exp+0x2e0>)
 800f612:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f616:	428b      	cmp	r3, r1
 800f618:	ed2d 8b04 	vpush	{d8-d9}
 800f61c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800f620:	d93d      	bls.n	800f69e <__ieee754_exp+0x96>
 800f622:	49b2      	ldr	r1, [pc, #712]	; (800f8ec <__ieee754_exp+0x2e4>)
 800f624:	428b      	cmp	r3, r1
 800f626:	d918      	bls.n	800f65a <__ieee754_exp+0x52>
 800f628:	ee10 3a10 	vmov	r3, s0
 800f62c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800f630:	4313      	orrs	r3, r2
 800f632:	d009      	beq.n	800f648 <__ieee754_exp+0x40>
 800f634:	ee10 2a10 	vmov	r2, s0
 800f638:	462b      	mov	r3, r5
 800f63a:	4620      	mov	r0, r4
 800f63c:	4629      	mov	r1, r5
 800f63e:	f7f0 fe4d 	bl	80002dc <__adddf3>
 800f642:	4604      	mov	r4, r0
 800f644:	460d      	mov	r5, r1
 800f646:	e002      	b.n	800f64e <__ieee754_exp+0x46>
 800f648:	b10e      	cbz	r6, 800f64e <__ieee754_exp+0x46>
 800f64a:	2400      	movs	r4, #0
 800f64c:	2500      	movs	r5, #0
 800f64e:	ecbd 8b04 	vpop	{d8-d9}
 800f652:	ec45 4b10 	vmov	d0, r4, r5
 800f656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f65a:	a38d      	add	r3, pc, #564	; (adr r3, 800f890 <__ieee754_exp+0x288>)
 800f65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f660:	ee10 0a10 	vmov	r0, s0
 800f664:	4629      	mov	r1, r5
 800f666:	f7f1 fa7f 	bl	8000b68 <__aeabi_dcmpgt>
 800f66a:	4607      	mov	r7, r0
 800f66c:	b130      	cbz	r0, 800f67c <__ieee754_exp+0x74>
 800f66e:	ecbd 8b04 	vpop	{d8-d9}
 800f672:	2000      	movs	r0, #0
 800f674:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f678:	f001 ba22 	b.w	8010ac0 <__math_oflow>
 800f67c:	a386      	add	r3, pc, #536	; (adr r3, 800f898 <__ieee754_exp+0x290>)
 800f67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f682:	4620      	mov	r0, r4
 800f684:	4629      	mov	r1, r5
 800f686:	f7f1 fa51 	bl	8000b2c <__aeabi_dcmplt>
 800f68a:	2800      	cmp	r0, #0
 800f68c:	f000 808b 	beq.w	800f7a6 <__ieee754_exp+0x19e>
 800f690:	ecbd 8b04 	vpop	{d8-d9}
 800f694:	4638      	mov	r0, r7
 800f696:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f69a:	f001 ba08 	b.w	8010aae <__math_uflow>
 800f69e:	4a94      	ldr	r2, [pc, #592]	; (800f8f0 <__ieee754_exp+0x2e8>)
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	f240 80ac 	bls.w	800f7fe <__ieee754_exp+0x1f6>
 800f6a6:	4a93      	ldr	r2, [pc, #588]	; (800f8f4 <__ieee754_exp+0x2ec>)
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d87c      	bhi.n	800f7a6 <__ieee754_exp+0x19e>
 800f6ac:	4b92      	ldr	r3, [pc, #584]	; (800f8f8 <__ieee754_exp+0x2f0>)
 800f6ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b6:	ee10 0a10 	vmov	r0, s0
 800f6ba:	4629      	mov	r1, r5
 800f6bc:	f7f0 fe0c 	bl	80002d8 <__aeabi_dsub>
 800f6c0:	4b8e      	ldr	r3, [pc, #568]	; (800f8fc <__ieee754_exp+0x2f4>)
 800f6c2:	00f7      	lsls	r7, r6, #3
 800f6c4:	443b      	add	r3, r7
 800f6c6:	ed93 7b00 	vldr	d7, [r3]
 800f6ca:	f1c6 0a01 	rsb	sl, r6, #1
 800f6ce:	4680      	mov	r8, r0
 800f6d0:	4689      	mov	r9, r1
 800f6d2:	ebaa 0a06 	sub.w	sl, sl, r6
 800f6d6:	eeb0 8a47 	vmov.f32	s16, s14
 800f6da:	eef0 8a67 	vmov.f32	s17, s15
 800f6de:	ec53 2b18 	vmov	r2, r3, d8
 800f6e2:	4640      	mov	r0, r8
 800f6e4:	4649      	mov	r1, r9
 800f6e6:	f7f0 fdf7 	bl	80002d8 <__aeabi_dsub>
 800f6ea:	4604      	mov	r4, r0
 800f6ec:	460d      	mov	r5, r1
 800f6ee:	4622      	mov	r2, r4
 800f6f0:	462b      	mov	r3, r5
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	f7f0 ffa7 	bl	8000648 <__aeabi_dmul>
 800f6fa:	a369      	add	r3, pc, #420	; (adr r3, 800f8a0 <__ieee754_exp+0x298>)
 800f6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f700:	4606      	mov	r6, r0
 800f702:	460f      	mov	r7, r1
 800f704:	f7f0 ffa0 	bl	8000648 <__aeabi_dmul>
 800f708:	a367      	add	r3, pc, #412	; (adr r3, 800f8a8 <__ieee754_exp+0x2a0>)
 800f70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70e:	f7f0 fde3 	bl	80002d8 <__aeabi_dsub>
 800f712:	4632      	mov	r2, r6
 800f714:	463b      	mov	r3, r7
 800f716:	f7f0 ff97 	bl	8000648 <__aeabi_dmul>
 800f71a:	a365      	add	r3, pc, #404	; (adr r3, 800f8b0 <__ieee754_exp+0x2a8>)
 800f71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f720:	f7f0 fddc 	bl	80002dc <__adddf3>
 800f724:	4632      	mov	r2, r6
 800f726:	463b      	mov	r3, r7
 800f728:	f7f0 ff8e 	bl	8000648 <__aeabi_dmul>
 800f72c:	a362      	add	r3, pc, #392	; (adr r3, 800f8b8 <__ieee754_exp+0x2b0>)
 800f72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f732:	f7f0 fdd1 	bl	80002d8 <__aeabi_dsub>
 800f736:	4632      	mov	r2, r6
 800f738:	463b      	mov	r3, r7
 800f73a:	f7f0 ff85 	bl	8000648 <__aeabi_dmul>
 800f73e:	a360      	add	r3, pc, #384	; (adr r3, 800f8c0 <__ieee754_exp+0x2b8>)
 800f740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f744:	f7f0 fdca 	bl	80002dc <__adddf3>
 800f748:	4632      	mov	r2, r6
 800f74a:	463b      	mov	r3, r7
 800f74c:	f7f0 ff7c 	bl	8000648 <__aeabi_dmul>
 800f750:	4602      	mov	r2, r0
 800f752:	460b      	mov	r3, r1
 800f754:	4620      	mov	r0, r4
 800f756:	4629      	mov	r1, r5
 800f758:	f7f0 fdbe 	bl	80002d8 <__aeabi_dsub>
 800f75c:	4602      	mov	r2, r0
 800f75e:	460b      	mov	r3, r1
 800f760:	4606      	mov	r6, r0
 800f762:	460f      	mov	r7, r1
 800f764:	4620      	mov	r0, r4
 800f766:	4629      	mov	r1, r5
 800f768:	f7f0 ff6e 	bl	8000648 <__aeabi_dmul>
 800f76c:	ec41 0b19 	vmov	d9, r0, r1
 800f770:	f1ba 0f00 	cmp.w	sl, #0
 800f774:	d15d      	bne.n	800f832 <__ieee754_exp+0x22a>
 800f776:	2200      	movs	r2, #0
 800f778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f77c:	4630      	mov	r0, r6
 800f77e:	4639      	mov	r1, r7
 800f780:	f7f0 fdaa 	bl	80002d8 <__aeabi_dsub>
 800f784:	4602      	mov	r2, r0
 800f786:	460b      	mov	r3, r1
 800f788:	ec51 0b19 	vmov	r0, r1, d9
 800f78c:	f7f1 f886 	bl	800089c <__aeabi_ddiv>
 800f790:	4622      	mov	r2, r4
 800f792:	462b      	mov	r3, r5
 800f794:	f7f0 fda0 	bl	80002d8 <__aeabi_dsub>
 800f798:	4602      	mov	r2, r0
 800f79a:	460b      	mov	r3, r1
 800f79c:	2000      	movs	r0, #0
 800f79e:	4958      	ldr	r1, [pc, #352]	; (800f900 <__ieee754_exp+0x2f8>)
 800f7a0:	f7f0 fd9a 	bl	80002d8 <__aeabi_dsub>
 800f7a4:	e74d      	b.n	800f642 <__ieee754_exp+0x3a>
 800f7a6:	4857      	ldr	r0, [pc, #348]	; (800f904 <__ieee754_exp+0x2fc>)
 800f7a8:	a347      	add	r3, pc, #284	; (adr r3, 800f8c8 <__ieee754_exp+0x2c0>)
 800f7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ae:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800f7b2:	4629      	mov	r1, r5
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	f7f0 ff47 	bl	8000648 <__aeabi_dmul>
 800f7ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f7be:	f7f0 fd8d 	bl	80002dc <__adddf3>
 800f7c2:	f7f1 f9f1 	bl	8000ba8 <__aeabi_d2iz>
 800f7c6:	4682      	mov	sl, r0
 800f7c8:	f7f0 fed4 	bl	8000574 <__aeabi_i2d>
 800f7cc:	a340      	add	r3, pc, #256	; (adr r3, 800f8d0 <__ieee754_exp+0x2c8>)
 800f7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d2:	4606      	mov	r6, r0
 800f7d4:	460f      	mov	r7, r1
 800f7d6:	f7f0 ff37 	bl	8000648 <__aeabi_dmul>
 800f7da:	4602      	mov	r2, r0
 800f7dc:	460b      	mov	r3, r1
 800f7de:	4620      	mov	r0, r4
 800f7e0:	4629      	mov	r1, r5
 800f7e2:	f7f0 fd79 	bl	80002d8 <__aeabi_dsub>
 800f7e6:	a33c      	add	r3, pc, #240	; (adr r3, 800f8d8 <__ieee754_exp+0x2d0>)
 800f7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ec:	4680      	mov	r8, r0
 800f7ee:	4689      	mov	r9, r1
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	4639      	mov	r1, r7
 800f7f4:	f7f0 ff28 	bl	8000648 <__aeabi_dmul>
 800f7f8:	ec41 0b18 	vmov	d8, r0, r1
 800f7fc:	e76f      	b.n	800f6de <__ieee754_exp+0xd6>
 800f7fe:	4a42      	ldr	r2, [pc, #264]	; (800f908 <__ieee754_exp+0x300>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d811      	bhi.n	800f828 <__ieee754_exp+0x220>
 800f804:	a336      	add	r3, pc, #216	; (adr r3, 800f8e0 <__ieee754_exp+0x2d8>)
 800f806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80a:	ee10 0a10 	vmov	r0, s0
 800f80e:	4629      	mov	r1, r5
 800f810:	f7f0 fd64 	bl	80002dc <__adddf3>
 800f814:	4b3a      	ldr	r3, [pc, #232]	; (800f900 <__ieee754_exp+0x2f8>)
 800f816:	2200      	movs	r2, #0
 800f818:	f7f1 f9a6 	bl	8000b68 <__aeabi_dcmpgt>
 800f81c:	b138      	cbz	r0, 800f82e <__ieee754_exp+0x226>
 800f81e:	4b38      	ldr	r3, [pc, #224]	; (800f900 <__ieee754_exp+0x2f8>)
 800f820:	2200      	movs	r2, #0
 800f822:	4620      	mov	r0, r4
 800f824:	4629      	mov	r1, r5
 800f826:	e70a      	b.n	800f63e <__ieee754_exp+0x36>
 800f828:	f04f 0a00 	mov.w	sl, #0
 800f82c:	e75f      	b.n	800f6ee <__ieee754_exp+0xe6>
 800f82e:	4682      	mov	sl, r0
 800f830:	e75d      	b.n	800f6ee <__ieee754_exp+0xe6>
 800f832:	4632      	mov	r2, r6
 800f834:	463b      	mov	r3, r7
 800f836:	2000      	movs	r0, #0
 800f838:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f83c:	f7f0 fd4c 	bl	80002d8 <__aeabi_dsub>
 800f840:	4602      	mov	r2, r0
 800f842:	460b      	mov	r3, r1
 800f844:	ec51 0b19 	vmov	r0, r1, d9
 800f848:	f7f1 f828 	bl	800089c <__aeabi_ddiv>
 800f84c:	4602      	mov	r2, r0
 800f84e:	460b      	mov	r3, r1
 800f850:	ec51 0b18 	vmov	r0, r1, d8
 800f854:	f7f0 fd40 	bl	80002d8 <__aeabi_dsub>
 800f858:	4642      	mov	r2, r8
 800f85a:	464b      	mov	r3, r9
 800f85c:	f7f0 fd3c 	bl	80002d8 <__aeabi_dsub>
 800f860:	4602      	mov	r2, r0
 800f862:	460b      	mov	r3, r1
 800f864:	2000      	movs	r0, #0
 800f866:	4926      	ldr	r1, [pc, #152]	; (800f900 <__ieee754_exp+0x2f8>)
 800f868:	f7f0 fd36 	bl	80002d8 <__aeabi_dsub>
 800f86c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800f870:	4592      	cmp	sl, r2
 800f872:	db02      	blt.n	800f87a <__ieee754_exp+0x272>
 800f874:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800f878:	e6e3      	b.n	800f642 <__ieee754_exp+0x3a>
 800f87a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800f87e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800f882:	2200      	movs	r2, #0
 800f884:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800f888:	f7f0 fede 	bl	8000648 <__aeabi_dmul>
 800f88c:	e6d9      	b.n	800f642 <__ieee754_exp+0x3a>
 800f88e:	bf00      	nop
 800f890:	fefa39ef 	.word	0xfefa39ef
 800f894:	40862e42 	.word	0x40862e42
 800f898:	d52d3051 	.word	0xd52d3051
 800f89c:	c0874910 	.word	0xc0874910
 800f8a0:	72bea4d0 	.word	0x72bea4d0
 800f8a4:	3e663769 	.word	0x3e663769
 800f8a8:	c5d26bf1 	.word	0xc5d26bf1
 800f8ac:	3ebbbd41 	.word	0x3ebbbd41
 800f8b0:	af25de2c 	.word	0xaf25de2c
 800f8b4:	3f11566a 	.word	0x3f11566a
 800f8b8:	16bebd93 	.word	0x16bebd93
 800f8bc:	3f66c16c 	.word	0x3f66c16c
 800f8c0:	5555553e 	.word	0x5555553e
 800f8c4:	3fc55555 	.word	0x3fc55555
 800f8c8:	652b82fe 	.word	0x652b82fe
 800f8cc:	3ff71547 	.word	0x3ff71547
 800f8d0:	fee00000 	.word	0xfee00000
 800f8d4:	3fe62e42 	.word	0x3fe62e42
 800f8d8:	35793c76 	.word	0x35793c76
 800f8dc:	3dea39ef 	.word	0x3dea39ef
 800f8e0:	8800759c 	.word	0x8800759c
 800f8e4:	7e37e43c 	.word	0x7e37e43c
 800f8e8:	40862e41 	.word	0x40862e41
 800f8ec:	7fefffff 	.word	0x7fefffff
 800f8f0:	3fd62e42 	.word	0x3fd62e42
 800f8f4:	3ff0a2b1 	.word	0x3ff0a2b1
 800f8f8:	08011688 	.word	0x08011688
 800f8fc:	08011698 	.word	0x08011698
 800f900:	3ff00000 	.word	0x3ff00000
 800f904:	08011678 	.word	0x08011678
 800f908:	3defffff 	.word	0x3defffff
 800f90c:	00000000 	.word	0x00000000

0800f910 <__ieee754_pow>:
 800f910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f914:	ed2d 8b06 	vpush	{d8-d10}
 800f918:	b089      	sub	sp, #36	; 0x24
 800f91a:	ed8d 1b00 	vstr	d1, [sp]
 800f91e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f922:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f926:	ea58 0102 	orrs.w	r1, r8, r2
 800f92a:	ec57 6b10 	vmov	r6, r7, d0
 800f92e:	d115      	bne.n	800f95c <__ieee754_pow+0x4c>
 800f930:	19b3      	adds	r3, r6, r6
 800f932:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f936:	4152      	adcs	r2, r2
 800f938:	4299      	cmp	r1, r3
 800f93a:	4b89      	ldr	r3, [pc, #548]	; (800fb60 <__ieee754_pow+0x250>)
 800f93c:	4193      	sbcs	r3, r2
 800f93e:	f080 84d2 	bcs.w	80102e6 <__ieee754_pow+0x9d6>
 800f942:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f946:	4630      	mov	r0, r6
 800f948:	4639      	mov	r1, r7
 800f94a:	f7f0 fcc7 	bl	80002dc <__adddf3>
 800f94e:	ec41 0b10 	vmov	d0, r0, r1
 800f952:	b009      	add	sp, #36	; 0x24
 800f954:	ecbd 8b06 	vpop	{d8-d10}
 800f958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f95c:	4b81      	ldr	r3, [pc, #516]	; (800fb64 <__ieee754_pow+0x254>)
 800f95e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f962:	429c      	cmp	r4, r3
 800f964:	ee10 aa10 	vmov	sl, s0
 800f968:	463d      	mov	r5, r7
 800f96a:	dc06      	bgt.n	800f97a <__ieee754_pow+0x6a>
 800f96c:	d101      	bne.n	800f972 <__ieee754_pow+0x62>
 800f96e:	2e00      	cmp	r6, #0
 800f970:	d1e7      	bne.n	800f942 <__ieee754_pow+0x32>
 800f972:	4598      	cmp	r8, r3
 800f974:	dc01      	bgt.n	800f97a <__ieee754_pow+0x6a>
 800f976:	d10f      	bne.n	800f998 <__ieee754_pow+0x88>
 800f978:	b172      	cbz	r2, 800f998 <__ieee754_pow+0x88>
 800f97a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f97e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f982:	ea55 050a 	orrs.w	r5, r5, sl
 800f986:	d1dc      	bne.n	800f942 <__ieee754_pow+0x32>
 800f988:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f98c:	18db      	adds	r3, r3, r3
 800f98e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f992:	4152      	adcs	r2, r2
 800f994:	429d      	cmp	r5, r3
 800f996:	e7d0      	b.n	800f93a <__ieee754_pow+0x2a>
 800f998:	2d00      	cmp	r5, #0
 800f99a:	da3b      	bge.n	800fa14 <__ieee754_pow+0x104>
 800f99c:	4b72      	ldr	r3, [pc, #456]	; (800fb68 <__ieee754_pow+0x258>)
 800f99e:	4598      	cmp	r8, r3
 800f9a0:	dc51      	bgt.n	800fa46 <__ieee754_pow+0x136>
 800f9a2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f9a6:	4598      	cmp	r8, r3
 800f9a8:	f340 84ac 	ble.w	8010304 <__ieee754_pow+0x9f4>
 800f9ac:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f9b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f9b4:	2b14      	cmp	r3, #20
 800f9b6:	dd0f      	ble.n	800f9d8 <__ieee754_pow+0xc8>
 800f9b8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f9bc:	fa22 f103 	lsr.w	r1, r2, r3
 800f9c0:	fa01 f303 	lsl.w	r3, r1, r3
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	f040 849d 	bne.w	8010304 <__ieee754_pow+0x9f4>
 800f9ca:	f001 0101 	and.w	r1, r1, #1
 800f9ce:	f1c1 0302 	rsb	r3, r1, #2
 800f9d2:	9304      	str	r3, [sp, #16]
 800f9d4:	b182      	cbz	r2, 800f9f8 <__ieee754_pow+0xe8>
 800f9d6:	e05f      	b.n	800fa98 <__ieee754_pow+0x188>
 800f9d8:	2a00      	cmp	r2, #0
 800f9da:	d15b      	bne.n	800fa94 <__ieee754_pow+0x184>
 800f9dc:	f1c3 0314 	rsb	r3, r3, #20
 800f9e0:	fa48 f103 	asr.w	r1, r8, r3
 800f9e4:	fa01 f303 	lsl.w	r3, r1, r3
 800f9e8:	4543      	cmp	r3, r8
 800f9ea:	f040 8488 	bne.w	80102fe <__ieee754_pow+0x9ee>
 800f9ee:	f001 0101 	and.w	r1, r1, #1
 800f9f2:	f1c1 0302 	rsb	r3, r1, #2
 800f9f6:	9304      	str	r3, [sp, #16]
 800f9f8:	4b5c      	ldr	r3, [pc, #368]	; (800fb6c <__ieee754_pow+0x25c>)
 800f9fa:	4598      	cmp	r8, r3
 800f9fc:	d132      	bne.n	800fa64 <__ieee754_pow+0x154>
 800f9fe:	f1b9 0f00 	cmp.w	r9, #0
 800fa02:	f280 8478 	bge.w	80102f6 <__ieee754_pow+0x9e6>
 800fa06:	4959      	ldr	r1, [pc, #356]	; (800fb6c <__ieee754_pow+0x25c>)
 800fa08:	4632      	mov	r2, r6
 800fa0a:	463b      	mov	r3, r7
 800fa0c:	2000      	movs	r0, #0
 800fa0e:	f7f0 ff45 	bl	800089c <__aeabi_ddiv>
 800fa12:	e79c      	b.n	800f94e <__ieee754_pow+0x3e>
 800fa14:	2300      	movs	r3, #0
 800fa16:	9304      	str	r3, [sp, #16]
 800fa18:	2a00      	cmp	r2, #0
 800fa1a:	d13d      	bne.n	800fa98 <__ieee754_pow+0x188>
 800fa1c:	4b51      	ldr	r3, [pc, #324]	; (800fb64 <__ieee754_pow+0x254>)
 800fa1e:	4598      	cmp	r8, r3
 800fa20:	d1ea      	bne.n	800f9f8 <__ieee754_pow+0xe8>
 800fa22:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800fa26:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800fa2a:	ea53 030a 	orrs.w	r3, r3, sl
 800fa2e:	f000 845a 	beq.w	80102e6 <__ieee754_pow+0x9d6>
 800fa32:	4b4f      	ldr	r3, [pc, #316]	; (800fb70 <__ieee754_pow+0x260>)
 800fa34:	429c      	cmp	r4, r3
 800fa36:	dd08      	ble.n	800fa4a <__ieee754_pow+0x13a>
 800fa38:	f1b9 0f00 	cmp.w	r9, #0
 800fa3c:	f2c0 8457 	blt.w	80102ee <__ieee754_pow+0x9de>
 800fa40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa44:	e783      	b.n	800f94e <__ieee754_pow+0x3e>
 800fa46:	2302      	movs	r3, #2
 800fa48:	e7e5      	b.n	800fa16 <__ieee754_pow+0x106>
 800fa4a:	f1b9 0f00 	cmp.w	r9, #0
 800fa4e:	f04f 0000 	mov.w	r0, #0
 800fa52:	f04f 0100 	mov.w	r1, #0
 800fa56:	f6bf af7a 	bge.w	800f94e <__ieee754_pow+0x3e>
 800fa5a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fa5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fa62:	e774      	b.n	800f94e <__ieee754_pow+0x3e>
 800fa64:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800fa68:	d106      	bne.n	800fa78 <__ieee754_pow+0x168>
 800fa6a:	4632      	mov	r2, r6
 800fa6c:	463b      	mov	r3, r7
 800fa6e:	4630      	mov	r0, r6
 800fa70:	4639      	mov	r1, r7
 800fa72:	f7f0 fde9 	bl	8000648 <__aeabi_dmul>
 800fa76:	e76a      	b.n	800f94e <__ieee754_pow+0x3e>
 800fa78:	4b3e      	ldr	r3, [pc, #248]	; (800fb74 <__ieee754_pow+0x264>)
 800fa7a:	4599      	cmp	r9, r3
 800fa7c:	d10c      	bne.n	800fa98 <__ieee754_pow+0x188>
 800fa7e:	2d00      	cmp	r5, #0
 800fa80:	db0a      	blt.n	800fa98 <__ieee754_pow+0x188>
 800fa82:	ec47 6b10 	vmov	d0, r6, r7
 800fa86:	b009      	add	sp, #36	; 0x24
 800fa88:	ecbd 8b06 	vpop	{d8-d10}
 800fa8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa90:	f000 bc6c 	b.w	801036c <__ieee754_sqrt>
 800fa94:	2300      	movs	r3, #0
 800fa96:	9304      	str	r3, [sp, #16]
 800fa98:	ec47 6b10 	vmov	d0, r6, r7
 800fa9c:	f001 f83c 	bl	8010b18 <fabs>
 800faa0:	ec51 0b10 	vmov	r0, r1, d0
 800faa4:	f1ba 0f00 	cmp.w	sl, #0
 800faa8:	d129      	bne.n	800fafe <__ieee754_pow+0x1ee>
 800faaa:	b124      	cbz	r4, 800fab6 <__ieee754_pow+0x1a6>
 800faac:	4b2f      	ldr	r3, [pc, #188]	; (800fb6c <__ieee754_pow+0x25c>)
 800faae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d123      	bne.n	800fafe <__ieee754_pow+0x1ee>
 800fab6:	f1b9 0f00 	cmp.w	r9, #0
 800faba:	da05      	bge.n	800fac8 <__ieee754_pow+0x1b8>
 800fabc:	4602      	mov	r2, r0
 800fabe:	460b      	mov	r3, r1
 800fac0:	2000      	movs	r0, #0
 800fac2:	492a      	ldr	r1, [pc, #168]	; (800fb6c <__ieee754_pow+0x25c>)
 800fac4:	f7f0 feea 	bl	800089c <__aeabi_ddiv>
 800fac8:	2d00      	cmp	r5, #0
 800faca:	f6bf af40 	bge.w	800f94e <__ieee754_pow+0x3e>
 800face:	9b04      	ldr	r3, [sp, #16]
 800fad0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fad4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fad8:	4323      	orrs	r3, r4
 800fada:	d108      	bne.n	800faee <__ieee754_pow+0x1de>
 800fadc:	4602      	mov	r2, r0
 800fade:	460b      	mov	r3, r1
 800fae0:	4610      	mov	r0, r2
 800fae2:	4619      	mov	r1, r3
 800fae4:	f7f0 fbf8 	bl	80002d8 <__aeabi_dsub>
 800fae8:	4602      	mov	r2, r0
 800faea:	460b      	mov	r3, r1
 800faec:	e78f      	b.n	800fa0e <__ieee754_pow+0xfe>
 800faee:	9b04      	ldr	r3, [sp, #16]
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	f47f af2c 	bne.w	800f94e <__ieee754_pow+0x3e>
 800faf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fafa:	4619      	mov	r1, r3
 800fafc:	e727      	b.n	800f94e <__ieee754_pow+0x3e>
 800fafe:	0feb      	lsrs	r3, r5, #31
 800fb00:	3b01      	subs	r3, #1
 800fb02:	9306      	str	r3, [sp, #24]
 800fb04:	9a06      	ldr	r2, [sp, #24]
 800fb06:	9b04      	ldr	r3, [sp, #16]
 800fb08:	4313      	orrs	r3, r2
 800fb0a:	d102      	bne.n	800fb12 <__ieee754_pow+0x202>
 800fb0c:	4632      	mov	r2, r6
 800fb0e:	463b      	mov	r3, r7
 800fb10:	e7e6      	b.n	800fae0 <__ieee754_pow+0x1d0>
 800fb12:	4b19      	ldr	r3, [pc, #100]	; (800fb78 <__ieee754_pow+0x268>)
 800fb14:	4598      	cmp	r8, r3
 800fb16:	f340 80fb 	ble.w	800fd10 <__ieee754_pow+0x400>
 800fb1a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800fb1e:	4598      	cmp	r8, r3
 800fb20:	4b13      	ldr	r3, [pc, #76]	; (800fb70 <__ieee754_pow+0x260>)
 800fb22:	dd0c      	ble.n	800fb3e <__ieee754_pow+0x22e>
 800fb24:	429c      	cmp	r4, r3
 800fb26:	dc0f      	bgt.n	800fb48 <__ieee754_pow+0x238>
 800fb28:	f1b9 0f00 	cmp.w	r9, #0
 800fb2c:	da0f      	bge.n	800fb4e <__ieee754_pow+0x23e>
 800fb2e:	2000      	movs	r0, #0
 800fb30:	b009      	add	sp, #36	; 0x24
 800fb32:	ecbd 8b06 	vpop	{d8-d10}
 800fb36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb3a:	f000 bfc1 	b.w	8010ac0 <__math_oflow>
 800fb3e:	429c      	cmp	r4, r3
 800fb40:	dbf2      	blt.n	800fb28 <__ieee754_pow+0x218>
 800fb42:	4b0a      	ldr	r3, [pc, #40]	; (800fb6c <__ieee754_pow+0x25c>)
 800fb44:	429c      	cmp	r4, r3
 800fb46:	dd19      	ble.n	800fb7c <__ieee754_pow+0x26c>
 800fb48:	f1b9 0f00 	cmp.w	r9, #0
 800fb4c:	dcef      	bgt.n	800fb2e <__ieee754_pow+0x21e>
 800fb4e:	2000      	movs	r0, #0
 800fb50:	b009      	add	sp, #36	; 0x24
 800fb52:	ecbd 8b06 	vpop	{d8-d10}
 800fb56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5a:	f000 bfa8 	b.w	8010aae <__math_uflow>
 800fb5e:	bf00      	nop
 800fb60:	fff00000 	.word	0xfff00000
 800fb64:	7ff00000 	.word	0x7ff00000
 800fb68:	433fffff 	.word	0x433fffff
 800fb6c:	3ff00000 	.word	0x3ff00000
 800fb70:	3fefffff 	.word	0x3fefffff
 800fb74:	3fe00000 	.word	0x3fe00000
 800fb78:	41e00000 	.word	0x41e00000
 800fb7c:	4b60      	ldr	r3, [pc, #384]	; (800fd00 <__ieee754_pow+0x3f0>)
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f7f0 fbaa 	bl	80002d8 <__aeabi_dsub>
 800fb84:	a354      	add	r3, pc, #336	; (adr r3, 800fcd8 <__ieee754_pow+0x3c8>)
 800fb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	460d      	mov	r5, r1
 800fb8e:	f7f0 fd5b 	bl	8000648 <__aeabi_dmul>
 800fb92:	a353      	add	r3, pc, #332	; (adr r3, 800fce0 <__ieee754_pow+0x3d0>)
 800fb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb98:	4606      	mov	r6, r0
 800fb9a:	460f      	mov	r7, r1
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	4629      	mov	r1, r5
 800fba0:	f7f0 fd52 	bl	8000648 <__aeabi_dmul>
 800fba4:	4b57      	ldr	r3, [pc, #348]	; (800fd04 <__ieee754_pow+0x3f4>)
 800fba6:	4682      	mov	sl, r0
 800fba8:	468b      	mov	fp, r1
 800fbaa:	2200      	movs	r2, #0
 800fbac:	4620      	mov	r0, r4
 800fbae:	4629      	mov	r1, r5
 800fbb0:	f7f0 fd4a 	bl	8000648 <__aeabi_dmul>
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	a14b      	add	r1, pc, #300	; (adr r1, 800fce8 <__ieee754_pow+0x3d8>)
 800fbba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbbe:	f7f0 fb8b 	bl	80002d8 <__aeabi_dsub>
 800fbc2:	4622      	mov	r2, r4
 800fbc4:	462b      	mov	r3, r5
 800fbc6:	f7f0 fd3f 	bl	8000648 <__aeabi_dmul>
 800fbca:	4602      	mov	r2, r0
 800fbcc:	460b      	mov	r3, r1
 800fbce:	2000      	movs	r0, #0
 800fbd0:	494d      	ldr	r1, [pc, #308]	; (800fd08 <__ieee754_pow+0x3f8>)
 800fbd2:	f7f0 fb81 	bl	80002d8 <__aeabi_dsub>
 800fbd6:	4622      	mov	r2, r4
 800fbd8:	4680      	mov	r8, r0
 800fbda:	4689      	mov	r9, r1
 800fbdc:	462b      	mov	r3, r5
 800fbde:	4620      	mov	r0, r4
 800fbe0:	4629      	mov	r1, r5
 800fbe2:	f7f0 fd31 	bl	8000648 <__aeabi_dmul>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	460b      	mov	r3, r1
 800fbea:	4640      	mov	r0, r8
 800fbec:	4649      	mov	r1, r9
 800fbee:	f7f0 fd2b 	bl	8000648 <__aeabi_dmul>
 800fbf2:	a33f      	add	r3, pc, #252	; (adr r3, 800fcf0 <__ieee754_pow+0x3e0>)
 800fbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf8:	f7f0 fd26 	bl	8000648 <__aeabi_dmul>
 800fbfc:	4602      	mov	r2, r0
 800fbfe:	460b      	mov	r3, r1
 800fc00:	4650      	mov	r0, sl
 800fc02:	4659      	mov	r1, fp
 800fc04:	f7f0 fb68 	bl	80002d8 <__aeabi_dsub>
 800fc08:	4602      	mov	r2, r0
 800fc0a:	460b      	mov	r3, r1
 800fc0c:	4680      	mov	r8, r0
 800fc0e:	4689      	mov	r9, r1
 800fc10:	4630      	mov	r0, r6
 800fc12:	4639      	mov	r1, r7
 800fc14:	f7f0 fb62 	bl	80002dc <__adddf3>
 800fc18:	2000      	movs	r0, #0
 800fc1a:	4632      	mov	r2, r6
 800fc1c:	463b      	mov	r3, r7
 800fc1e:	4604      	mov	r4, r0
 800fc20:	460d      	mov	r5, r1
 800fc22:	f7f0 fb59 	bl	80002d8 <__aeabi_dsub>
 800fc26:	4602      	mov	r2, r0
 800fc28:	460b      	mov	r3, r1
 800fc2a:	4640      	mov	r0, r8
 800fc2c:	4649      	mov	r1, r9
 800fc2e:	f7f0 fb53 	bl	80002d8 <__aeabi_dsub>
 800fc32:	9b04      	ldr	r3, [sp, #16]
 800fc34:	9a06      	ldr	r2, [sp, #24]
 800fc36:	3b01      	subs	r3, #1
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	4682      	mov	sl, r0
 800fc3c:	468b      	mov	fp, r1
 800fc3e:	f040 81e7 	bne.w	8010010 <__ieee754_pow+0x700>
 800fc42:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fcf8 <__ieee754_pow+0x3e8>
 800fc46:	eeb0 8a47 	vmov.f32	s16, s14
 800fc4a:	eef0 8a67 	vmov.f32	s17, s15
 800fc4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fc52:	2600      	movs	r6, #0
 800fc54:	4632      	mov	r2, r6
 800fc56:	463b      	mov	r3, r7
 800fc58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc5c:	f7f0 fb3c 	bl	80002d8 <__aeabi_dsub>
 800fc60:	4622      	mov	r2, r4
 800fc62:	462b      	mov	r3, r5
 800fc64:	f7f0 fcf0 	bl	8000648 <__aeabi_dmul>
 800fc68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc6c:	4680      	mov	r8, r0
 800fc6e:	4689      	mov	r9, r1
 800fc70:	4650      	mov	r0, sl
 800fc72:	4659      	mov	r1, fp
 800fc74:	f7f0 fce8 	bl	8000648 <__aeabi_dmul>
 800fc78:	4602      	mov	r2, r0
 800fc7a:	460b      	mov	r3, r1
 800fc7c:	4640      	mov	r0, r8
 800fc7e:	4649      	mov	r1, r9
 800fc80:	f7f0 fb2c 	bl	80002dc <__adddf3>
 800fc84:	4632      	mov	r2, r6
 800fc86:	463b      	mov	r3, r7
 800fc88:	4680      	mov	r8, r0
 800fc8a:	4689      	mov	r9, r1
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	4629      	mov	r1, r5
 800fc90:	f7f0 fcda 	bl	8000648 <__aeabi_dmul>
 800fc94:	460b      	mov	r3, r1
 800fc96:	4604      	mov	r4, r0
 800fc98:	460d      	mov	r5, r1
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	4649      	mov	r1, r9
 800fc9e:	4640      	mov	r0, r8
 800fca0:	f7f0 fb1c 	bl	80002dc <__adddf3>
 800fca4:	4b19      	ldr	r3, [pc, #100]	; (800fd0c <__ieee754_pow+0x3fc>)
 800fca6:	4299      	cmp	r1, r3
 800fca8:	ec45 4b19 	vmov	d9, r4, r5
 800fcac:	4606      	mov	r6, r0
 800fcae:	460f      	mov	r7, r1
 800fcb0:	468b      	mov	fp, r1
 800fcb2:	f340 82f1 	ble.w	8010298 <__ieee754_pow+0x988>
 800fcb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fcba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fcbe:	4303      	orrs	r3, r0
 800fcc0:	f000 81e4 	beq.w	801008c <__ieee754_pow+0x77c>
 800fcc4:	ec51 0b18 	vmov	r0, r1, d8
 800fcc8:	2200      	movs	r2, #0
 800fcca:	2300      	movs	r3, #0
 800fccc:	f7f0 ff2e 	bl	8000b2c <__aeabi_dcmplt>
 800fcd0:	3800      	subs	r0, #0
 800fcd2:	bf18      	it	ne
 800fcd4:	2001      	movne	r0, #1
 800fcd6:	e72b      	b.n	800fb30 <__ieee754_pow+0x220>
 800fcd8:	60000000 	.word	0x60000000
 800fcdc:	3ff71547 	.word	0x3ff71547
 800fce0:	f85ddf44 	.word	0xf85ddf44
 800fce4:	3e54ae0b 	.word	0x3e54ae0b
 800fce8:	55555555 	.word	0x55555555
 800fcec:	3fd55555 	.word	0x3fd55555
 800fcf0:	652b82fe 	.word	0x652b82fe
 800fcf4:	3ff71547 	.word	0x3ff71547
 800fcf8:	00000000 	.word	0x00000000
 800fcfc:	bff00000 	.word	0xbff00000
 800fd00:	3ff00000 	.word	0x3ff00000
 800fd04:	3fd00000 	.word	0x3fd00000
 800fd08:	3fe00000 	.word	0x3fe00000
 800fd0c:	408fffff 	.word	0x408fffff
 800fd10:	4bd5      	ldr	r3, [pc, #852]	; (8010068 <__ieee754_pow+0x758>)
 800fd12:	402b      	ands	r3, r5
 800fd14:	2200      	movs	r2, #0
 800fd16:	b92b      	cbnz	r3, 800fd24 <__ieee754_pow+0x414>
 800fd18:	4bd4      	ldr	r3, [pc, #848]	; (801006c <__ieee754_pow+0x75c>)
 800fd1a:	f7f0 fc95 	bl	8000648 <__aeabi_dmul>
 800fd1e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fd22:	460c      	mov	r4, r1
 800fd24:	1523      	asrs	r3, r4, #20
 800fd26:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fd2a:	4413      	add	r3, r2
 800fd2c:	9305      	str	r3, [sp, #20]
 800fd2e:	4bd0      	ldr	r3, [pc, #832]	; (8010070 <__ieee754_pow+0x760>)
 800fd30:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fd34:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fd38:	429c      	cmp	r4, r3
 800fd3a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fd3e:	dd08      	ble.n	800fd52 <__ieee754_pow+0x442>
 800fd40:	4bcc      	ldr	r3, [pc, #816]	; (8010074 <__ieee754_pow+0x764>)
 800fd42:	429c      	cmp	r4, r3
 800fd44:	f340 8162 	ble.w	801000c <__ieee754_pow+0x6fc>
 800fd48:	9b05      	ldr	r3, [sp, #20]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	9305      	str	r3, [sp, #20]
 800fd4e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fd52:	2400      	movs	r4, #0
 800fd54:	00e3      	lsls	r3, r4, #3
 800fd56:	9307      	str	r3, [sp, #28]
 800fd58:	4bc7      	ldr	r3, [pc, #796]	; (8010078 <__ieee754_pow+0x768>)
 800fd5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd5e:	ed93 7b00 	vldr	d7, [r3]
 800fd62:	4629      	mov	r1, r5
 800fd64:	ec53 2b17 	vmov	r2, r3, d7
 800fd68:	eeb0 9a47 	vmov.f32	s18, s14
 800fd6c:	eef0 9a67 	vmov.f32	s19, s15
 800fd70:	4682      	mov	sl, r0
 800fd72:	f7f0 fab1 	bl	80002d8 <__aeabi_dsub>
 800fd76:	4652      	mov	r2, sl
 800fd78:	4606      	mov	r6, r0
 800fd7a:	460f      	mov	r7, r1
 800fd7c:	462b      	mov	r3, r5
 800fd7e:	ec51 0b19 	vmov	r0, r1, d9
 800fd82:	f7f0 faab 	bl	80002dc <__adddf3>
 800fd86:	4602      	mov	r2, r0
 800fd88:	460b      	mov	r3, r1
 800fd8a:	2000      	movs	r0, #0
 800fd8c:	49bb      	ldr	r1, [pc, #748]	; (801007c <__ieee754_pow+0x76c>)
 800fd8e:	f7f0 fd85 	bl	800089c <__aeabi_ddiv>
 800fd92:	ec41 0b1a 	vmov	d10, r0, r1
 800fd96:	4602      	mov	r2, r0
 800fd98:	460b      	mov	r3, r1
 800fd9a:	4630      	mov	r0, r6
 800fd9c:	4639      	mov	r1, r7
 800fd9e:	f7f0 fc53 	bl	8000648 <__aeabi_dmul>
 800fda2:	2300      	movs	r3, #0
 800fda4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fda8:	9302      	str	r3, [sp, #8]
 800fdaa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fdae:	46ab      	mov	fp, r5
 800fdb0:	106d      	asrs	r5, r5, #1
 800fdb2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fdb6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fdba:	ec41 0b18 	vmov	d8, r0, r1
 800fdbe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	4640      	mov	r0, r8
 800fdc6:	4649      	mov	r1, r9
 800fdc8:	4614      	mov	r4, r2
 800fdca:	461d      	mov	r5, r3
 800fdcc:	f7f0 fc3c 	bl	8000648 <__aeabi_dmul>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	4630      	mov	r0, r6
 800fdd6:	4639      	mov	r1, r7
 800fdd8:	f7f0 fa7e 	bl	80002d8 <__aeabi_dsub>
 800fddc:	ec53 2b19 	vmov	r2, r3, d9
 800fde0:	4606      	mov	r6, r0
 800fde2:	460f      	mov	r7, r1
 800fde4:	4620      	mov	r0, r4
 800fde6:	4629      	mov	r1, r5
 800fde8:	f7f0 fa76 	bl	80002d8 <__aeabi_dsub>
 800fdec:	4602      	mov	r2, r0
 800fdee:	460b      	mov	r3, r1
 800fdf0:	4650      	mov	r0, sl
 800fdf2:	4659      	mov	r1, fp
 800fdf4:	f7f0 fa70 	bl	80002d8 <__aeabi_dsub>
 800fdf8:	4642      	mov	r2, r8
 800fdfa:	464b      	mov	r3, r9
 800fdfc:	f7f0 fc24 	bl	8000648 <__aeabi_dmul>
 800fe00:	4602      	mov	r2, r0
 800fe02:	460b      	mov	r3, r1
 800fe04:	4630      	mov	r0, r6
 800fe06:	4639      	mov	r1, r7
 800fe08:	f7f0 fa66 	bl	80002d8 <__aeabi_dsub>
 800fe0c:	ec53 2b1a 	vmov	r2, r3, d10
 800fe10:	f7f0 fc1a 	bl	8000648 <__aeabi_dmul>
 800fe14:	ec53 2b18 	vmov	r2, r3, d8
 800fe18:	ec41 0b19 	vmov	d9, r0, r1
 800fe1c:	ec51 0b18 	vmov	r0, r1, d8
 800fe20:	f7f0 fc12 	bl	8000648 <__aeabi_dmul>
 800fe24:	a37c      	add	r3, pc, #496	; (adr r3, 8010018 <__ieee754_pow+0x708>)
 800fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2a:	4604      	mov	r4, r0
 800fe2c:	460d      	mov	r5, r1
 800fe2e:	f7f0 fc0b 	bl	8000648 <__aeabi_dmul>
 800fe32:	a37b      	add	r3, pc, #492	; (adr r3, 8010020 <__ieee754_pow+0x710>)
 800fe34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe38:	f7f0 fa50 	bl	80002dc <__adddf3>
 800fe3c:	4622      	mov	r2, r4
 800fe3e:	462b      	mov	r3, r5
 800fe40:	f7f0 fc02 	bl	8000648 <__aeabi_dmul>
 800fe44:	a378      	add	r3, pc, #480	; (adr r3, 8010028 <__ieee754_pow+0x718>)
 800fe46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe4a:	f7f0 fa47 	bl	80002dc <__adddf3>
 800fe4e:	4622      	mov	r2, r4
 800fe50:	462b      	mov	r3, r5
 800fe52:	f7f0 fbf9 	bl	8000648 <__aeabi_dmul>
 800fe56:	a376      	add	r3, pc, #472	; (adr r3, 8010030 <__ieee754_pow+0x720>)
 800fe58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5c:	f7f0 fa3e 	bl	80002dc <__adddf3>
 800fe60:	4622      	mov	r2, r4
 800fe62:	462b      	mov	r3, r5
 800fe64:	f7f0 fbf0 	bl	8000648 <__aeabi_dmul>
 800fe68:	a373      	add	r3, pc, #460	; (adr r3, 8010038 <__ieee754_pow+0x728>)
 800fe6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6e:	f7f0 fa35 	bl	80002dc <__adddf3>
 800fe72:	4622      	mov	r2, r4
 800fe74:	462b      	mov	r3, r5
 800fe76:	f7f0 fbe7 	bl	8000648 <__aeabi_dmul>
 800fe7a:	a371      	add	r3, pc, #452	; (adr r3, 8010040 <__ieee754_pow+0x730>)
 800fe7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe80:	f7f0 fa2c 	bl	80002dc <__adddf3>
 800fe84:	4622      	mov	r2, r4
 800fe86:	4606      	mov	r6, r0
 800fe88:	460f      	mov	r7, r1
 800fe8a:	462b      	mov	r3, r5
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	4629      	mov	r1, r5
 800fe90:	f7f0 fbda 	bl	8000648 <__aeabi_dmul>
 800fe94:	4602      	mov	r2, r0
 800fe96:	460b      	mov	r3, r1
 800fe98:	4630      	mov	r0, r6
 800fe9a:	4639      	mov	r1, r7
 800fe9c:	f7f0 fbd4 	bl	8000648 <__aeabi_dmul>
 800fea0:	4642      	mov	r2, r8
 800fea2:	4604      	mov	r4, r0
 800fea4:	460d      	mov	r5, r1
 800fea6:	464b      	mov	r3, r9
 800fea8:	ec51 0b18 	vmov	r0, r1, d8
 800feac:	f7f0 fa16 	bl	80002dc <__adddf3>
 800feb0:	ec53 2b19 	vmov	r2, r3, d9
 800feb4:	f7f0 fbc8 	bl	8000648 <__aeabi_dmul>
 800feb8:	4622      	mov	r2, r4
 800feba:	462b      	mov	r3, r5
 800febc:	f7f0 fa0e 	bl	80002dc <__adddf3>
 800fec0:	4642      	mov	r2, r8
 800fec2:	4682      	mov	sl, r0
 800fec4:	468b      	mov	fp, r1
 800fec6:	464b      	mov	r3, r9
 800fec8:	4640      	mov	r0, r8
 800feca:	4649      	mov	r1, r9
 800fecc:	f7f0 fbbc 	bl	8000648 <__aeabi_dmul>
 800fed0:	4b6b      	ldr	r3, [pc, #428]	; (8010080 <__ieee754_pow+0x770>)
 800fed2:	2200      	movs	r2, #0
 800fed4:	4606      	mov	r6, r0
 800fed6:	460f      	mov	r7, r1
 800fed8:	f7f0 fa00 	bl	80002dc <__adddf3>
 800fedc:	4652      	mov	r2, sl
 800fede:	465b      	mov	r3, fp
 800fee0:	f7f0 f9fc 	bl	80002dc <__adddf3>
 800fee4:	2000      	movs	r0, #0
 800fee6:	4604      	mov	r4, r0
 800fee8:	460d      	mov	r5, r1
 800feea:	4602      	mov	r2, r0
 800feec:	460b      	mov	r3, r1
 800feee:	4640      	mov	r0, r8
 800fef0:	4649      	mov	r1, r9
 800fef2:	f7f0 fba9 	bl	8000648 <__aeabi_dmul>
 800fef6:	4b62      	ldr	r3, [pc, #392]	; (8010080 <__ieee754_pow+0x770>)
 800fef8:	4680      	mov	r8, r0
 800fefa:	4689      	mov	r9, r1
 800fefc:	2200      	movs	r2, #0
 800fefe:	4620      	mov	r0, r4
 800ff00:	4629      	mov	r1, r5
 800ff02:	f7f0 f9e9 	bl	80002d8 <__aeabi_dsub>
 800ff06:	4632      	mov	r2, r6
 800ff08:	463b      	mov	r3, r7
 800ff0a:	f7f0 f9e5 	bl	80002d8 <__aeabi_dsub>
 800ff0e:	4602      	mov	r2, r0
 800ff10:	460b      	mov	r3, r1
 800ff12:	4650      	mov	r0, sl
 800ff14:	4659      	mov	r1, fp
 800ff16:	f7f0 f9df 	bl	80002d8 <__aeabi_dsub>
 800ff1a:	ec53 2b18 	vmov	r2, r3, d8
 800ff1e:	f7f0 fb93 	bl	8000648 <__aeabi_dmul>
 800ff22:	4622      	mov	r2, r4
 800ff24:	4606      	mov	r6, r0
 800ff26:	460f      	mov	r7, r1
 800ff28:	462b      	mov	r3, r5
 800ff2a:	ec51 0b19 	vmov	r0, r1, d9
 800ff2e:	f7f0 fb8b 	bl	8000648 <__aeabi_dmul>
 800ff32:	4602      	mov	r2, r0
 800ff34:	460b      	mov	r3, r1
 800ff36:	4630      	mov	r0, r6
 800ff38:	4639      	mov	r1, r7
 800ff3a:	f7f0 f9cf 	bl	80002dc <__adddf3>
 800ff3e:	4606      	mov	r6, r0
 800ff40:	460f      	mov	r7, r1
 800ff42:	4602      	mov	r2, r0
 800ff44:	460b      	mov	r3, r1
 800ff46:	4640      	mov	r0, r8
 800ff48:	4649      	mov	r1, r9
 800ff4a:	f7f0 f9c7 	bl	80002dc <__adddf3>
 800ff4e:	a33e      	add	r3, pc, #248	; (adr r3, 8010048 <__ieee754_pow+0x738>)
 800ff50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff54:	2000      	movs	r0, #0
 800ff56:	4604      	mov	r4, r0
 800ff58:	460d      	mov	r5, r1
 800ff5a:	f7f0 fb75 	bl	8000648 <__aeabi_dmul>
 800ff5e:	4642      	mov	r2, r8
 800ff60:	ec41 0b18 	vmov	d8, r0, r1
 800ff64:	464b      	mov	r3, r9
 800ff66:	4620      	mov	r0, r4
 800ff68:	4629      	mov	r1, r5
 800ff6a:	f7f0 f9b5 	bl	80002d8 <__aeabi_dsub>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	460b      	mov	r3, r1
 800ff72:	4630      	mov	r0, r6
 800ff74:	4639      	mov	r1, r7
 800ff76:	f7f0 f9af 	bl	80002d8 <__aeabi_dsub>
 800ff7a:	a335      	add	r3, pc, #212	; (adr r3, 8010050 <__ieee754_pow+0x740>)
 800ff7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff80:	f7f0 fb62 	bl	8000648 <__aeabi_dmul>
 800ff84:	a334      	add	r3, pc, #208	; (adr r3, 8010058 <__ieee754_pow+0x748>)
 800ff86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8a:	4606      	mov	r6, r0
 800ff8c:	460f      	mov	r7, r1
 800ff8e:	4620      	mov	r0, r4
 800ff90:	4629      	mov	r1, r5
 800ff92:	f7f0 fb59 	bl	8000648 <__aeabi_dmul>
 800ff96:	4602      	mov	r2, r0
 800ff98:	460b      	mov	r3, r1
 800ff9a:	4630      	mov	r0, r6
 800ff9c:	4639      	mov	r1, r7
 800ff9e:	f7f0 f99d 	bl	80002dc <__adddf3>
 800ffa2:	9a07      	ldr	r2, [sp, #28]
 800ffa4:	4b37      	ldr	r3, [pc, #220]	; (8010084 <__ieee754_pow+0x774>)
 800ffa6:	4413      	add	r3, r2
 800ffa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffac:	f7f0 f996 	bl	80002dc <__adddf3>
 800ffb0:	4682      	mov	sl, r0
 800ffb2:	9805      	ldr	r0, [sp, #20]
 800ffb4:	468b      	mov	fp, r1
 800ffb6:	f7f0 fadd 	bl	8000574 <__aeabi_i2d>
 800ffba:	9a07      	ldr	r2, [sp, #28]
 800ffbc:	4b32      	ldr	r3, [pc, #200]	; (8010088 <__ieee754_pow+0x778>)
 800ffbe:	4413      	add	r3, r2
 800ffc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ffc4:	4606      	mov	r6, r0
 800ffc6:	460f      	mov	r7, r1
 800ffc8:	4652      	mov	r2, sl
 800ffca:	465b      	mov	r3, fp
 800ffcc:	ec51 0b18 	vmov	r0, r1, d8
 800ffd0:	f7f0 f984 	bl	80002dc <__adddf3>
 800ffd4:	4642      	mov	r2, r8
 800ffd6:	464b      	mov	r3, r9
 800ffd8:	f7f0 f980 	bl	80002dc <__adddf3>
 800ffdc:	4632      	mov	r2, r6
 800ffde:	463b      	mov	r3, r7
 800ffe0:	f7f0 f97c 	bl	80002dc <__adddf3>
 800ffe4:	2000      	movs	r0, #0
 800ffe6:	4632      	mov	r2, r6
 800ffe8:	463b      	mov	r3, r7
 800ffea:	4604      	mov	r4, r0
 800ffec:	460d      	mov	r5, r1
 800ffee:	f7f0 f973 	bl	80002d8 <__aeabi_dsub>
 800fff2:	4642      	mov	r2, r8
 800fff4:	464b      	mov	r3, r9
 800fff6:	f7f0 f96f 	bl	80002d8 <__aeabi_dsub>
 800fffa:	ec53 2b18 	vmov	r2, r3, d8
 800fffe:	f7f0 f96b 	bl	80002d8 <__aeabi_dsub>
 8010002:	4602      	mov	r2, r0
 8010004:	460b      	mov	r3, r1
 8010006:	4650      	mov	r0, sl
 8010008:	4659      	mov	r1, fp
 801000a:	e610      	b.n	800fc2e <__ieee754_pow+0x31e>
 801000c:	2401      	movs	r4, #1
 801000e:	e6a1      	b.n	800fd54 <__ieee754_pow+0x444>
 8010010:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010060 <__ieee754_pow+0x750>
 8010014:	e617      	b.n	800fc46 <__ieee754_pow+0x336>
 8010016:	bf00      	nop
 8010018:	4a454eef 	.word	0x4a454eef
 801001c:	3fca7e28 	.word	0x3fca7e28
 8010020:	93c9db65 	.word	0x93c9db65
 8010024:	3fcd864a 	.word	0x3fcd864a
 8010028:	a91d4101 	.word	0xa91d4101
 801002c:	3fd17460 	.word	0x3fd17460
 8010030:	518f264d 	.word	0x518f264d
 8010034:	3fd55555 	.word	0x3fd55555
 8010038:	db6fabff 	.word	0xdb6fabff
 801003c:	3fdb6db6 	.word	0x3fdb6db6
 8010040:	33333303 	.word	0x33333303
 8010044:	3fe33333 	.word	0x3fe33333
 8010048:	e0000000 	.word	0xe0000000
 801004c:	3feec709 	.word	0x3feec709
 8010050:	dc3a03fd 	.word	0xdc3a03fd
 8010054:	3feec709 	.word	0x3feec709
 8010058:	145b01f5 	.word	0x145b01f5
 801005c:	be3e2fe0 	.word	0xbe3e2fe0
 8010060:	00000000 	.word	0x00000000
 8010064:	3ff00000 	.word	0x3ff00000
 8010068:	7ff00000 	.word	0x7ff00000
 801006c:	43400000 	.word	0x43400000
 8010070:	0003988e 	.word	0x0003988e
 8010074:	000bb679 	.word	0x000bb679
 8010078:	080116a8 	.word	0x080116a8
 801007c:	3ff00000 	.word	0x3ff00000
 8010080:	40080000 	.word	0x40080000
 8010084:	080116c8 	.word	0x080116c8
 8010088:	080116b8 	.word	0x080116b8
 801008c:	a3b5      	add	r3, pc, #724	; (adr r3, 8010364 <__ieee754_pow+0xa54>)
 801008e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010092:	4640      	mov	r0, r8
 8010094:	4649      	mov	r1, r9
 8010096:	f7f0 f921 	bl	80002dc <__adddf3>
 801009a:	4622      	mov	r2, r4
 801009c:	ec41 0b1a 	vmov	d10, r0, r1
 80100a0:	462b      	mov	r3, r5
 80100a2:	4630      	mov	r0, r6
 80100a4:	4639      	mov	r1, r7
 80100a6:	f7f0 f917 	bl	80002d8 <__aeabi_dsub>
 80100aa:	4602      	mov	r2, r0
 80100ac:	460b      	mov	r3, r1
 80100ae:	ec51 0b1a 	vmov	r0, r1, d10
 80100b2:	f7f0 fd59 	bl	8000b68 <__aeabi_dcmpgt>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	f47f ae04 	bne.w	800fcc4 <__ieee754_pow+0x3b4>
 80100bc:	4aa4      	ldr	r2, [pc, #656]	; (8010350 <__ieee754_pow+0xa40>)
 80100be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80100c2:	4293      	cmp	r3, r2
 80100c4:	f340 8108 	ble.w	80102d8 <__ieee754_pow+0x9c8>
 80100c8:	151b      	asrs	r3, r3, #20
 80100ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80100ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80100d2:	fa4a f303 	asr.w	r3, sl, r3
 80100d6:	445b      	add	r3, fp
 80100d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80100dc:	4e9d      	ldr	r6, [pc, #628]	; (8010354 <__ieee754_pow+0xa44>)
 80100de:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80100e2:	4116      	asrs	r6, r2
 80100e4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80100e8:	2000      	movs	r0, #0
 80100ea:	ea23 0106 	bic.w	r1, r3, r6
 80100ee:	f1c2 0214 	rsb	r2, r2, #20
 80100f2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80100f6:	fa4a fa02 	asr.w	sl, sl, r2
 80100fa:	f1bb 0f00 	cmp.w	fp, #0
 80100fe:	4602      	mov	r2, r0
 8010100:	460b      	mov	r3, r1
 8010102:	4620      	mov	r0, r4
 8010104:	4629      	mov	r1, r5
 8010106:	bfb8      	it	lt
 8010108:	f1ca 0a00 	rsblt	sl, sl, #0
 801010c:	f7f0 f8e4 	bl	80002d8 <__aeabi_dsub>
 8010110:	ec41 0b19 	vmov	d9, r0, r1
 8010114:	4642      	mov	r2, r8
 8010116:	464b      	mov	r3, r9
 8010118:	ec51 0b19 	vmov	r0, r1, d9
 801011c:	f7f0 f8de 	bl	80002dc <__adddf3>
 8010120:	a37b      	add	r3, pc, #492	; (adr r3, 8010310 <__ieee754_pow+0xa00>)
 8010122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010126:	2000      	movs	r0, #0
 8010128:	4604      	mov	r4, r0
 801012a:	460d      	mov	r5, r1
 801012c:	f7f0 fa8c 	bl	8000648 <__aeabi_dmul>
 8010130:	ec53 2b19 	vmov	r2, r3, d9
 8010134:	4606      	mov	r6, r0
 8010136:	460f      	mov	r7, r1
 8010138:	4620      	mov	r0, r4
 801013a:	4629      	mov	r1, r5
 801013c:	f7f0 f8cc 	bl	80002d8 <__aeabi_dsub>
 8010140:	4602      	mov	r2, r0
 8010142:	460b      	mov	r3, r1
 8010144:	4640      	mov	r0, r8
 8010146:	4649      	mov	r1, r9
 8010148:	f7f0 f8c6 	bl	80002d8 <__aeabi_dsub>
 801014c:	a372      	add	r3, pc, #456	; (adr r3, 8010318 <__ieee754_pow+0xa08>)
 801014e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010152:	f7f0 fa79 	bl	8000648 <__aeabi_dmul>
 8010156:	a372      	add	r3, pc, #456	; (adr r3, 8010320 <__ieee754_pow+0xa10>)
 8010158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015c:	4680      	mov	r8, r0
 801015e:	4689      	mov	r9, r1
 8010160:	4620      	mov	r0, r4
 8010162:	4629      	mov	r1, r5
 8010164:	f7f0 fa70 	bl	8000648 <__aeabi_dmul>
 8010168:	4602      	mov	r2, r0
 801016a:	460b      	mov	r3, r1
 801016c:	4640      	mov	r0, r8
 801016e:	4649      	mov	r1, r9
 8010170:	f7f0 f8b4 	bl	80002dc <__adddf3>
 8010174:	4604      	mov	r4, r0
 8010176:	460d      	mov	r5, r1
 8010178:	4602      	mov	r2, r0
 801017a:	460b      	mov	r3, r1
 801017c:	4630      	mov	r0, r6
 801017e:	4639      	mov	r1, r7
 8010180:	f7f0 f8ac 	bl	80002dc <__adddf3>
 8010184:	4632      	mov	r2, r6
 8010186:	463b      	mov	r3, r7
 8010188:	4680      	mov	r8, r0
 801018a:	4689      	mov	r9, r1
 801018c:	f7f0 f8a4 	bl	80002d8 <__aeabi_dsub>
 8010190:	4602      	mov	r2, r0
 8010192:	460b      	mov	r3, r1
 8010194:	4620      	mov	r0, r4
 8010196:	4629      	mov	r1, r5
 8010198:	f7f0 f89e 	bl	80002d8 <__aeabi_dsub>
 801019c:	4642      	mov	r2, r8
 801019e:	4606      	mov	r6, r0
 80101a0:	460f      	mov	r7, r1
 80101a2:	464b      	mov	r3, r9
 80101a4:	4640      	mov	r0, r8
 80101a6:	4649      	mov	r1, r9
 80101a8:	f7f0 fa4e 	bl	8000648 <__aeabi_dmul>
 80101ac:	a35e      	add	r3, pc, #376	; (adr r3, 8010328 <__ieee754_pow+0xa18>)
 80101ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b2:	4604      	mov	r4, r0
 80101b4:	460d      	mov	r5, r1
 80101b6:	f7f0 fa47 	bl	8000648 <__aeabi_dmul>
 80101ba:	a35d      	add	r3, pc, #372	; (adr r3, 8010330 <__ieee754_pow+0xa20>)
 80101bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c0:	f7f0 f88a 	bl	80002d8 <__aeabi_dsub>
 80101c4:	4622      	mov	r2, r4
 80101c6:	462b      	mov	r3, r5
 80101c8:	f7f0 fa3e 	bl	8000648 <__aeabi_dmul>
 80101cc:	a35a      	add	r3, pc, #360	; (adr r3, 8010338 <__ieee754_pow+0xa28>)
 80101ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d2:	f7f0 f883 	bl	80002dc <__adddf3>
 80101d6:	4622      	mov	r2, r4
 80101d8:	462b      	mov	r3, r5
 80101da:	f7f0 fa35 	bl	8000648 <__aeabi_dmul>
 80101de:	a358      	add	r3, pc, #352	; (adr r3, 8010340 <__ieee754_pow+0xa30>)
 80101e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101e4:	f7f0 f878 	bl	80002d8 <__aeabi_dsub>
 80101e8:	4622      	mov	r2, r4
 80101ea:	462b      	mov	r3, r5
 80101ec:	f7f0 fa2c 	bl	8000648 <__aeabi_dmul>
 80101f0:	a355      	add	r3, pc, #340	; (adr r3, 8010348 <__ieee754_pow+0xa38>)
 80101f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f6:	f7f0 f871 	bl	80002dc <__adddf3>
 80101fa:	4622      	mov	r2, r4
 80101fc:	462b      	mov	r3, r5
 80101fe:	f7f0 fa23 	bl	8000648 <__aeabi_dmul>
 8010202:	4602      	mov	r2, r0
 8010204:	460b      	mov	r3, r1
 8010206:	4640      	mov	r0, r8
 8010208:	4649      	mov	r1, r9
 801020a:	f7f0 f865 	bl	80002d8 <__aeabi_dsub>
 801020e:	4604      	mov	r4, r0
 8010210:	460d      	mov	r5, r1
 8010212:	4602      	mov	r2, r0
 8010214:	460b      	mov	r3, r1
 8010216:	4640      	mov	r0, r8
 8010218:	4649      	mov	r1, r9
 801021a:	f7f0 fa15 	bl	8000648 <__aeabi_dmul>
 801021e:	2200      	movs	r2, #0
 8010220:	ec41 0b19 	vmov	d9, r0, r1
 8010224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010228:	4620      	mov	r0, r4
 801022a:	4629      	mov	r1, r5
 801022c:	f7f0 f854 	bl	80002d8 <__aeabi_dsub>
 8010230:	4602      	mov	r2, r0
 8010232:	460b      	mov	r3, r1
 8010234:	ec51 0b19 	vmov	r0, r1, d9
 8010238:	f7f0 fb30 	bl	800089c <__aeabi_ddiv>
 801023c:	4632      	mov	r2, r6
 801023e:	4604      	mov	r4, r0
 8010240:	460d      	mov	r5, r1
 8010242:	463b      	mov	r3, r7
 8010244:	4640      	mov	r0, r8
 8010246:	4649      	mov	r1, r9
 8010248:	f7f0 f9fe 	bl	8000648 <__aeabi_dmul>
 801024c:	4632      	mov	r2, r6
 801024e:	463b      	mov	r3, r7
 8010250:	f7f0 f844 	bl	80002dc <__adddf3>
 8010254:	4602      	mov	r2, r0
 8010256:	460b      	mov	r3, r1
 8010258:	4620      	mov	r0, r4
 801025a:	4629      	mov	r1, r5
 801025c:	f7f0 f83c 	bl	80002d8 <__aeabi_dsub>
 8010260:	4642      	mov	r2, r8
 8010262:	464b      	mov	r3, r9
 8010264:	f7f0 f838 	bl	80002d8 <__aeabi_dsub>
 8010268:	460b      	mov	r3, r1
 801026a:	4602      	mov	r2, r0
 801026c:	493a      	ldr	r1, [pc, #232]	; (8010358 <__ieee754_pow+0xa48>)
 801026e:	2000      	movs	r0, #0
 8010270:	f7f0 f832 	bl	80002d8 <__aeabi_dsub>
 8010274:	ec41 0b10 	vmov	d0, r0, r1
 8010278:	ee10 3a90 	vmov	r3, s1
 801027c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010284:	da2b      	bge.n	80102de <__ieee754_pow+0x9ce>
 8010286:	4650      	mov	r0, sl
 8010288:	f000 fc5a 	bl	8010b40 <scalbn>
 801028c:	ec51 0b10 	vmov	r0, r1, d0
 8010290:	ec53 2b18 	vmov	r2, r3, d8
 8010294:	f7ff bbed 	b.w	800fa72 <__ieee754_pow+0x162>
 8010298:	4b30      	ldr	r3, [pc, #192]	; (801035c <__ieee754_pow+0xa4c>)
 801029a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801029e:	429e      	cmp	r6, r3
 80102a0:	f77f af0c 	ble.w	80100bc <__ieee754_pow+0x7ac>
 80102a4:	4b2e      	ldr	r3, [pc, #184]	; (8010360 <__ieee754_pow+0xa50>)
 80102a6:	440b      	add	r3, r1
 80102a8:	4303      	orrs	r3, r0
 80102aa:	d009      	beq.n	80102c0 <__ieee754_pow+0x9b0>
 80102ac:	ec51 0b18 	vmov	r0, r1, d8
 80102b0:	2200      	movs	r2, #0
 80102b2:	2300      	movs	r3, #0
 80102b4:	f7f0 fc3a 	bl	8000b2c <__aeabi_dcmplt>
 80102b8:	3800      	subs	r0, #0
 80102ba:	bf18      	it	ne
 80102bc:	2001      	movne	r0, #1
 80102be:	e447      	b.n	800fb50 <__ieee754_pow+0x240>
 80102c0:	4622      	mov	r2, r4
 80102c2:	462b      	mov	r3, r5
 80102c4:	f7f0 f808 	bl	80002d8 <__aeabi_dsub>
 80102c8:	4642      	mov	r2, r8
 80102ca:	464b      	mov	r3, r9
 80102cc:	f7f0 fc42 	bl	8000b54 <__aeabi_dcmpge>
 80102d0:	2800      	cmp	r0, #0
 80102d2:	f43f aef3 	beq.w	80100bc <__ieee754_pow+0x7ac>
 80102d6:	e7e9      	b.n	80102ac <__ieee754_pow+0x99c>
 80102d8:	f04f 0a00 	mov.w	sl, #0
 80102dc:	e71a      	b.n	8010114 <__ieee754_pow+0x804>
 80102de:	ec51 0b10 	vmov	r0, r1, d0
 80102e2:	4619      	mov	r1, r3
 80102e4:	e7d4      	b.n	8010290 <__ieee754_pow+0x980>
 80102e6:	491c      	ldr	r1, [pc, #112]	; (8010358 <__ieee754_pow+0xa48>)
 80102e8:	2000      	movs	r0, #0
 80102ea:	f7ff bb30 	b.w	800f94e <__ieee754_pow+0x3e>
 80102ee:	2000      	movs	r0, #0
 80102f0:	2100      	movs	r1, #0
 80102f2:	f7ff bb2c 	b.w	800f94e <__ieee754_pow+0x3e>
 80102f6:	4630      	mov	r0, r6
 80102f8:	4639      	mov	r1, r7
 80102fa:	f7ff bb28 	b.w	800f94e <__ieee754_pow+0x3e>
 80102fe:	9204      	str	r2, [sp, #16]
 8010300:	f7ff bb7a 	b.w	800f9f8 <__ieee754_pow+0xe8>
 8010304:	2300      	movs	r3, #0
 8010306:	f7ff bb64 	b.w	800f9d2 <__ieee754_pow+0xc2>
 801030a:	bf00      	nop
 801030c:	f3af 8000 	nop.w
 8010310:	00000000 	.word	0x00000000
 8010314:	3fe62e43 	.word	0x3fe62e43
 8010318:	fefa39ef 	.word	0xfefa39ef
 801031c:	3fe62e42 	.word	0x3fe62e42
 8010320:	0ca86c39 	.word	0x0ca86c39
 8010324:	be205c61 	.word	0xbe205c61
 8010328:	72bea4d0 	.word	0x72bea4d0
 801032c:	3e663769 	.word	0x3e663769
 8010330:	c5d26bf1 	.word	0xc5d26bf1
 8010334:	3ebbbd41 	.word	0x3ebbbd41
 8010338:	af25de2c 	.word	0xaf25de2c
 801033c:	3f11566a 	.word	0x3f11566a
 8010340:	16bebd93 	.word	0x16bebd93
 8010344:	3f66c16c 	.word	0x3f66c16c
 8010348:	5555553e 	.word	0x5555553e
 801034c:	3fc55555 	.word	0x3fc55555
 8010350:	3fe00000 	.word	0x3fe00000
 8010354:	000fffff 	.word	0x000fffff
 8010358:	3ff00000 	.word	0x3ff00000
 801035c:	4090cbff 	.word	0x4090cbff
 8010360:	3f6f3400 	.word	0x3f6f3400
 8010364:	652b82fe 	.word	0x652b82fe
 8010368:	3c971547 	.word	0x3c971547

0801036c <__ieee754_sqrt>:
 801036c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010370:	ec55 4b10 	vmov	r4, r5, d0
 8010374:	4e55      	ldr	r6, [pc, #340]	; (80104cc <__ieee754_sqrt+0x160>)
 8010376:	43ae      	bics	r6, r5
 8010378:	ee10 0a10 	vmov	r0, s0
 801037c:	ee10 3a10 	vmov	r3, s0
 8010380:	462a      	mov	r2, r5
 8010382:	4629      	mov	r1, r5
 8010384:	d110      	bne.n	80103a8 <__ieee754_sqrt+0x3c>
 8010386:	ee10 2a10 	vmov	r2, s0
 801038a:	462b      	mov	r3, r5
 801038c:	f7f0 f95c 	bl	8000648 <__aeabi_dmul>
 8010390:	4602      	mov	r2, r0
 8010392:	460b      	mov	r3, r1
 8010394:	4620      	mov	r0, r4
 8010396:	4629      	mov	r1, r5
 8010398:	f7ef ffa0 	bl	80002dc <__adddf3>
 801039c:	4604      	mov	r4, r0
 801039e:	460d      	mov	r5, r1
 80103a0:	ec45 4b10 	vmov	d0, r4, r5
 80103a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103a8:	2d00      	cmp	r5, #0
 80103aa:	dc10      	bgt.n	80103ce <__ieee754_sqrt+0x62>
 80103ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80103b0:	4330      	orrs	r0, r6
 80103b2:	d0f5      	beq.n	80103a0 <__ieee754_sqrt+0x34>
 80103b4:	b15d      	cbz	r5, 80103ce <__ieee754_sqrt+0x62>
 80103b6:	ee10 2a10 	vmov	r2, s0
 80103ba:	462b      	mov	r3, r5
 80103bc:	ee10 0a10 	vmov	r0, s0
 80103c0:	f7ef ff8a 	bl	80002d8 <__aeabi_dsub>
 80103c4:	4602      	mov	r2, r0
 80103c6:	460b      	mov	r3, r1
 80103c8:	f7f0 fa68 	bl	800089c <__aeabi_ddiv>
 80103cc:	e7e6      	b.n	801039c <__ieee754_sqrt+0x30>
 80103ce:	1512      	asrs	r2, r2, #20
 80103d0:	d074      	beq.n	80104bc <__ieee754_sqrt+0x150>
 80103d2:	07d4      	lsls	r4, r2, #31
 80103d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80103d8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80103dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80103e0:	bf5e      	ittt	pl
 80103e2:	0fda      	lsrpl	r2, r3, #31
 80103e4:	005b      	lslpl	r3, r3, #1
 80103e6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80103ea:	2400      	movs	r4, #0
 80103ec:	0fda      	lsrs	r2, r3, #31
 80103ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80103f2:	107f      	asrs	r7, r7, #1
 80103f4:	005b      	lsls	r3, r3, #1
 80103f6:	2516      	movs	r5, #22
 80103f8:	4620      	mov	r0, r4
 80103fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80103fe:	1886      	adds	r6, r0, r2
 8010400:	428e      	cmp	r6, r1
 8010402:	bfde      	ittt	le
 8010404:	1b89      	suble	r1, r1, r6
 8010406:	18b0      	addle	r0, r6, r2
 8010408:	18a4      	addle	r4, r4, r2
 801040a:	0049      	lsls	r1, r1, #1
 801040c:	3d01      	subs	r5, #1
 801040e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010412:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010416:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801041a:	d1f0      	bne.n	80103fe <__ieee754_sqrt+0x92>
 801041c:	462a      	mov	r2, r5
 801041e:	f04f 0e20 	mov.w	lr, #32
 8010422:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010426:	4281      	cmp	r1, r0
 8010428:	eb06 0c05 	add.w	ip, r6, r5
 801042c:	dc02      	bgt.n	8010434 <__ieee754_sqrt+0xc8>
 801042e:	d113      	bne.n	8010458 <__ieee754_sqrt+0xec>
 8010430:	459c      	cmp	ip, r3
 8010432:	d811      	bhi.n	8010458 <__ieee754_sqrt+0xec>
 8010434:	f1bc 0f00 	cmp.w	ip, #0
 8010438:	eb0c 0506 	add.w	r5, ip, r6
 801043c:	da43      	bge.n	80104c6 <__ieee754_sqrt+0x15a>
 801043e:	2d00      	cmp	r5, #0
 8010440:	db41      	blt.n	80104c6 <__ieee754_sqrt+0x15a>
 8010442:	f100 0801 	add.w	r8, r0, #1
 8010446:	1a09      	subs	r1, r1, r0
 8010448:	459c      	cmp	ip, r3
 801044a:	bf88      	it	hi
 801044c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010450:	eba3 030c 	sub.w	r3, r3, ip
 8010454:	4432      	add	r2, r6
 8010456:	4640      	mov	r0, r8
 8010458:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801045c:	f1be 0e01 	subs.w	lr, lr, #1
 8010460:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010464:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010468:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801046c:	d1db      	bne.n	8010426 <__ieee754_sqrt+0xba>
 801046e:	430b      	orrs	r3, r1
 8010470:	d006      	beq.n	8010480 <__ieee754_sqrt+0x114>
 8010472:	1c50      	adds	r0, r2, #1
 8010474:	bf13      	iteet	ne
 8010476:	3201      	addne	r2, #1
 8010478:	3401      	addeq	r4, #1
 801047a:	4672      	moveq	r2, lr
 801047c:	f022 0201 	bicne.w	r2, r2, #1
 8010480:	1063      	asrs	r3, r4, #1
 8010482:	0852      	lsrs	r2, r2, #1
 8010484:	07e1      	lsls	r1, r4, #31
 8010486:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801048a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801048e:	bf48      	it	mi
 8010490:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010494:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010498:	4614      	mov	r4, r2
 801049a:	e781      	b.n	80103a0 <__ieee754_sqrt+0x34>
 801049c:	0ad9      	lsrs	r1, r3, #11
 801049e:	3815      	subs	r0, #21
 80104a0:	055b      	lsls	r3, r3, #21
 80104a2:	2900      	cmp	r1, #0
 80104a4:	d0fa      	beq.n	801049c <__ieee754_sqrt+0x130>
 80104a6:	02cd      	lsls	r5, r1, #11
 80104a8:	d50a      	bpl.n	80104c0 <__ieee754_sqrt+0x154>
 80104aa:	f1c2 0420 	rsb	r4, r2, #32
 80104ae:	fa23 f404 	lsr.w	r4, r3, r4
 80104b2:	1e55      	subs	r5, r2, #1
 80104b4:	4093      	lsls	r3, r2
 80104b6:	4321      	orrs	r1, r4
 80104b8:	1b42      	subs	r2, r0, r5
 80104ba:	e78a      	b.n	80103d2 <__ieee754_sqrt+0x66>
 80104bc:	4610      	mov	r0, r2
 80104be:	e7f0      	b.n	80104a2 <__ieee754_sqrt+0x136>
 80104c0:	0049      	lsls	r1, r1, #1
 80104c2:	3201      	adds	r2, #1
 80104c4:	e7ef      	b.n	80104a6 <__ieee754_sqrt+0x13a>
 80104c6:	4680      	mov	r8, r0
 80104c8:	e7bd      	b.n	8010446 <__ieee754_sqrt+0xda>
 80104ca:	bf00      	nop
 80104cc:	7ff00000 	.word	0x7ff00000

080104d0 <__ieee754_powf>:
 80104d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104d4:	ee10 4a90 	vmov	r4, s1
 80104d8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80104dc:	ed2d 8b02 	vpush	{d8}
 80104e0:	ee10 6a10 	vmov	r6, s0
 80104e4:	eeb0 8a40 	vmov.f32	s16, s0
 80104e8:	eef0 8a60 	vmov.f32	s17, s1
 80104ec:	d10c      	bne.n	8010508 <__ieee754_powf+0x38>
 80104ee:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80104f2:	0076      	lsls	r6, r6, #1
 80104f4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 80104f8:	f240 8296 	bls.w	8010a28 <__ieee754_powf+0x558>
 80104fc:	ee38 0a28 	vadd.f32	s0, s16, s17
 8010500:	ecbd 8b02 	vpop	{d8}
 8010504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010508:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801050c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8010510:	dcf4      	bgt.n	80104fc <__ieee754_powf+0x2c>
 8010512:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8010516:	dd08      	ble.n	801052a <__ieee754_powf+0x5a>
 8010518:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 801051c:	d1ee      	bne.n	80104fc <__ieee754_powf+0x2c>
 801051e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8010522:	0064      	lsls	r4, r4, #1
 8010524:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8010528:	e7e6      	b.n	80104f8 <__ieee754_powf+0x28>
 801052a:	2e00      	cmp	r6, #0
 801052c:	da20      	bge.n	8010570 <__ieee754_powf+0xa0>
 801052e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8010532:	da2d      	bge.n	8010590 <__ieee754_powf+0xc0>
 8010534:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8010538:	f2c0 827f 	blt.w	8010a3a <__ieee754_powf+0x56a>
 801053c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8010540:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8010544:	fa48 f703 	asr.w	r7, r8, r3
 8010548:	fa07 f303 	lsl.w	r3, r7, r3
 801054c:	4543      	cmp	r3, r8
 801054e:	f040 8274 	bne.w	8010a3a <__ieee754_powf+0x56a>
 8010552:	f007 0701 	and.w	r7, r7, #1
 8010556:	f1c7 0702 	rsb	r7, r7, #2
 801055a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801055e:	d11f      	bne.n	80105a0 <__ieee754_powf+0xd0>
 8010560:	2c00      	cmp	r4, #0
 8010562:	f280 8267 	bge.w	8010a34 <__ieee754_powf+0x564>
 8010566:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801056a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801056e:	e7c7      	b.n	8010500 <__ieee754_powf+0x30>
 8010570:	2700      	movs	r7, #0
 8010572:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8010576:	d1f0      	bne.n	801055a <__ieee754_powf+0x8a>
 8010578:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 801057c:	f000 8254 	beq.w	8010a28 <__ieee754_powf+0x558>
 8010580:	dd08      	ble.n	8010594 <__ieee754_powf+0xc4>
 8010582:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 801088c <__ieee754_powf+0x3bc>
 8010586:	2c00      	cmp	r4, #0
 8010588:	bfa8      	it	ge
 801058a:	eeb0 0a68 	vmovge.f32	s0, s17
 801058e:	e7b7      	b.n	8010500 <__ieee754_powf+0x30>
 8010590:	2702      	movs	r7, #2
 8010592:	e7ee      	b.n	8010572 <__ieee754_powf+0xa2>
 8010594:	2c00      	cmp	r4, #0
 8010596:	f280 824a 	bge.w	8010a2e <__ieee754_powf+0x55e>
 801059a:	eeb1 0a68 	vneg.f32	s0, s17
 801059e:	e7af      	b.n	8010500 <__ieee754_powf+0x30>
 80105a0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80105a4:	d102      	bne.n	80105ac <__ieee754_powf+0xdc>
 80105a6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80105aa:	e7a9      	b.n	8010500 <__ieee754_powf+0x30>
 80105ac:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80105b0:	eeb0 0a48 	vmov.f32	s0, s16
 80105b4:	d107      	bne.n	80105c6 <__ieee754_powf+0xf6>
 80105b6:	2e00      	cmp	r6, #0
 80105b8:	db05      	blt.n	80105c6 <__ieee754_powf+0xf6>
 80105ba:	ecbd 8b02 	vpop	{d8}
 80105be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105c2:	f000 ba53 	b.w	8010a6c <__ieee754_sqrtf>
 80105c6:	f000 fb41 	bl	8010c4c <fabsf>
 80105ca:	b125      	cbz	r5, 80105d6 <__ieee754_powf+0x106>
 80105cc:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80105d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80105d4:	d116      	bne.n	8010604 <__ieee754_powf+0x134>
 80105d6:	2c00      	cmp	r4, #0
 80105d8:	bfbc      	itt	lt
 80105da:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80105de:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80105e2:	2e00      	cmp	r6, #0
 80105e4:	da8c      	bge.n	8010500 <__ieee754_powf+0x30>
 80105e6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80105ea:	ea55 0307 	orrs.w	r3, r5, r7
 80105ee:	d104      	bne.n	80105fa <__ieee754_powf+0x12a>
 80105f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80105f4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80105f8:	e782      	b.n	8010500 <__ieee754_powf+0x30>
 80105fa:	2f01      	cmp	r7, #1
 80105fc:	d180      	bne.n	8010500 <__ieee754_powf+0x30>
 80105fe:	eeb1 0a40 	vneg.f32	s0, s0
 8010602:	e77d      	b.n	8010500 <__ieee754_powf+0x30>
 8010604:	0ff0      	lsrs	r0, r6, #31
 8010606:	3801      	subs	r0, #1
 8010608:	ea57 0300 	orrs.w	r3, r7, r0
 801060c:	d104      	bne.n	8010618 <__ieee754_powf+0x148>
 801060e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010612:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010616:	e773      	b.n	8010500 <__ieee754_powf+0x30>
 8010618:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801061c:	dd74      	ble.n	8010708 <__ieee754_powf+0x238>
 801061e:	4b9c      	ldr	r3, [pc, #624]	; (8010890 <__ieee754_powf+0x3c0>)
 8010620:	429d      	cmp	r5, r3
 8010622:	dc08      	bgt.n	8010636 <__ieee754_powf+0x166>
 8010624:	2c00      	cmp	r4, #0
 8010626:	da0b      	bge.n	8010640 <__ieee754_powf+0x170>
 8010628:	2000      	movs	r0, #0
 801062a:	ecbd 8b02 	vpop	{d8}
 801062e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010632:	f000 ba6b 	b.w	8010b0c <__math_oflowf>
 8010636:	4b97      	ldr	r3, [pc, #604]	; (8010894 <__ieee754_powf+0x3c4>)
 8010638:	429d      	cmp	r5, r3
 801063a:	dd08      	ble.n	801064e <__ieee754_powf+0x17e>
 801063c:	2c00      	cmp	r4, #0
 801063e:	dcf3      	bgt.n	8010628 <__ieee754_powf+0x158>
 8010640:	2000      	movs	r0, #0
 8010642:	ecbd 8b02 	vpop	{d8}
 8010646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801064a:	f000 ba59 	b.w	8010b00 <__math_uflowf>
 801064e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010652:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010656:	eddf 6a90 	vldr	s13, [pc, #576]	; 8010898 <__ieee754_powf+0x3c8>
 801065a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801065e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010662:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010666:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801066a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801066e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010672:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801089c <__ieee754_powf+0x3cc>
 8010676:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801067a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80108a0 <__ieee754_powf+0x3d0>
 801067e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010682:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80108a4 <__ieee754_powf+0x3d4>
 8010686:	eef0 6a67 	vmov.f32	s13, s15
 801068a:	eee0 6a07 	vfma.f32	s13, s0, s14
 801068e:	ee16 3a90 	vmov	r3, s13
 8010692:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010696:	f023 030f 	bic.w	r3, r3, #15
 801069a:	ee00 3a90 	vmov	s1, r3
 801069e:	eee0 0a47 	vfms.f32	s1, s0, s14
 80106a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80106a6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80106aa:	f024 040f 	bic.w	r4, r4, #15
 80106ae:	ee07 4a10 	vmov	s14, r4
 80106b2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80106b6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80106ba:	ee07 3a90 	vmov	s15, r3
 80106be:	eee7 0a27 	vfma.f32	s1, s14, s15
 80106c2:	3f01      	subs	r7, #1
 80106c4:	ea57 0200 	orrs.w	r2, r7, r0
 80106c8:	ee07 4a10 	vmov	s14, r4
 80106cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80106d0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80106d4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80106d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80106dc:	ee17 4a10 	vmov	r4, s14
 80106e0:	bf08      	it	eq
 80106e2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80106e6:	2c00      	cmp	r4, #0
 80106e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80106ec:	f340 817e 	ble.w	80109ec <__ieee754_powf+0x51c>
 80106f0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80106f4:	f340 80f8 	ble.w	80108e8 <__ieee754_powf+0x418>
 80106f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80106fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010700:	bf4c      	ite	mi
 8010702:	2001      	movmi	r0, #1
 8010704:	2000      	movpl	r0, #0
 8010706:	e790      	b.n	801062a <__ieee754_powf+0x15a>
 8010708:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 801070c:	bf01      	itttt	eq
 801070e:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80108a8 <__ieee754_powf+0x3d8>
 8010712:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8010716:	f06f 0217 	mvneq.w	r2, #23
 801071a:	ee17 5a90 	vmoveq	r5, s15
 801071e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010722:	bf18      	it	ne
 8010724:	2200      	movne	r2, #0
 8010726:	3b7f      	subs	r3, #127	; 0x7f
 8010728:	4413      	add	r3, r2
 801072a:	4a60      	ldr	r2, [pc, #384]	; (80108ac <__ieee754_powf+0x3dc>)
 801072c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8010730:	4295      	cmp	r5, r2
 8010732:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8010736:	dd06      	ble.n	8010746 <__ieee754_powf+0x276>
 8010738:	4a5d      	ldr	r2, [pc, #372]	; (80108b0 <__ieee754_powf+0x3e0>)
 801073a:	4295      	cmp	r5, r2
 801073c:	f340 80a4 	ble.w	8010888 <__ieee754_powf+0x3b8>
 8010740:	3301      	adds	r3, #1
 8010742:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010746:	2500      	movs	r5, #0
 8010748:	4a5a      	ldr	r2, [pc, #360]	; (80108b4 <__ieee754_powf+0x3e4>)
 801074a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 801074e:	ee07 1a90 	vmov	s15, r1
 8010752:	ed92 7a00 	vldr	s14, [r2]
 8010756:	4a58      	ldr	r2, [pc, #352]	; (80108b8 <__ieee754_powf+0x3e8>)
 8010758:	ee37 6a27 	vadd.f32	s12, s14, s15
 801075c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8010760:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8010764:	1049      	asrs	r1, r1, #1
 8010766:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801076a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801076e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8010772:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8010776:	ee06 1a10 	vmov	s12, r1
 801077a:	ee65 4a26 	vmul.f32	s9, s10, s13
 801077e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8010782:	ee14 6a90 	vmov	r6, s9
 8010786:	4016      	ands	r6, r2
 8010788:	ee05 6a90 	vmov	s11, r6
 801078c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8010790:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010794:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80108bc <__ieee754_powf+0x3ec>
 8010798:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801079c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80107a0:	ee25 6a26 	vmul.f32	s12, s10, s13
 80107a4:	eddf 6a46 	vldr	s13, [pc, #280]	; 80108c0 <__ieee754_powf+0x3f0>
 80107a8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80107ac:	eddf 6a45 	vldr	s13, [pc, #276]	; 80108c4 <__ieee754_powf+0x3f4>
 80107b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80107b4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010898 <__ieee754_powf+0x3c8>
 80107b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80107bc:	eddf 6a42 	vldr	s13, [pc, #264]	; 80108c8 <__ieee754_powf+0x3f8>
 80107c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80107c4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80108cc <__ieee754_powf+0x3fc>
 80107c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80107cc:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80107d0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80107d4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80107d8:	eee5 6a07 	vfma.f32	s13, s10, s14
 80107dc:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80107e0:	eef0 7a45 	vmov.f32	s15, s10
 80107e4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80107e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80107ec:	ee17 1a90 	vmov	r1, s15
 80107f0:	4011      	ands	r1, r2
 80107f2:	ee07 1a90 	vmov	s15, r1
 80107f6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80107fa:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80107fe:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010802:	ee27 7a24 	vmul.f32	s14, s14, s9
 8010806:	eea6 7a27 	vfma.f32	s14, s12, s15
 801080a:	eeb0 6a47 	vmov.f32	s12, s14
 801080e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8010812:	ee16 1a10 	vmov	r1, s12
 8010816:	4011      	ands	r1, r2
 8010818:	ee06 1a90 	vmov	s13, r1
 801081c:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8010820:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80108d0 <__ieee754_powf+0x400>
 8010824:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80108d4 <__ieee754_powf+0x404>
 8010828:	ee37 7a66 	vsub.f32	s14, s14, s13
 801082c:	ee06 1a10 	vmov	s12, r1
 8010830:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010834:	eddf 7a28 	vldr	s15, [pc, #160]	; 80108d8 <__ieee754_powf+0x408>
 8010838:	4928      	ldr	r1, [pc, #160]	; (80108dc <__ieee754_powf+0x40c>)
 801083a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801083e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8010842:	edd1 7a00 	vldr	s15, [r1]
 8010846:	ee37 7a27 	vadd.f32	s14, s14, s15
 801084a:	ee07 3a90 	vmov	s15, r3
 801084e:	4b24      	ldr	r3, [pc, #144]	; (80108e0 <__ieee754_powf+0x410>)
 8010850:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010854:	eef0 7a47 	vmov.f32	s15, s14
 8010858:	eee6 7a25 	vfma.f32	s15, s12, s11
 801085c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8010860:	edd5 0a00 	vldr	s1, [r5]
 8010864:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010868:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801086c:	ee17 3a90 	vmov	r3, s15
 8010870:	4013      	ands	r3, r2
 8010872:	ee07 3a90 	vmov	s15, r3
 8010876:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801087a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801087e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8010882:	ee77 7a66 	vsub.f32	s15, s14, s13
 8010886:	e70e      	b.n	80106a6 <__ieee754_powf+0x1d6>
 8010888:	2501      	movs	r5, #1
 801088a:	e75d      	b.n	8010748 <__ieee754_powf+0x278>
 801088c:	00000000 	.word	0x00000000
 8010890:	3f7ffff3 	.word	0x3f7ffff3
 8010894:	3f800007 	.word	0x3f800007
 8010898:	3eaaaaab 	.word	0x3eaaaaab
 801089c:	3fb8aa3b 	.word	0x3fb8aa3b
 80108a0:	36eca570 	.word	0x36eca570
 80108a4:	3fb8aa00 	.word	0x3fb8aa00
 80108a8:	4b800000 	.word	0x4b800000
 80108ac:	001cc471 	.word	0x001cc471
 80108b0:	005db3d6 	.word	0x005db3d6
 80108b4:	080116d8 	.word	0x080116d8
 80108b8:	fffff000 	.word	0xfffff000
 80108bc:	3e6c3255 	.word	0x3e6c3255
 80108c0:	3e53f142 	.word	0x3e53f142
 80108c4:	3e8ba305 	.word	0x3e8ba305
 80108c8:	3edb6db7 	.word	0x3edb6db7
 80108cc:	3f19999a 	.word	0x3f19999a
 80108d0:	3f76384f 	.word	0x3f76384f
 80108d4:	3f763800 	.word	0x3f763800
 80108d8:	369dc3a0 	.word	0x369dc3a0
 80108dc:	080116e8 	.word	0x080116e8
 80108e0:	080116e0 	.word	0x080116e0
 80108e4:	3338aa3c 	.word	0x3338aa3c
 80108e8:	f040 8095 	bne.w	8010a16 <__ieee754_powf+0x546>
 80108ec:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80108e4 <__ieee754_powf+0x414>
 80108f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80108f4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80108f8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80108fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010900:	f73f aefa 	bgt.w	80106f8 <__ieee754_powf+0x228>
 8010904:	15db      	asrs	r3, r3, #23
 8010906:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801090a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801090e:	4103      	asrs	r3, r0
 8010910:	4423      	add	r3, r4
 8010912:	494b      	ldr	r1, [pc, #300]	; (8010a40 <__ieee754_powf+0x570>)
 8010914:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010918:	3a7f      	subs	r2, #127	; 0x7f
 801091a:	4111      	asrs	r1, r2
 801091c:	ea23 0101 	bic.w	r1, r3, r1
 8010920:	ee07 1a10 	vmov	s14, r1
 8010924:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8010928:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801092c:	f1c2 0217 	rsb	r2, r2, #23
 8010930:	4110      	asrs	r0, r2
 8010932:	2c00      	cmp	r4, #0
 8010934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010938:	bfb8      	it	lt
 801093a:	4240      	neglt	r0, r0
 801093c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8010940:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8010a44 <__ieee754_powf+0x574>
 8010944:	eddf 6a40 	vldr	s13, [pc, #256]	; 8010a48 <__ieee754_powf+0x578>
 8010948:	ee17 3a10 	vmov	r3, s14
 801094c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010950:	f023 030f 	bic.w	r3, r3, #15
 8010954:	ee07 3a10 	vmov	s14, r3
 8010958:	ee77 7a67 	vsub.f32	s15, s14, s15
 801095c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8010960:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010964:	eddf 7a39 	vldr	s15, [pc, #228]	; 8010a4c <__ieee754_powf+0x57c>
 8010968:	eea0 0aa7 	vfma.f32	s0, s1, s15
 801096c:	eef0 7a40 	vmov.f32	s15, s0
 8010970:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010974:	eeb0 6a67 	vmov.f32	s12, s15
 8010978:	eea7 6a66 	vfms.f32	s12, s14, s13
 801097c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010980:	ee30 0a46 	vsub.f32	s0, s0, s12
 8010984:	eddf 6a32 	vldr	s13, [pc, #200]	; 8010a50 <__ieee754_powf+0x580>
 8010988:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8010a54 <__ieee754_powf+0x584>
 801098c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8010990:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8010a58 <__ieee754_powf+0x588>
 8010994:	eea6 6a87 	vfma.f32	s12, s13, s14
 8010998:	eddf 6a30 	vldr	s13, [pc, #192]	; 8010a5c <__ieee754_powf+0x58c>
 801099c:	eee6 6a07 	vfma.f32	s13, s12, s14
 80109a0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8010a60 <__ieee754_powf+0x590>
 80109a4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80109a8:	eef0 6a67 	vmov.f32	s13, s15
 80109ac:	eee6 6a47 	vfms.f32	s13, s12, s14
 80109b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80109b4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80109b8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80109bc:	eea7 0a80 	vfma.f32	s0, s15, s0
 80109c0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80109c4:	ee37 0a40 	vsub.f32	s0, s14, s0
 80109c8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80109cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80109d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80109d4:	ee10 3a10 	vmov	r3, s0
 80109d8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80109dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80109e0:	da1f      	bge.n	8010a22 <__ieee754_powf+0x552>
 80109e2:	f000 f947 	bl	8010c74 <scalbnf>
 80109e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80109ea:	e589      	b.n	8010500 <__ieee754_powf+0x30>
 80109ec:	4a1d      	ldr	r2, [pc, #116]	; (8010a64 <__ieee754_powf+0x594>)
 80109ee:	4293      	cmp	r3, r2
 80109f0:	dd07      	ble.n	8010a02 <__ieee754_powf+0x532>
 80109f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80109f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109fa:	bf4c      	ite	mi
 80109fc:	2001      	movmi	r0, #1
 80109fe:	2000      	movpl	r0, #0
 8010a00:	e61f      	b.n	8010642 <__ieee754_powf+0x172>
 8010a02:	d108      	bne.n	8010a16 <__ieee754_powf+0x546>
 8010a04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010a08:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a10:	f6ff af78 	blt.w	8010904 <__ieee754_powf+0x434>
 8010a14:	e7ed      	b.n	80109f2 <__ieee754_powf+0x522>
 8010a16:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8010a1a:	f73f af73 	bgt.w	8010904 <__ieee754_powf+0x434>
 8010a1e:	2000      	movs	r0, #0
 8010a20:	e78c      	b.n	801093c <__ieee754_powf+0x46c>
 8010a22:	ee00 3a10 	vmov	s0, r3
 8010a26:	e7de      	b.n	80109e6 <__ieee754_powf+0x516>
 8010a28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010a2c:	e568      	b.n	8010500 <__ieee754_powf+0x30>
 8010a2e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8010a68 <__ieee754_powf+0x598>
 8010a32:	e565      	b.n	8010500 <__ieee754_powf+0x30>
 8010a34:	eeb0 0a48 	vmov.f32	s0, s16
 8010a38:	e562      	b.n	8010500 <__ieee754_powf+0x30>
 8010a3a:	2700      	movs	r7, #0
 8010a3c:	e58d      	b.n	801055a <__ieee754_powf+0x8a>
 8010a3e:	bf00      	nop
 8010a40:	007fffff 	.word	0x007fffff
 8010a44:	35bfbe8c 	.word	0x35bfbe8c
 8010a48:	3f317200 	.word	0x3f317200
 8010a4c:	3f317218 	.word	0x3f317218
 8010a50:	b5ddea0e 	.word	0xb5ddea0e
 8010a54:	3331bb4c 	.word	0x3331bb4c
 8010a58:	388ab355 	.word	0x388ab355
 8010a5c:	bb360b61 	.word	0xbb360b61
 8010a60:	3e2aaaab 	.word	0x3e2aaaab
 8010a64:	43160000 	.word	0x43160000
 8010a68:	00000000 	.word	0x00000000

08010a6c <__ieee754_sqrtf>:
 8010a6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010a70:	4770      	bx	lr

08010a72 <with_errno>:
 8010a72:	b570      	push	{r4, r5, r6, lr}
 8010a74:	4604      	mov	r4, r0
 8010a76:	460d      	mov	r5, r1
 8010a78:	4616      	mov	r6, r2
 8010a7a:	f7fb fd1f 	bl	800c4bc <__errno>
 8010a7e:	4629      	mov	r1, r5
 8010a80:	6006      	str	r6, [r0, #0]
 8010a82:	4620      	mov	r0, r4
 8010a84:	bd70      	pop	{r4, r5, r6, pc}

08010a86 <xflow>:
 8010a86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a88:	4614      	mov	r4, r2
 8010a8a:	461d      	mov	r5, r3
 8010a8c:	b108      	cbz	r0, 8010a92 <xflow+0xc>
 8010a8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010a92:	e9cd 2300 	strd	r2, r3, [sp]
 8010a96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	4629      	mov	r1, r5
 8010a9e:	f7ef fdd3 	bl	8000648 <__aeabi_dmul>
 8010aa2:	2222      	movs	r2, #34	; 0x22
 8010aa4:	b003      	add	sp, #12
 8010aa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010aaa:	f7ff bfe2 	b.w	8010a72 <with_errno>

08010aae <__math_uflow>:
 8010aae:	b508      	push	{r3, lr}
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010ab6:	f7ff ffe6 	bl	8010a86 <xflow>
 8010aba:	ec41 0b10 	vmov	d0, r0, r1
 8010abe:	bd08      	pop	{r3, pc}

08010ac0 <__math_oflow>:
 8010ac0:	b508      	push	{r3, lr}
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010ac8:	f7ff ffdd 	bl	8010a86 <xflow>
 8010acc:	ec41 0b10 	vmov	d0, r0, r1
 8010ad0:	bd08      	pop	{r3, pc}

08010ad2 <with_errnof>:
 8010ad2:	b513      	push	{r0, r1, r4, lr}
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010ada:	f7fb fcef 	bl	800c4bc <__errno>
 8010ade:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010ae2:	6004      	str	r4, [r0, #0]
 8010ae4:	b002      	add	sp, #8
 8010ae6:	bd10      	pop	{r4, pc}

08010ae8 <xflowf>:
 8010ae8:	b130      	cbz	r0, 8010af8 <xflowf+0x10>
 8010aea:	eef1 7a40 	vneg.f32	s15, s0
 8010aee:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010af2:	2022      	movs	r0, #34	; 0x22
 8010af4:	f7ff bfed 	b.w	8010ad2 <with_errnof>
 8010af8:	eef0 7a40 	vmov.f32	s15, s0
 8010afc:	e7f7      	b.n	8010aee <xflowf+0x6>
	...

08010b00 <__math_uflowf>:
 8010b00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010b08 <__math_uflowf+0x8>
 8010b04:	f7ff bff0 	b.w	8010ae8 <xflowf>
 8010b08:	10000000 	.word	0x10000000

08010b0c <__math_oflowf>:
 8010b0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010b14 <__math_oflowf+0x8>
 8010b10:	f7ff bfea 	b.w	8010ae8 <xflowf>
 8010b14:	70000000 	.word	0x70000000

08010b18 <fabs>:
 8010b18:	ec51 0b10 	vmov	r0, r1, d0
 8010b1c:	ee10 2a10 	vmov	r2, s0
 8010b20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010b24:	ec43 2b10 	vmov	d0, r2, r3
 8010b28:	4770      	bx	lr

08010b2a <finite>:
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	ed8d 0b00 	vstr	d0, [sp]
 8010b30:	9801      	ldr	r0, [sp, #4]
 8010b32:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010b36:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010b3a:	0fc0      	lsrs	r0, r0, #31
 8010b3c:	b002      	add	sp, #8
 8010b3e:	4770      	bx	lr

08010b40 <scalbn>:
 8010b40:	b570      	push	{r4, r5, r6, lr}
 8010b42:	ec55 4b10 	vmov	r4, r5, d0
 8010b46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010b4a:	4606      	mov	r6, r0
 8010b4c:	462b      	mov	r3, r5
 8010b4e:	b99a      	cbnz	r2, 8010b78 <scalbn+0x38>
 8010b50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010b54:	4323      	orrs	r3, r4
 8010b56:	d036      	beq.n	8010bc6 <scalbn+0x86>
 8010b58:	4b39      	ldr	r3, [pc, #228]	; (8010c40 <scalbn+0x100>)
 8010b5a:	4629      	mov	r1, r5
 8010b5c:	ee10 0a10 	vmov	r0, s0
 8010b60:	2200      	movs	r2, #0
 8010b62:	f7ef fd71 	bl	8000648 <__aeabi_dmul>
 8010b66:	4b37      	ldr	r3, [pc, #220]	; (8010c44 <scalbn+0x104>)
 8010b68:	429e      	cmp	r6, r3
 8010b6a:	4604      	mov	r4, r0
 8010b6c:	460d      	mov	r5, r1
 8010b6e:	da10      	bge.n	8010b92 <scalbn+0x52>
 8010b70:	a32b      	add	r3, pc, #172	; (adr r3, 8010c20 <scalbn+0xe0>)
 8010b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b76:	e03a      	b.n	8010bee <scalbn+0xae>
 8010b78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010b7c:	428a      	cmp	r2, r1
 8010b7e:	d10c      	bne.n	8010b9a <scalbn+0x5a>
 8010b80:	ee10 2a10 	vmov	r2, s0
 8010b84:	4620      	mov	r0, r4
 8010b86:	4629      	mov	r1, r5
 8010b88:	f7ef fba8 	bl	80002dc <__adddf3>
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	460d      	mov	r5, r1
 8010b90:	e019      	b.n	8010bc6 <scalbn+0x86>
 8010b92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010b96:	460b      	mov	r3, r1
 8010b98:	3a36      	subs	r2, #54	; 0x36
 8010b9a:	4432      	add	r2, r6
 8010b9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010ba0:	428a      	cmp	r2, r1
 8010ba2:	dd08      	ble.n	8010bb6 <scalbn+0x76>
 8010ba4:	2d00      	cmp	r5, #0
 8010ba6:	a120      	add	r1, pc, #128	; (adr r1, 8010c28 <scalbn+0xe8>)
 8010ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bac:	da1c      	bge.n	8010be8 <scalbn+0xa8>
 8010bae:	a120      	add	r1, pc, #128	; (adr r1, 8010c30 <scalbn+0xf0>)
 8010bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bb4:	e018      	b.n	8010be8 <scalbn+0xa8>
 8010bb6:	2a00      	cmp	r2, #0
 8010bb8:	dd08      	ble.n	8010bcc <scalbn+0x8c>
 8010bba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010bbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010bc2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010bc6:	ec45 4b10 	vmov	d0, r4, r5
 8010bca:	bd70      	pop	{r4, r5, r6, pc}
 8010bcc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010bd0:	da19      	bge.n	8010c06 <scalbn+0xc6>
 8010bd2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010bd6:	429e      	cmp	r6, r3
 8010bd8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010bdc:	dd0a      	ble.n	8010bf4 <scalbn+0xb4>
 8010bde:	a112      	add	r1, pc, #72	; (adr r1, 8010c28 <scalbn+0xe8>)
 8010be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d1e2      	bne.n	8010bae <scalbn+0x6e>
 8010be8:	a30f      	add	r3, pc, #60	; (adr r3, 8010c28 <scalbn+0xe8>)
 8010bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bee:	f7ef fd2b 	bl	8000648 <__aeabi_dmul>
 8010bf2:	e7cb      	b.n	8010b8c <scalbn+0x4c>
 8010bf4:	a10a      	add	r1, pc, #40	; (adr r1, 8010c20 <scalbn+0xe0>)
 8010bf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d0b8      	beq.n	8010b70 <scalbn+0x30>
 8010bfe:	a10e      	add	r1, pc, #56	; (adr r1, 8010c38 <scalbn+0xf8>)
 8010c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c04:	e7b4      	b.n	8010b70 <scalbn+0x30>
 8010c06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010c0a:	3236      	adds	r2, #54	; 0x36
 8010c0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010c10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010c14:	4620      	mov	r0, r4
 8010c16:	4b0c      	ldr	r3, [pc, #48]	; (8010c48 <scalbn+0x108>)
 8010c18:	2200      	movs	r2, #0
 8010c1a:	e7e8      	b.n	8010bee <scalbn+0xae>
 8010c1c:	f3af 8000 	nop.w
 8010c20:	c2f8f359 	.word	0xc2f8f359
 8010c24:	01a56e1f 	.word	0x01a56e1f
 8010c28:	8800759c 	.word	0x8800759c
 8010c2c:	7e37e43c 	.word	0x7e37e43c
 8010c30:	8800759c 	.word	0x8800759c
 8010c34:	fe37e43c 	.word	0xfe37e43c
 8010c38:	c2f8f359 	.word	0xc2f8f359
 8010c3c:	81a56e1f 	.word	0x81a56e1f
 8010c40:	43500000 	.word	0x43500000
 8010c44:	ffff3cb0 	.word	0xffff3cb0
 8010c48:	3c900000 	.word	0x3c900000

08010c4c <fabsf>:
 8010c4c:	ee10 3a10 	vmov	r3, s0
 8010c50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010c54:	ee00 3a10 	vmov	s0, r3
 8010c58:	4770      	bx	lr

08010c5a <finitef>:
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010c60:	9801      	ldr	r0, [sp, #4]
 8010c62:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010c66:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8010c6a:	bfac      	ite	ge
 8010c6c:	2000      	movge	r0, #0
 8010c6e:	2001      	movlt	r0, #1
 8010c70:	b002      	add	sp, #8
 8010c72:	4770      	bx	lr

08010c74 <scalbnf>:
 8010c74:	ee10 3a10 	vmov	r3, s0
 8010c78:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8010c7c:	d025      	beq.n	8010cca <scalbnf+0x56>
 8010c7e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010c82:	d302      	bcc.n	8010c8a <scalbnf+0x16>
 8010c84:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010c88:	4770      	bx	lr
 8010c8a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8010c8e:	d122      	bne.n	8010cd6 <scalbnf+0x62>
 8010c90:	4b2a      	ldr	r3, [pc, #168]	; (8010d3c <scalbnf+0xc8>)
 8010c92:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010d40 <scalbnf+0xcc>
 8010c96:	4298      	cmp	r0, r3
 8010c98:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010c9c:	db16      	blt.n	8010ccc <scalbnf+0x58>
 8010c9e:	ee10 3a10 	vmov	r3, s0
 8010ca2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010ca6:	3a19      	subs	r2, #25
 8010ca8:	4402      	add	r2, r0
 8010caa:	2afe      	cmp	r2, #254	; 0xfe
 8010cac:	dd15      	ble.n	8010cda <scalbnf+0x66>
 8010cae:	ee10 3a10 	vmov	r3, s0
 8010cb2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8010d44 <scalbnf+0xd0>
 8010cb6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8010d48 <scalbnf+0xd4>
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	eeb0 7a67 	vmov.f32	s14, s15
 8010cc0:	bfb8      	it	lt
 8010cc2:	eef0 7a66 	vmovlt.f32	s15, s13
 8010cc6:	ee27 0a27 	vmul.f32	s0, s14, s15
 8010cca:	4770      	bx	lr
 8010ccc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010d4c <scalbnf+0xd8>
 8010cd0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010cd4:	4770      	bx	lr
 8010cd6:	0dd2      	lsrs	r2, r2, #23
 8010cd8:	e7e6      	b.n	8010ca8 <scalbnf+0x34>
 8010cda:	2a00      	cmp	r2, #0
 8010cdc:	dd06      	ble.n	8010cec <scalbnf+0x78>
 8010cde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010ce2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010ce6:	ee00 3a10 	vmov	s0, r3
 8010cea:	4770      	bx	lr
 8010cec:	f112 0f16 	cmn.w	r2, #22
 8010cf0:	da1a      	bge.n	8010d28 <scalbnf+0xb4>
 8010cf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010cf6:	4298      	cmp	r0, r3
 8010cf8:	ee10 3a10 	vmov	r3, s0
 8010cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010d00:	dd0a      	ble.n	8010d18 <scalbnf+0xa4>
 8010d02:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8010d44 <scalbnf+0xd0>
 8010d06:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8010d48 <scalbnf+0xd4>
 8010d0a:	eef0 7a40 	vmov.f32	s15, s0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	bf18      	it	ne
 8010d12:	eeb0 0a47 	vmovne.f32	s0, s14
 8010d16:	e7db      	b.n	8010cd0 <scalbnf+0x5c>
 8010d18:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8010d4c <scalbnf+0xd8>
 8010d1c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8010d50 <scalbnf+0xdc>
 8010d20:	eef0 7a40 	vmov.f32	s15, s0
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	e7f3      	b.n	8010d10 <scalbnf+0x9c>
 8010d28:	3219      	adds	r2, #25
 8010d2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010d2e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010d32:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010d54 <scalbnf+0xe0>
 8010d36:	ee07 3a10 	vmov	s14, r3
 8010d3a:	e7c4      	b.n	8010cc6 <scalbnf+0x52>
 8010d3c:	ffff3cb0 	.word	0xffff3cb0
 8010d40:	4c000000 	.word	0x4c000000
 8010d44:	7149f2ca 	.word	0x7149f2ca
 8010d48:	f149f2ca 	.word	0xf149f2ca
 8010d4c:	0da24260 	.word	0x0da24260
 8010d50:	8da24260 	.word	0x8da24260
 8010d54:	33000000 	.word	0x33000000

08010d58 <_init>:
 8010d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d5a:	bf00      	nop
 8010d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d5e:	bc08      	pop	{r3}
 8010d60:	469e      	mov	lr, r3
 8010d62:	4770      	bx	lr

08010d64 <_fini>:
 8010d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d66:	bf00      	nop
 8010d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d6a:	bc08      	pop	{r3}
 8010d6c:	469e      	mov	lr, r3
 8010d6e:	4770      	bx	lr
